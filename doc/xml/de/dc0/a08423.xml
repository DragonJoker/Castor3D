<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="fr">
  <compounddef id="de/dc0/a08423" kind="class" language="C++" prot="public">
    <compoundname>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</compoundname>
    <basecompoundref refid="de/d2b/a08447" prot="public" virt="non-virtual">castor::ParserParameterBase</basecompoundref>
    <includes local="no">ParserParameter.hpp</includes>
    <templateparamlist>
      <param>
        <type><ref refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222" kindref="member">ParameterType</ref></type>
        <declname>Type</declname>
        <defname>Type</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="de/dc0/a08423_1aca9604936410c4f13d87fc109a5af3d7" prot="public" static="no">
        <type><ref refid="d2/dd2/a02279_1a0cfae048124eacb762a5f80847f7e57e" kindref="member">ParserParameterValueType</ref>&lt; Type &gt;</type>
        <definition>using castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::ValueType =  ParserParameterValueType&lt; Type &gt;</definition>
        <argsstring></argsstring>
        <name>ValueType</name>
        <qualifiedname>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::ValueType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Le type de valeur du paramètre. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="33" column="1" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="de/dc0/a08423_1a25e01794f583b9998894d08902b68e38" prot="public" static="no" mutable="no">
        <type><ref refid="de/dc0/a08423_1aca9604936410c4f13d87fc109a5af3d7" kindref="member">ValueType</ref></type>
        <definition>ValueType castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::m_value</definition>
        <argsstring></argsstring>
        <name>m_value</name>
        <qualifiedname>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::m_value</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>La valeur du paramètre. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="89" column="11" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="variable" id="de/dc0/a08423_1a7bd1316102091f9c26401d737c503b44" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::m_set</definition>
        <argsstring></argsstring>
        <name>m_set</name>
        <qualifiedname>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::m_set</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>La valeur du paramètre. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="92" column="6" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="92" bodyend="92"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="de/dc0/a08423_1aa9e0e9cbcf13822018771bb3e78a9672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::ParserParameter</definition>
        <argsstring>()=default</argsstring>
        <name>ParserParameter</name>
        <qualifiedname>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::ParserParameter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="de/dc0/a08423_1a0b71b37cf9e3226822a69e762e3f27fa" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::ParserParameter</definition>
        <argsstring>(ValueType rhs)</argsstring>
        <name>ParserParameter</name>
        <qualifiedname>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::ParserParameter</qualifiedname>
        <param>
          <type><ref refid="de/dc0/a08423_1aca9604936410c4f13d87fc109a5af3d7" kindref="member">ValueType</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="43" column="10" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="de/dc0/a08423_1a4f7061cef7688c388c86ad27381a887f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222" kindref="member">ParameterType</ref></type>
        <definition>ParameterType castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::getType</definition>
        <argsstring>() const override</argsstring>
        <name>getType</name>
        <qualifiedname>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::getType</qualifiedname>
        <reimplements refid="de/d2b/a08447_1a41610aa89493c0f5a8f142047decd507">getType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Le type du paramètre.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="51" column="15" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="de/dc0/a08423_1a7848d7e3ac53e5dcc371aee88dee2433" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="d2/dd2/a02279_1a7fc5aca9eb8d35e69abfe9df07e365e3" kindref="member">StringView</ref></type>
        <definition>StringView castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::getStrType</definition>
        <argsstring>() const override</argsstring>
        <name>getStrType</name>
        <qualifiedname>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::getStrType</qualifiedname>
        <reimplements refid="de/d2b/a08447_1aaa1b185a3f59b17babb040e63322f51b">getStrType</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Le type du chaîne paramètre.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="58" column="12" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="de/dc0/a08423_1a59a35afd30422aeedf82f6f30519f2c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="d2/dd2/a02279_1ae025149db64e1fa986a71e2460c50263" kindref="member">ParserParameterBaseSPtr</ref></type>
        <definition>ParserParameterBaseSPtr castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::clone</definition>
        <argsstring>() const override</argsstring>
        <name>clone</name>
        <qualifiedname>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::clone</qualifiedname>
        <reimplements refid="de/d2b/a08447_1aa2f674a593f9568a444c4736e98f3f63">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Une copie de ce paramètre.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="65" column="25" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="de/dc0/a08423_1a2f3b3a1e0ccc85da51c911e0b4ab6f3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::parse</definition>
        <argsstring>(LoggerInstance &amp;logger, String &amp;params) override</argsstring>
        <name>parse</name>
        <qualifiedname>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::parse</qualifiedname>
        <reimplements refid="de/d2b/a08447_1ad0e328983258a26699a4bf3cc2222fdc">parse</reimplements>
        <param>
          <type><ref refid="d9/d93/a09063" kindref="compound">LoggerInstance</ref> &amp;</type>
          <declname>logger</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Vérifie le paramètre.   </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">logger</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;instance de logger. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Le texte contenant la valeur du paramètre. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>false</computeroutput> si un problème quelconque est arrivé.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="72" column="6" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="de/dc0/a08423_1af50d78e75fb0bfe9e54d6d3587315344" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::isSet</definition>
        <argsstring>() override</argsstring>
        <name>isSet</name>
        <qualifiedname>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;::isSet</qualifiedname>
        <reimplements refid="de/d2b/a08447_1aeb683727ae9221147f3120ea2b60ebd7">isSet</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>false</computeroutput> si la valeur du paramètre n&apos;est pas définie.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="81" column="6" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="81" bodyend="84"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Parmètre de parseur spécifié. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</label>
        <link refid="de/dc0/a08423"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>castor::ParserParameterBase</label>
        <link refid="de/d2b/a08447"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</label>
        <link refid="de/dc0/a08423"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>castor::ParserParameterBase</label>
        <link refid="de/d2b/a08447"/>
      </node>
    </collaborationgraph>
    <location file="CastorUtils/FileParser/ParserParameter.hpp" line="26" column="1" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="29" bodyend="93"/>
    <listofallmembers>
      <member refid="de/dc0/a08423_1a59a35afd30422aeedf82f6f30519f2c9" prot="public" virt="virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>clone</name></member>
      <member refid="de/d2b/a08447_1ae0e81dd342ef0b965a8c1dade00d6dc8" prot="public" virt="non-virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>get</name></member>
      <member refid="de/d2b/a08447_1ace87ad3fdc8e10b8dadafa7d773f7661" prot="public" virt="non-virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>get</name></member>
      <member refid="de/d2b/a08447_1a0a021fc761d88ea19cb2796bdd398246" prot="public" virt="virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>getBaseType</name></member>
      <member refid="de/dc0/a08423_1a7848d7e3ac53e5dcc371aee88dee2433" prot="public" virt="virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>getStrType</name></member>
      <member refid="de/dc0/a08423_1a4f7061cef7688c388c86ad27381a887f" prot="public" virt="virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>getType</name></member>
      <member refid="de/dc0/a08423_1af50d78e75fb0bfe9e54d6d3587315344" prot="public" virt="virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>isSet</name></member>
      <member refid="de/dc0/a08423_1a7bd1316102091f9c26401d737c503b44" prot="public" virt="non-virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>m_set</name></member>
      <member refid="de/dc0/a08423_1a25e01794f583b9998894d08902b68e38" prot="public" virt="non-virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>m_value</name></member>
      <member refid="de/d2b/a08447_1aa2dbc8974ad46f7932325fe2873c59e7" prot="public" virt="non-virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>operator=</name></member>
      <member refid="de/d2b/a08447_1a147637f52d21273d89cbbb5384456c37" prot="public" virt="non-virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>operator=</name></member>
      <member refid="de/dc0/a08423_1a2f3b3a1e0ccc85da51c911e0b4ab6f3c" prot="public" virt="virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>parse</name></member>
      <member refid="de/dc0/a08423_1aa9e0e9cbcf13822018771bb3e78a9672" prot="public" virt="non-virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>ParserParameter</name></member>
      <member refid="de/dc0/a08423_1a0b71b37cf9e3226822a69e762e3f27fa" prot="public" virt="non-virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>ParserParameter</name></member>
      <member refid="de/d2b/a08447_1a522312a8be825a74fa7cf0435381ce5e" prot="public" virt="non-virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>ParserParameterBase</name></member>
      <member refid="de/d2b/a08447_1ac857bb7b7fc5f8fbd7be58c45955edea" prot="public" virt="non-virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>ParserParameterBase</name></member>
      <member refid="de/d2b/a08447_1a35b2576db80f9ba52a0386475c69fca9" prot="public" virt="non-virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>ParserParameterBase</name></member>
      <member refid="de/dc0/a08423_1aca9604936410c4f13d87fc109a5af3d7" prot="public" virt="non-virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>ValueType</name></member>
      <member refid="de/d2b/a08447_1a16d69fa8336be44cecb5fd7900849bf1" prot="public" virt="virtual"><scope>castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</scope><name>~ParserParameterBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="fr">
  <compounddef id="d3/da9/a08411" kind="class" language="C++" prot="public">
    <compoundname>castor::ParserParameterTypeException</compoundname>
    <basecompoundref refid="d2/d96/a08355" prot="public" virt="non-virtual">castor::Exception</basecompoundref>
    <includes local="no">ParserParameterTypeException.hpp</includes>
    <templateparamlist>
      <param>
        <type><ref refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222" kindref="member">ParameterType</ref></type>
        <declname>ExpectedT</declname>
        <defname>ExpectedT</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="d3/da9/a08411_1ae2be1f6470314608ba851a3e91f521a5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>castor::ParserParameterTypeException&lt; ExpectedT &gt;::ParserParameterTypeException</definition>
        <argsstring>(ParameterType givenType, char const *file, char const *function, uint32_t line)</argsstring>
        <name>ParserParameterTypeException</name>
        <qualifiedname>castor::ParserParameterTypeException::ParserParameterTypeException</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222" kindref="member">ParameterType</ref></type>
          <declname>givenType</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Constructeur. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">givenType</parametername>
</parameternamelist>
<parameterdescription>
<para>Le type donné par l&apos;utilisateur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Le nom du fichier incriminé. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">function</parametername>
</parameternamelist>
<parameterdescription>
<para>Le nom de la fonction incriminée. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">line</parametername>
</parameternamelist>
<parameterdescription>
<para>Le numéro de la ligne incriminée. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterTypeException.hpp" line="32" column="10" bodyfile="CastorUtils/FileParser/ParserParameterTypeException.hpp" bodystart="32" bodyend="42"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="d2/d96/a08355" kindref="compound">Exception</ref> lancée lorsque l&apos;utilisateur se trompe de type de paramètre. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>castor::Exception</label>
        <link refid="d2/d96/a08355"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>castor::ParserParameterTypeException&lt; ExpectedT &gt;</label>
        <link refid="d3/da9/a08411"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::exception</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>std::basic_string&lt; mbchar &gt;</label>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; mbchar &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>castor::Exception</label>
        <link refid="d2/d96/a08355"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_callStack</edgelabel>
          <edgelabel>m_description</edgelabel>
          <edgelabel>m_filename</edgelabel>
          <edgelabel>m_functionName</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>castor::ParserParameterTypeException&lt; ExpectedT &gt;</label>
        <link refid="d3/da9/a08411"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="3">
        <label>std::exception</label>
      </node>
    </collaborationgraph>
    <location file="CastorUtils/FileParser/ParserParameterTypeException.hpp" line="14" column="1" bodyfile="CastorUtils/FileParser/ParserParameterTypeException.hpp" bodystart="16" bodyend="43"/>
    <listofallmembers>
      <member refid="d2/d96/a08355_1ada321c02ff8fd2e8084701084961b3f2" prot="public" virt="non-virtual"><scope>castor::ParserParameterTypeException</scope><name>Exception</name></member>
      <member refid="d2/d96/a08355_1a99bb999221629bf5932f8e3a270b32c7" prot="public" virt="non-virtual"><scope>castor::ParserParameterTypeException</scope><name>Exception</name></member>
      <member refid="d2/d96/a08355_1ac6d91176e5c1302307ad7e21bfff40c1" prot="public" virt="non-virtual"><scope>castor::ParserParameterTypeException</scope><name>getDescription</name></member>
      <member refid="d2/d96/a08355_1a989a591d3c82e148275a16be6ff0780d" prot="public" virt="non-virtual"><scope>castor::ParserParameterTypeException</scope><name>getFileName</name></member>
      <member refid="d2/d96/a08355_1aee67527c1afbd1f29dec9191a36cf89e" prot="public" virt="non-virtual"><scope>castor::ParserParameterTypeException</scope><name>getFullDescription</name></member>
      <member refid="d2/d96/a08355_1af6c65d07734b666514bcfeac7a080aa5" prot="public" virt="non-virtual"><scope>castor::ParserParameterTypeException</scope><name>getFunction</name></member>
      <member refid="d2/d96/a08355_1a80c010456bf1cd71b21ad38347f522d5" prot="public" virt="non-virtual"><scope>castor::ParserParameterTypeException</scope><name>getLine</name></member>
      <member refid="d2/d96/a08355_1ab03a4184301dd65c8a1e3b1dc304bbd5" prot="protected" virt="non-virtual"><scope>castor::ParserParameterTypeException</scope><name>m_callStack</name></member>
      <member refid="d2/d96/a08355_1aeeb89f384eb9fc4189a5d3b49491b87c" prot="protected" virt="non-virtual"><scope>castor::ParserParameterTypeException</scope><name>m_description</name></member>
      <member refid="d2/d96/a08355_1a304ae098a78df1d109b798702b9a4fb5" prot="protected" virt="non-virtual"><scope>castor::ParserParameterTypeException</scope><name>m_filename</name></member>
      <member refid="d2/d96/a08355_1aaf2d800d4ff757a6b755a888e11b31c5" prot="protected" virt="non-virtual"><scope>castor::ParserParameterTypeException</scope><name>m_functionName</name></member>
      <member refid="d2/d96/a08355_1a7b3f321153f9f0fe0b7e71e328822448" prot="protected" virt="non-virtual"><scope>castor::ParserParameterTypeException</scope><name>m_line</name></member>
      <member refid="d3/da9/a08411_1ae2be1f6470314608ba851a3e91f521a5" prot="public" virt="non-virtual"><scope>castor::ParserParameterTypeException</scope><name>ParserParameterTypeException</name></member>
      <member refid="d2/d96/a08355_1a18163f7cb9b8953865ce54e0073892a5" prot="public" virt="non-virtual"><scope>castor::ParserParameterTypeException</scope><name>what</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

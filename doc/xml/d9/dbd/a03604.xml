<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="d9/dbd/a03604" kind="struct" language="C++" prot="public">
    <compoundname>castor3d::AlphaTestComponent::ComponentsShader</compoundname>
    <basecompoundref refid="d4/d43/a03700" prot="public" virt="non-virtual">castor3d::shader::PassComponentsShader</basecompoundref>
    <includes local="no">AlphaTestComponent.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d9/dbd/a03604_1a449cd9508c215213ac575d381878a1c0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>castor3d::AlphaTestComponent::ComponentsShader::ComponentsShader</definition>
        <argsstring>(PassComponentPlugin const &amp;plugin)</argsstring>
        <name>ComponentsShader</name>
        <qualifiedname>castor3d::AlphaTestComponent::ComponentsShader::ComponentsShader</qualifiedname>
        <param>
          <type><ref refid="dc/d0d/a03708" kindref="compound">PassComponentPlugin</ref> const &amp;</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Material/Pass/Component/Other/AlphaTestComponent.hpp" line="36" column="10" bodyfile="Material/Pass/Component/Other/AlphaTestComponent.hpp" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="d9/dbd/a03604_1a6566717b800c685be3e36607f72ab640" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="dd/dd7/a00260_1ab7d762f315ad9902201ba70979ed2ef0" kindref="member">C3D_API</ref> void</type>
        <definition>C3D_API void castor3d::AlphaTestComponent::ComponentsShader::fillComponents</definition>
        <argsstring>(sdw::type::BaseStruct &amp;components, shader::Materials const &amp;materials, sdw::StructInstance const *surface) const override</argsstring>
        <name>fillComponents</name>
        <qualifiedname>castor3d::AlphaTestComponent::ComponentsShader::fillComponents</qualifiedname>
        <reimplements refid="d4/d43/a03700_1a23dbc602d3b0621c9df19b77038ae79e">fillComponents</reimplements>
        <param>
          <type>sdw::type::BaseStruct &amp;</type>
          <declname>components</declname>
        </param>
        <param>
          <type><ref refid="d1/dc9/a06044" kindref="compound">shader::Materials</ref> const &amp;</type>
          <declname>materials</declname>
        </param>
        <param>
          <type>sdw::StructInstance const *</type>
          <declname>surface</declname>
        </param>
        <briefdescription>
<para>Fills the components shader struct with the members provided by this component. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">components</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the struct members. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">materials</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to check if the current render pass needs this component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">surface</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to check if the surface supports needed data for this component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Material/Pass/Component/Other/AlphaTestComponent.hpp" line="41" column="14"/>
      </memberdef>
      <memberdef kind="function" id="d9/dbd/a03604_1ad556e4c1d14b1404aceaac3bbed25ee8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="dd/dd7/a00260_1ab7d762f315ad9902201ba70979ed2ef0" kindref="member">C3D_API</ref> void</type>
        <definition>C3D_API void castor3d::AlphaTestComponent::ComponentsShader::fillComponentsInits</definition>
        <argsstring>(sdw::type::BaseStruct const &amp;components, shader::Materials const &amp;materials, shader::Material const *material, sdw::StructInstance const *surface, sdw::Vec4 const *clrCot, sdw::expr::ExprList &amp;inits) const override</argsstring>
        <name>fillComponentsInits</name>
        <qualifiedname>castor3d::AlphaTestComponent::ComponentsShader::fillComponentsInits</qualifiedname>
        <reimplements refid="d4/d43/a03700_1a80a16a96d3e5d71cb6b631a77c73217f">fillComponentsInits</reimplements>
        <param>
          <type>sdw::type::BaseStruct const &amp;</type>
          <declname>components</declname>
        </param>
        <param>
          <type><ref refid="d1/dc9/a06044" kindref="compound">shader::Materials</ref> const &amp;</type>
          <declname>materials</declname>
        </param>
        <param>
          <type><ref refid="d5/d32/a06040" kindref="compound">shader::Material</ref> const *</type>
          <declname>material</declname>
        </param>
        <param>
          <type>sdw::StructInstance const *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>sdw::Vec4 const *</type>
          <declname>clrCot</declname>
        </param>
        <param>
          <type>sdw::expr::ExprList &amp;</type>
          <declname>inits</declname>
        </param>
        <briefdescription>
<para>Fills the components shader struct members initialiser with the ones provided by this component. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>The initialisers order and count must match the ones in fillComponent. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">components</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the struct members. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">materials</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to check if the current render pass needs this component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">material</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to retrieve needed data for this component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">surface</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to retrieve needed data for this component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clrCot</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to retrieve needed data for this component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">inits</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the initialisers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Material/Pass/Component/Other/AlphaTestComponent.hpp" line="44" column="14"/>
      </memberdef>
      <memberdef kind="function" id="d9/dbd/a03604_1affd9765541d2da399f1a801d78e495a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="dd/dd7/a00260_1ab7d762f315ad9902201ba70979ed2ef0" kindref="member">C3D_API</ref> void</type>
        <definition>C3D_API void castor3d::AlphaTestComponent::ComponentsShader::blendComponents</definition>
        <argsstring>(shader::Materials const &amp;materials, sdw::Float const &amp;passMultiplier, shader::BlendComponents &amp;res, shader::BlendComponents const &amp;src) const override</argsstring>
        <name>blendComponents</name>
        <qualifiedname>castor3d::AlphaTestComponent::ComponentsShader::blendComponents</qualifiedname>
        <reimplements refid="d4/d43/a03700_1a277de8d6d8fa8c0e3d50edb51fe2157c">blendComponents</reimplements>
        <param>
          <type><ref refid="d1/dc9/a06044" kindref="compound">shader::Materials</ref> const &amp;</type>
          <declname>materials</declname>
        </param>
        <param>
          <type>sdw::Float const &amp;</type>
          <declname>passMultiplier</declname>
        </param>
        <param>
          <type><ref refid="d7/d4b/a05980" kindref="compound">shader::BlendComponents</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="d7/d4b/a05980" kindref="compound">shader::BlendComponents</ref> const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Used to mix components when multiple passes are blended together. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">materials</parametername>
</parameternamelist>
<parameterdescription>
<para>Used to check if the current render pass needs this component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">passMultiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>The factor for the current pass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">res</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the blending result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>The current pass data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Material/Pass/Component/Other/AlphaTestComponent.hpp" line="50" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>castor3d::AlphaTestComponent::ComponentsShader</label>
        <link refid="d9/dbd/a03604"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>castor3d::shader::PassComponentsShader</label>
        <link refid="d4/d43/a03700"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>castor3d::shader::PassShader</label>
        <link refid="df/d9f/a03696"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>castor3d::AlphaTestComponent::ComponentsShader</label>
        <link refid="d9/dbd/a03604"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>castor3d::shader::PassComponentsShader</label>
        <link refid="d4/d43/a03700"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>castor3d::shader::PassShader</label>
        <link refid="df/d9f/a03696"/>
      </node>
    </collaborationgraph>
    <location file="Material/Pass/Component/Other/AlphaTestComponent.hpp" line="33" column="1" bodyfile="Material/Pass/Component/Other/AlphaTestComponent.hpp" bodystart="35" bodyend="54"/>
    <listofallmembers>
      <member refid="d4/d43/a03700_1ab25c5779aec7c1abcf7f275e8ac032e3" prot="public" virt="virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>applyComponents</name></member>
      <member refid="d4/d43/a03700_1a616999e78117d42a2aa12e8e1c09a7fe" prot="protected" virt="non-virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>applyFloatComponent</name></member>
      <member refid="d4/d43/a03700_1a5b84ef8cb9fbdeac8fce698fe02b04e8" prot="protected" virt="non-virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>applyVec3Component</name></member>
      <member refid="d9/dbd/a03604_1affd9765541d2da399f1a801d78e495a4" prot="public" virt="virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>blendComponents</name></member>
      <member refid="d9/dbd/a03604_1a449cd9508c215213ac575d381878a1c0" prot="public" virt="non-virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>ComponentsShader</name></member>
      <member refid="d4/d43/a03700_1a088ad8fd801823896872e5a749657065" prot="public" virt="virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>computeTexcoord</name></member>
      <member refid="d4/d43/a03700_1a3d431198b1bf91e0d49b84d1950249b5" prot="public" virt="virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>computeTexcoord</name></member>
      <member refid="d9/dbd/a03604_1a6566717b800c685be3e36607f72ab640" prot="public" virt="virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>fillComponents</name></member>
      <member refid="d9/dbd/a03604_1ad556e4c1d14b1404aceaac3bbed25ee8" prot="public" virt="virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>fillComponentsInits</name></member>
      <member refid="d4/d43/a03700_1a846afb362f8cdb6bd2dc1a3f98db9f64" prot="public" virt="non-virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>getId</name></member>
      <member refid="d4/d43/a03700_1a1727bca64233903f00c27aacd146429b" prot="public" virt="non-virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>getPlugin</name></member>
      <member refid="d4/d43/a03700_1ae6acbd6edb3df14dcecccd2598bed038" prot="public" virt="virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>isMapSampling</name></member>
      <member refid="df/d9f/a03696_1a06fad613f64fa717de3e8032393fdbd7" prot="public" virt="non-virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>operator=</name></member>
      <member refid="df/d9f/a03696_1a0e5c7fea4f6928009d6da51c4d78a9df" prot="public" virt="non-virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>operator=</name></member>
      <member refid="d4/d43/a03700_1a4a8895df635a573d33aee3fdd42385b2" prot="public" virt="non-virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>PassComponentsShader</name></member>
      <member refid="df/d9f/a03696_1ab439edbbb2da660939e0209d9bfba3b0" prot="public" virt="non-virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>PassShader</name></member>
      <member refid="df/d9f/a03696_1ae0263dc410ae3d05ddea8cc9ad7eac73" prot="public" virt="non-virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>PassShader</name></member>
      <member refid="df/d9f/a03696_1aee18e0dfda227ed54fb966d7d75a1ea5" prot="public" virt="non-virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>PassShader</name></member>
      <member refid="d4/d43/a03700_1adae1f04a5d2866590f4f3204b233dd99" prot="public" virt="virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>sampleMap</name></member>
      <member refid="d4/d43/a03700_1a226e2c05d6cff43678f171ef5f413887" prot="public" virt="virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>sampleMap</name></member>
      <member refid="d4/d43/a03700_1a7ce76843425ffd3e570eaa9ddd7b059e" prot="public" virt="virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>updateComponent</name></member>
      <member refid="df/d9f/a03696_1a2bdc8907317b8a1f12d3b60ab767f9c6" prot="public" virt="virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>updateOutputs</name></member>
      <member refid="df/d9f/a03696_1a56338db0aed5f44427291aa6c631872b" prot="public" virt="virtual"><scope>castor3d::AlphaTestComponent::ComponentsShader</scope><name>~PassShader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

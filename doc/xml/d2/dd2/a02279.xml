<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="fr">
  <compounddef id="d2/dd2/a02279" kind="namespace" language="C++">
    <compoundname>castor</compoundname>
    <innerclass refid="d2/dc5/a08419" prot="public">castor::AdditionalParsers</innerclass>
    <innerclass refid="d0/d73/a07939" prot="public">castor::Aligned</innerclass>
    <innerclass refid="df/dbb/a07943" prot="public">castor::AlignedFrom</innerclass>
    <innerclass refid="d6/d92/a07935" prot="public">castor::AlignedMemoryAllocator</innerclass>
    <innerclass refid="d4/df4/a09099" prot="public">castor::AngleT</innerclass>
    <innerclass refid="d4/dcc/a08151" prot="public">castor::ArrayView</innerclass>
    <innerclass refid="da/d96/a09447" prot="public">castor::AsyncJobQueue</innerclass>
    <innerclass refid="dc/d86/a07971" prot="public">castor::BinaryFile</innerclass>
    <innerclass refid="d5/d12/a07975" prot="public">castor::BinaryLoader</innerclass>
    <innerclass refid="d5/ddf/a07979" prot="public">castor::BinaryWriter</innerclass>
    <innerclass refid="d5/de5/a08379" prot="public">castor::BlockContext</innerclass>
    <innerclass refid="d7/d23/a08155" prot="public">castor::BlockGuard</innerclass>
    <innerclass refid="d1/df2/a09363" prot="public">castor::BlockTimer</innerclass>
    <innerclass refid="d6/d97/a09367" prot="public">castor::BlockTracker</innerclass>
    <innerclass refid="d6/db9/a09463" prot="public">castor::BlueNoise</innerclass>
    <innerclass refid="d6/d51/a08727" prot="public">castor::BoundingBox</innerclass>
    <innerclass refid="da/dc6/a08731" prot="public">castor::BoundingContainer</innerclass>
    <innerclass refid="dd/d6f/a08735" prot="public">castor::BoundingSphere</innerclass>
    <innerclass refid="d5/d4f/a09495" prot="public">castor::BuddyAllocatorT</innerclass>
    <innerclass refid="dc/dc1/a09487" prot="public">castor::BuddyAllocatorTraits</innerclass>
    <innerclass refid="dc/dcc/a08179" prot="public">castor::CallTraits</innerclass>
    <innerclass refid="d2/def/a08159" prot="public">castor::ChangeTrackedT</innerclass>
    <innerclass refid="db/d36/a07959" prot="public">castor::CheckedMutexT</innerclass>
    <innerclass refid="da/d5d/a08743" prot="public">castor::ColourComponent</innerclass>
    <innerclass refid="d4/ddb/a08183" prot="public">castor::ConnectionT</innerclass>
    <innerclass refid="d2/d92/a09051" prot="public">castor::ConsoleImpl</innerclass>
    <innerclass refid="d4/d1d/a08807" prot="public">castor::ConstPixelIterator</innerclass>
    <innerclass refid="dc/d84/a08371" prot="public">castor::ContextDeleter</innerclass>
    <innerclass refid="db/df1/a08375" prot="public">castor::ContextDeleterT</innerclass>
    <innerclass refid="d9/d6a/a09103" prot="public">castor::Coords</innerclass>
    <innerclass refid="dc/d65/a09371" prot="public">castor::CpuInformations</innerclass>
    <innerclass refid="da/d50/a08167" prot="public">castor::DataHolderT</innerclass>
    <innerclass refid="d1/d45/a08747" prot="public">castor::DataImageLoader</innerclass>
    <innerclass refid="d2/dd9/a09079" prot="public">castor::DebugLoggerStreambufTraitsT</innerclass>
    <innerclass refid="d7/dbd/a07963" prot="public">castor::Deleter</innerclass>
    <innerclass refid="dc/d83/a05451" prot="public">castor::Deleter&lt; castor3d::BaseDataComponentT&lt; SubmeshDataT, DataT &gt; &gt;</innerclass>
    <innerclass refid="d5/d66/a08295" prot="public">castor::Deleter&lt; ResourceT&lt; ResT, KeyT &gt; &gt;</innerclass>
    <innerclass refid="de/ded/a08239" prot="public">castor::DummyFunctorT</innerclass>
    <innerclass refid="d5/dfa/a08187" prot="public">castor::DynamicBitsetT</innerclass>
    <innerclass refid="d7/d44/a09387" prot="public">castor::DynamicLibrary</innerclass>
    <innerclass refid="d8/dc8/a09091" prot="public">castor::ErrorLoggerStreambufTraitsT</innerclass>
    <innerclass refid="d2/d96/a08355" prot="public">castor::Exception</innerclass>
    <innerclass refid="d0/d6a/a08751" prot="public">castor::ExrImageLoader</innerclass>
    <innerclass refid="d1/d79/a09119" prot="public">castor::Fact</innerclass>
    <innerclass refid="d5/d49/a09123" prot="public">castor::Fact&lt; T, 0 &gt;</innerclass>
    <innerclass refid="d4/da7/a08195" prot="public">castor::Factory</innerclass>
    <innerclass refid="d9/d1e/a08191" prot="public">castor::FactoryEntryT</innerclass>
    <innerclass refid="d4/d10/a08003" prot="public">castor::File</innerclass>
    <innerclass refid="d6/d08/a08367" prot="public">castor::FileParser</innerclass>
    <innerclass refid="d0/dfa/a08383" prot="public">castor::FileParserContext</innerclass>
    <innerclass refid="de/d8a/a07983" prot="public">castor::FileTyper</innerclass>
    <innerclass refid="da/d4d/a07967" prot="public">castor::FileTyper&lt; FileType::eBinary &gt;</innerclass>
    <innerclass refid="d6/d72/a08071" prot="public">castor::FileTyper&lt; FileType::eText &gt;</innerclass>
    <innerclass refid="db/d9d/a07995" prot="public">castor::FileWriter</innerclass>
    <innerclass refid="dd/dbb/a08207" prot="public">castor::FlagCombination</innerclass>
    <innerclass refid="d4/dfd/a08203" prot="public">castor::FlagIterator</innerclass>
    <innerclass refid="df/dbf/a08199" prot="public">castor::FlagIteratorTraitsT</innerclass>
    <innerclass refid="d0/dbd/a08755" prot="public">castor::Font</innerclass>
    <innerclass refid="db/d9c/a09467" prot="public">castor::FractalNoiseT</innerclass>
    <innerclass refid="df/d20/a08771" prot="public">castor::FreeImageLoader</innerclass>
    <innerclass refid="d9/db6/a08775" prot="public">castor::GliImageLoader</innerclass>
    <innerclass refid="d6/dbd/a08779" prot="public">castor::GliImageWriter</innerclass>
    <innerclass refid="d0/db3/a08783" prot="public">castor::Glyph</innerclass>
    <innerclass refid="d7/dc3/a08931" prot="public">castor::Grid</innerclass>
    <innerclass refid="d2/d4c/a08211" prot="public">castor::GroupChangeTrackedT</innerclass>
    <innerclass refid="d9/d6f/a08847" prot="public">castor::HasAlpha</innerclass>
    <innerclass refid="d6/db9/a08407" prot="public">castor::HasBaseParameterType</innerclass>
    <innerclass refid="db/d3b/a08671" prot="public">castor::HasBaseParameterType&lt; ParameterType::eBitwiseOred32BitsCheckedText &gt;</innerclass>
    <innerclass refid="d5/d37/a08675" prot="public">castor::HasBaseParameterType&lt; ParameterType::eBitwiseOred64BitsCheckedText &gt;</innerclass>
    <innerclass refid="d0/df5/a08667" prot="public">castor::HasBaseParameterType&lt; ParameterType::eCheckedText &gt;</innerclass>
    <innerclass refid="d4/d78/a08663" prot="public">castor::HasBaseParameterType&lt; ParameterType::eName &gt;</innerclass>
    <innerclass refid="de/d4d/a08935" prot="public">castor::HdrColourComponent</innerclass>
    <innerclass refid="d6/d3e/a08939" prot="public">castor::Image</innerclass>
    <innerclass refid="dd/da4/a08943" prot="public">castor::ImageCreateParams</innerclass>
    <innerclass refid="d5/d6e/a08955" prot="public">castor::ImageLayout</innerclass>
    <innerclass refid="dc/d26/a08963" prot="public">castor::ImageLoader</innerclass>
    <innerclass refid="dc/d09/a08787" prot="public">castor::ImageLoaderConfig</innerclass>
    <innerclass refid="d6/ded/a08959" prot="public">castor::ImageLoaderImpl</innerclass>
    <innerclass refid="d0/daf/a08971" prot="public">castor::ImageWriter</innerclass>
    <innerclass refid="dd/d59/a08967" prot="public">castor::ImageWriterImpl</innerclass>
    <innerclass refid="d5/d0b/a09215" prot="public">castor::IndexedRangeT</innerclass>
    <innerclass refid="d4/d76/a09083" prot="public">castor::InfoLoggerStreambufTraitsT</innerclass>
    <innerclass refid="df/d9d/a08887" prot="public">castor::Is16FComponents</innerclass>
    <innerclass refid="d3/d35/a08875" prot="public">castor::Is16SComponents</innerclass>
    <innerclass refid="d3/d9e/a08859" prot="public">castor::Is16UComponents</innerclass>
    <innerclass refid="d0/d7d/a08891" prot="public">castor::Is32FComponents</innerclass>
    <innerclass refid="d1/d83/a08879" prot="public">castor::Is32SComponents</innerclass>
    <innerclass refid="d3/dcf/a08863" prot="public">castor::Is32UComponents</innerclass>
    <innerclass refid="d8/d0c/a08895" prot="public">castor::Is64FComponents</innerclass>
    <innerclass refid="d4/d08/a08883" prot="public">castor::Is64SComponents</innerclass>
    <innerclass refid="de/d06/a08867" prot="public">castor::Is64UComponents</innerclass>
    <innerclass refid="d5/df5/a08871" prot="public">castor::Is8SComponents</innerclass>
    <innerclass refid="d5/d1d/a08851" prot="public">castor::Is8SRGBComponents</innerclass>
    <innerclass refid="de/d22/a08855" prot="public">castor::Is8UComponents</innerclass>
    <innerclass refid="d5/d41/a08679" prot="public">castor::IsArithmeticType</innerclass>
    <innerclass refid="db/d05/a08719" prot="public">castor::IsArithmeticType&lt; ParameterType::eDouble &gt;</innerclass>
    <innerclass refid="dd/d58/a08715" prot="public">castor::IsArithmeticType&lt; ParameterType::eFloat &gt;</innerclass>
    <innerclass refid="dc/d0c/a08687" prot="public">castor::IsArithmeticType&lt; ParameterType::eInt16 &gt;</innerclass>
    <innerclass refid="db/d9f/a08691" prot="public">castor::IsArithmeticType&lt; ParameterType::eInt32 &gt;</innerclass>
    <innerclass refid="df/dff/a08695" prot="public">castor::IsArithmeticType&lt; ParameterType::eInt64 &gt;</innerclass>
    <innerclass refid="de/d61/a08683" prot="public">castor::IsArithmeticType&lt; ParameterType::eInt8 &gt;</innerclass>
    <innerclass refid="d5/d74/a08723" prot="public">castor::IsArithmeticType&lt; ParameterType::eLongDouble &gt;</innerclass>
    <innerclass refid="dd/d1a/a08703" prot="public">castor::IsArithmeticType&lt; ParameterType::eUInt16 &gt;</innerclass>
    <innerclass refid="df/db3/a08707" prot="public">castor::IsArithmeticType&lt; ParameterType::eUInt32 &gt;</innerclass>
    <innerclass refid="d6/db8/a08711" prot="public">castor::IsArithmeticType&lt; ParameterType::eUInt64 &gt;</innerclass>
    <innerclass refid="de/db0/a08699" prot="public">castor::IsArithmeticType&lt; ParameterType::eUInt8 &gt;</innerclass>
    <innerclass refid="da/dd1/a08287" prot="public">castor::IsChangeTrackedT</innerclass>
    <innerclass refid="dd/d21/a08163" prot="public">castor::IsChangeTrackedT&lt; ChangeTrackedT&lt; ValueT, ControlT &gt; &gt;</innerclass>
    <innerclass refid="d2/dbd/a08307" prot="public">castor::IsChangeTrackedT&lt; GroupChangeTrackedT&lt; ValueT, ControlT &gt; &gt;</innerclass>
    <innerclass refid="d3/d5b/a08827" prot="public">castor::IsColourFormat</innerclass>
    <innerclass refid="d1/d76/a08843" prot="public">castor::IsCompressed</innerclass>
    <innerclass refid="de/d05/a08899" prot="public">castor::IsD16UComponent</innerclass>
    <innerclass refid="d0/d2b/a08903" prot="public">castor::IsD24UComponent</innerclass>
    <innerclass refid="d1/db9/a08907" prot="public">castor::IsD32FComponent</innerclass>
    <innerclass refid="d1/d28/a08831" prot="public">castor::IsDepthFormat</innerclass>
    <innerclass refid="d4/d6b/a08839" prot="public">castor::IsDepthStencilFormat</innerclass>
    <innerclass refid="db/dff/a08291" prot="public">castor::IsGroupChangeTrackedT</innerclass>
    <innerclass refid="db/d42/a08311" prot="public">castor::IsGroupChangeTrackedT&lt; GroupChangeTrackedT&lt; ValueT, ControlT &gt; &gt;</innerclass>
    <innerclass refid="d1/d50/a09267" prot="public">castor::IsLengthT</innerclass>
    <innerclass refid="d0/d3b/a09271" prot="public">castor::IsLengthT&lt; LengthT&lt; TypeT &gt; &gt;</innerclass>
    <innerclass refid="d3/dc3/a09307" prot="public">castor::IsRangedValueT</innerclass>
    <innerclass refid="db/d7d/a09311" prot="public">castor::IsRangedValueT&lt; RangedValue&lt; T &gt; &gt;</innerclass>
    <innerclass refid="dc/daf/a08911" prot="public">castor::IsS8UComponent</innerclass>
    <innerclass refid="d3/def/a09339" prot="public">castor::IsSpeedT</innerclass>
    <innerclass refid="df/d59/a09351" prot="public">castor::IsSpeedT&lt; SpeedT&lt; ValueT, Microseconds &gt; &gt;</innerclass>
    <innerclass refid="d9/d15/a09347" prot="public">castor::IsSpeedT&lt; SpeedT&lt; ValueT, Milliseconds &gt; &gt;</innerclass>
    <innerclass refid="d8/d27/a09355" prot="public">castor::IsSpeedT&lt; SpeedT&lt; ValueT, Nanoseconds &gt; &gt;</innerclass>
    <innerclass refid="df/dd1/a09343" prot="public">castor::IsSpeedT&lt; SpeedT&lt; ValueT, Seconds &gt; &gt;</innerclass>
    <innerclass refid="d2/d5d/a08835" prot="public">castor::IsStencilFormat</innerclass>
    <innerclass refid="dd/deb/a08171" prot="public">castor::IteratorTraits</innerclass>
    <innerclass refid="d3/d14/a08175" prot="public">castor::IteratorTraits&lt; TypeT * &gt;</innerclass>
    <innerclass refid="d5/df0/a08739" prot="public">castor::KernelBoxFilterT</innerclass>
    <innerclass refid="da/dff/a08975" prot="public">castor::KernelLanczosFilterT</innerclass>
    <innerclass refid="dd/df5/a08915" prot="public">castor::LargerTyperT</innerclass>
    <innerclass refid="de/dda/a09107" prot="public">castor::LengthT</innerclass>
    <innerclass refid="da/dac/a09111" prot="public">castor::Line2D</innerclass>
    <innerclass refid="da/d28/a09115" prot="public">castor::Line3D</innerclass>
    <innerclass refid="d0/d7d/a09147" prot="public">castor::Ln</innerclass>
    <innerclass refid="d3/d77/a07999" prot="public">castor::Loader</innerclass>
    <innerclass refid="d5/df8/a08007" prot="public">castor::LoaderException</innerclass>
    <innerclass refid="df/d8e/a09047" prot="public">castor::Logger</innerclass>
    <innerclass refid="db/db0/a09059" prot="public">castor::LoggerImpl</innerclass>
    <innerclass refid="d9/d93/a09063" prot="public">castor::LoggerInstance</innerclass>
    <innerclass refid="db/d84/a09071" prot="public">castor::LoggerStreambufT</innerclass>
    <innerclass refid="d7/d67/a09067" prot="public">castor::LoggerStreamT</innerclass>
    <innerclass refid="dc/d3e/a09139" prot="public">castor::LogN</innerclass>
    <innerclass refid="d2/d76/a09143" prot="public">castor::LogN&lt; 0, T &gt;</innerclass>
    <innerclass refid="d2/d61/a09183" prot="public">castor::Matrix</innerclass>
    <innerclass refid="d8/d50/a08219" prot="public">castor::MaxValue</innerclass>
    <innerclass refid="d8/d75/a08343" prot="public">castor::MaxValue&lt; A, B, std::enable_if_t&lt;(A &gt;=B) &gt; &gt;</innerclass>
    <innerclass refid="dd/d95/a08347" prot="public">castor::MaxValue&lt; A, B, std::enable_if_t&lt;(B &gt; A) &gt; &gt;</innerclass>
    <innerclass refid="d1/d1f/a09095" prot="public">castor::Message</innerclass>
    <innerclass refid="da/d26/a08215" prot="public">castor::MinValue</innerclass>
    <innerclass refid="d6/d21/a08335" prot="public">castor::MinValue&lt; A, B, std::enable_if_t&lt;(A&lt;=B) &gt; &gt;</innerclass>
    <innerclass refid="d6/d3a/a08339" prot="public">castor::MinValue&lt; A, B, std::enable_if_t&lt;(B&lt; A) &gt; &gt;</innerclass>
    <innerclass refid="d5/d3c/a08223" prot="public">castor::NamedBaseT</innerclass>
    <innerclass refid="da/d68/a07951" prot="public">castor::NoInit</innerclass>
    <innerclass refid="db/d5b/a07947" prot="public">castor::NonAlignedMemoryAllocator</innerclass>
    <innerclass refid="da/d36/a08315" prot="public">castor::NonCopyable</innerclass>
    <innerclass refid="da/d87/a08319" prot="public">castor::NonMovable</innerclass>
    <innerclass refid="d6/da8/a08227" prot="public">castor::OwnedBy</innerclass>
    <innerclass refid="d4/d5f/a08399" prot="public">castor::ParserEnumTraits</innerclass>
    <innerclass refid="d0/dd7/a06947" prot="public">castor::ParserEnumTraits&lt; castor3d::BillboardSize &gt;</innerclass>
    <innerclass refid="dd/ded/a06943" prot="public">castor::ParserEnumTraits&lt; castor3d::BillboardType &gt;</innerclass>
    <innerclass refid="da/dbb/a04871" prot="public">castor::ParserEnumTraits&lt; castor3d::BlendMode &gt;</innerclass>
    <innerclass refid="dc/d27/a05799" prot="public">castor::ParserEnumTraits&lt; castor3d::BorderPosition &gt;</innerclass>
    <innerclass refid="d3/d1d/a07143" prot="public">castor::ParserEnumTraits&lt; castor3d::FogType &gt;</innerclass>
    <innerclass refid="d5/dd3/a07291" prot="public">castor::ParserEnumTraits&lt; castor3d::GlobalIlluminationType &gt;</innerclass>
    <innerclass refid="d2/dcf/a05807" prot="public">castor::ParserEnumTraits&lt; castor3d::HAlign &gt;</innerclass>
    <innerclass refid="d5/d91/a06823" prot="public">castor::ParserEnumTraits&lt; castor3d::InterpolatorType &gt;</innerclass>
    <innerclass refid="d9/d57/a06995" prot="public">castor::ParserEnumTraits&lt; castor3d::LightType &gt;</innerclass>
    <innerclass refid="da/d80/a07207" prot="public">castor::ParserEnumTraits&lt; castor3d::LimitedType&lt; VkCompareOp &gt; &gt;</innerclass>
    <innerclass refid="d2/d2a/a07211" prot="public">castor::ParserEnumTraits&lt; castor3d::LimitedType&lt; VkPrimitiveTopology &gt; &gt;</innerclass>
    <innerclass refid="d1/d3b/a07067" prot="public">castor::ParserEnumTraits&lt; castor3d::MovableType &gt;</innerclass>
    <innerclass refid="d1/d89/a04875" prot="public">castor::ParserEnumTraits&lt; castor3d::ParallaxOcclusionMode &gt;</innerclass>
    <innerclass refid="d6/d82/a07115" prot="public">castor::ParserEnumTraits&lt; castor3d::ParticleFormat &gt;</innerclass>
    <innerclass refid="d5/d4a/a07287" prot="public">castor::ParserEnumTraits&lt; castor3d::ShadowType &gt;</innerclass>
    <innerclass refid="d2/df9/a05815" prot="public">castor::ParserEnumTraits&lt; castor3d::TextLineSpacingMode &gt;</innerclass>
    <innerclass refid="da/d30/a05811" prot="public">castor::ParserEnumTraits&lt; castor3d::TextTexturingMode &gt;</innerclass>
    <innerclass refid="d1/d9a/a05795" prot="public">castor::ParserEnumTraits&lt; castor3d::TextWrappingMode &gt;</innerclass>
    <innerclass refid="d5/d41/a05803" prot="public">castor::ParserEnumTraits&lt; castor3d::VAlign &gt;</innerclass>
    <innerclass refid="d3/d16/a06959" prot="public">castor::ParserEnumTraits&lt; castor3d::ViewportType &gt;</innerclass>
    <innerclass refid="d1/d45/a07163" prot="public">castor::ParserEnumTraits&lt; LengthUnit &gt;</innerclass>
    <innerclass refid="d5/d75/a07175" prot="public">castor::ParserEnumTraits&lt; VkBlendFactor &gt;</innerclass>
    <innerclass refid="d5/d5e/a07183" prot="public">castor::ParserEnumTraits&lt; VkBlendOp &gt;</innerclass>
    <innerclass refid="d0/dd0/a07195" prot="public">castor::ParserEnumTraits&lt; VkBorderColor &gt;</innerclass>
    <innerclass refid="d7/d4d/a07199" prot="public">castor::ParserEnumTraits&lt; VkCompareOp &gt;</innerclass>
    <innerclass refid="d9/df4/a07187" prot="public">castor::ParserEnumTraits&lt; VkFilter &gt;</innerclass>
    <innerclass refid="d7/d50/a07179" prot="public">castor::ParserEnumTraits&lt; VkImageType &gt;</innerclass>
    <innerclass refid="d7/d29/a07203" prot="public">castor::ParserEnumTraits&lt; VkPrimitiveTopology &gt;</innerclass>
    <innerclass refid="d8/da7/a07191" prot="public">castor::ParserEnumTraits&lt; VkSamplerAddressMode &gt;</innerclass>
    <innerclass refid="d6/da9/a07171" prot="public">castor::ParserEnumTraits&lt; VkSamplerMipmapMode &gt;</innerclass>
    <innerclass refid="d8/d6f/a07167" prot="public">castor::ParserEnumTraits&lt; VkShaderStageFlagBits &gt;</innerclass>
    <innerclass refid="de/d5d/a08415" prot="public">castor::ParserFunctionAndParams</innerclass>
    <innerclass refid="d3/d9a/a08387" prot="public">castor::ParserParameter</innerclass>
    <innerclass refid="d7/d2a/a08439" prot="public">castor::ParserParameter&lt; ParameterType::eBitwiseOred32BitsCheckedText &gt;</innerclass>
    <innerclass refid="da/d71/a08443" prot="public">castor::ParserParameter&lt; ParameterType::eBitwiseOred64BitsCheckedText &gt;</innerclass>
    <innerclass refid="d2/d2a/a08435" prot="public">castor::ParserParameter&lt; ParameterType::eCheckedText &gt;</innerclass>
    <innerclass refid="da/dd0/a08431" prot="public">castor::ParserParameter&lt; ParameterType::eName &gt;</innerclass>
    <innerclass refid="de/dc0/a08423" prot="public">castor::ParserParameter&lt; Type, std::enable_if_t&lt; !hasBaseParameterTypeV&lt; Type &gt; &amp;&amp;!isArithmeticTypeV&lt; Type &gt; &gt; &gt;</innerclass>
    <innerclass refid="db/dec/a08427" prot="public">castor::ParserParameter&lt; Type, std::enable_if_t&lt; IsArithmeticType&lt; Type &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="de/d2b/a08447" prot="public">castor::ParserParameterBase</innerclass>
    <innerclass refid="de/db2/a08403" prot="public">castor::ParserParameterHelper</innerclass>
    <innerclass refid="d4/d06/a08527" prot="public">castor::ParserParameterHelper&lt; ParameterType::eBitwiseOred32BitsCheckedText &gt;</innerclass>
    <innerclass refid="d4/dbc/a08531" prot="public">castor::ParserParameterHelper&lt; ParameterType::eBitwiseOred64BitsCheckedText &gt;</innerclass>
    <innerclass refid="d1/ddc/a08535" prot="public">castor::ParserParameterHelper&lt; ParameterType::eBool &gt;</innerclass>
    <innerclass refid="d1/d86/a08523" prot="public">castor::ParserParameterHelper&lt; ParameterType::eCheckedText &gt;</innerclass>
    <innerclass refid="d4/db4/a08575" prot="public">castor::ParserParameterHelper&lt; ParameterType::eDouble &gt;</innerclass>
    <innerclass refid="d2/d17/a08571" prot="public">castor::ParserParameterHelper&lt; ParameterType::eFloat &gt;</innerclass>
    <innerclass refid="d0/dbb/a08659" prot="public">castor::ParserParameterHelper&lt; ParameterType::eHdrRgbaColour &gt;</innerclass>
    <innerclass refid="d6/d1f/a08655" prot="public">castor::ParserParameterHelper&lt; ParameterType::eHdrRgbColour &gt;</innerclass>
    <innerclass refid="d8/dc0/a08543" prot="public">castor::ParserParameterHelper&lt; ParameterType::eInt16 &gt;</innerclass>
    <innerclass refid="d0/d98/a08547" prot="public">castor::ParserParameterHelper&lt; ParameterType::eInt32 &gt;</innerclass>
    <innerclass refid="d8/dae/a08551" prot="public">castor::ParserParameterHelper&lt; ParameterType::eInt64 &gt;</innerclass>
    <innerclass refid="d2/d4c/a08539" prot="public">castor::ParserParameterHelper&lt; ParameterType::eInt8 &gt;</innerclass>
    <innerclass refid="d1/dce/a08579" prot="public">castor::ParserParameterHelper&lt; ParameterType::eLongDouble &gt;</innerclass>
    <innerclass refid="da/dde/a08515" prot="public">castor::ParserParameterHelper&lt; ParameterType::eName &gt;</innerclass>
    <innerclass refid="d5/dca/a08519" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePath &gt;</innerclass>
    <innerclass refid="d2/d95/a08583" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePixelFormat &gt;</innerclass>
    <innerclass refid="d5/d4e/a08623" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePoint2D &gt;</innerclass>
    <innerclass refid="d8/d73/a08611" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePoint2F &gt;</innerclass>
    <innerclass refid="d7/dbe/a08587" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePoint2I &gt;</innerclass>
    <innerclass refid="d6/d49/a08599" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePoint2U &gt;</innerclass>
    <innerclass refid="d9/da4/a08627" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePoint3D &gt;</innerclass>
    <innerclass refid="db/dd6/a08615" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePoint3F &gt;</innerclass>
    <innerclass refid="d5/d8c/a08591" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePoint3I &gt;</innerclass>
    <innerclass refid="d7/d6a/a08603" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePoint3U &gt;</innerclass>
    <innerclass refid="dd/d2c/a08631" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePoint4D &gt;</innerclass>
    <innerclass refid="d7/d39/a08619" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePoint4F &gt;</innerclass>
    <innerclass refid="d4/dd0/a08595" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePoint4I &gt;</innerclass>
    <innerclass refid="d2/d25/a08607" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePoint4U &gt;</innerclass>
    <innerclass refid="d6/ddb/a08639" prot="public">castor::ParserParameterHelper&lt; ParameterType::ePosition &gt;</innerclass>
    <innerclass refid="de/d15/a08643" prot="public">castor::ParserParameterHelper&lt; ParameterType::eRectangle &gt;</innerclass>
    <innerclass refid="d7/d00/a08651" prot="public">castor::ParserParameterHelper&lt; ParameterType::eRgbaColour &gt;</innerclass>
    <innerclass refid="d4/da7/a08647" prot="public">castor::ParserParameterHelper&lt; ParameterType::eRgbColour &gt;</innerclass>
    <innerclass refid="d1/d58/a08635" prot="public">castor::ParserParameterHelper&lt; ParameterType::eSize &gt;</innerclass>
    <innerclass refid="d1/dab/a08511" prot="public">castor::ParserParameterHelper&lt; ParameterType::eText &gt;</innerclass>
    <innerclass refid="dd/d1d/a08559" prot="public">castor::ParserParameterHelper&lt; ParameterType::eUInt16 &gt;</innerclass>
    <innerclass refid="db/dcd/a08563" prot="public">castor::ParserParameterHelper&lt; ParameterType::eUInt32 &gt;</innerclass>
    <innerclass refid="d7/dae/a08567" prot="public">castor::ParserParameterHelper&lt; ParameterType::eUInt64 &gt;</innerclass>
    <innerclass refid="d4/dfe/a08555" prot="public">castor::ParserParameterHelper&lt; ParameterType::eUInt8 &gt;</innerclass>
    <innerclass refid="d3/da9/a08411" prot="public">castor::ParserParameterTypeException</innerclass>
    <innerclass refid="d1/de1/a08011" prot="public">castor::Path</innerclass>
    <innerclass refid="d8/d4c/a09471" prot="public">castor::PerlinNoiseT</innerclass>
    <innerclass refid="d6/d41/a08799" prot="public">castor::Pixel</innerclass>
    <innerclass refid="db/d10/a08815" prot="public">castor::PixelComponentsT</innerclass>
    <innerclass refid="d1/dea/a08819" prot="public">castor::PixelDefinitionsT</innerclass>
    <innerclass refid="d3/d1a/a08811" prot="public">castor::PixelIterator</innerclass>
    <innerclass refid="dd/d55/a09279" prot="public">castor::PlaneEquation</innerclass>
    <innerclass refid="db/dcf/a09187" prot="public">castor::Point</innerclass>
    <innerclass refid="d0/df9/a09247" prot="public">castor::PointComponentGetT</innerclass>
    <innerclass refid="d7/d12/a09263" prot="public">castor::PointComponentGetT&lt; LengthT&lt; TypeT &gt; &gt;</innerclass>
    <innerclass refid="d4/df3/a09251" prot="public">castor::PointComponentGetT&lt; Point&lt; TypeT, 2u &gt; &gt;</innerclass>
    <innerclass refid="d2/d40/a09255" prot="public">castor::PointComponentGetT&lt; Point&lt; TypeT, 3u &gt; &gt;</innerclass>
    <innerclass refid="d2/d61/a09259" prot="public">castor::PointComponentGetT&lt; Point&lt; TypeT, 4u &gt; &gt;</innerclass>
    <innerclass refid="d6/dc3/a09191" prot="public">castor::PointData</innerclass>
    <innerclass refid="db/de3/a09287" prot="public">castor::PointData&lt; T, 2u &gt;</innerclass>
    <innerclass refid="d2/da0/a09291" prot="public">castor::PointData&lt; T, 3u &gt;</innerclass>
    <innerclass refid="de/d58/a09295" prot="public">castor::PointData&lt; T, 4u &gt;</innerclass>
    <innerclass refid="de/dd7/a09235" prot="public">castor::PointTyperT</innerclass>
    <innerclass refid="d5/d95/a09243" prot="public">castor::PointTyperT&lt; LengthT&lt; SrcT &gt;, DstCompT &gt;</innerclass>
    <innerclass refid="d1/dd5/a09239" prot="public">castor::PointTyperT&lt; Point&lt; SrcCompT, CountT &gt;, DstCompT &gt;</innerclass>
    <innerclass refid="df/dba/a08999" prot="public">castor::Position</innerclass>
    <innerclass refid="d1/d54/a08991" prot="public">castor::PositionData</innerclass>
    <innerclass refid="d3/d88/a09127" prot="public">castor::Power</innerclass>
    <innerclass refid="de/de7/a09135" prot="public">castor::Power&lt; T, 0 &gt;</innerclass>
    <innerclass refid="d5/dd9/a09131" prot="public">castor::Power&lt; T, 1 &gt;</innerclass>
    <innerclass refid="d5/d7e/a09419" prot="public">castor::PreciseTimer</innerclass>
    <innerclass refid="d3/d11/a08359" prot="public">castor::PreprocessedFile</innerclass>
    <innerclass refid="d0/d0c/a09055" prot="public">castor::ProgramConsole</innerclass>
    <innerclass refid="dd/d81/a09199" prot="public">castor::PtAssignOperators</innerclass>
    <innerclass refid="dd/d41/a09195" prot="public">castor::PtOperators</innerclass>
    <innerclass refid="d1/d39/a08803" prot="public">castor::PxBuffer</innerclass>
    <innerclass refid="dd/df9/a08987" prot="public">castor::PxBufferBase</innerclass>
    <innerclass refid="d4/d51/a08983" prot="public">castor::PxBufferConvertOptions</innerclass>
    <innerclass refid="de/d58/a08979" prot="public">castor::PxCompressionSupport</innerclass>
    <innerclass refid="dc/dc3/a09203" prot="public">castor::QuaternionT</innerclass>
    <innerclass refid="d9/da8/a09207" prot="public">castor::Range</innerclass>
    <innerclass refid="d8/de9/a09211" prot="public">castor::RangedValue</innerclass>
    <innerclass refid="dc/d2f/a09315" prot="public">castor::RangedValueGetterT</innerclass>
    <innerclass refid="da/d9f/a09319" prot="public">castor::RangedValueGetterT&lt; RangedValue&lt; T &gt; &gt;</innerclass>
    <innerclass refid="da/d49/a09219" prot="public">castor::RangeSequenceT</innerclass>
    <innerclass refid="d4/da5/a09011" prot="public">castor::Rectangle</innerclass>
    <innerclass refid="dc/dbe/a09003" prot="public">castor::RectangleData</innerclass>
    <innerclass refid="d7/dd6/a08395" prot="public">castor::RegexFormat</innerclass>
    <innerclass refid="d0/d81/a08487" prot="public">castor::RegexFormat&lt; double &gt;</innerclass>
    <innerclass refid="d8/d0e/a08483" prot="public">castor::RegexFormat&lt; float &gt;</innerclass>
    <innerclass refid="d8/d97/a08507" prot="public">castor::RegexFormat&lt; HdrRgbaColour &gt;</innerclass>
    <innerclass refid="d7/d2f/a08503" prot="public">castor::RegexFormat&lt; HdrRgbColour &gt;</innerclass>
    <innerclass refid="d9/da0/a08463" prot="public">castor::RegexFormat&lt; int16_t &gt;</innerclass>
    <innerclass refid="d5/d6c/a08471" prot="public">castor::RegexFormat&lt; int32_t &gt;</innerclass>
    <innerclass refid="d1/d05/a08479" prot="public">castor::RegexFormat&lt; int64_t &gt;</innerclass>
    <innerclass refid="d5/dac/a08455" prot="public">castor::RegexFormat&lt; int8_t &gt;</innerclass>
    <innerclass refid="dd/d5b/a08491" prot="public">castor::RegexFormat&lt; long double &gt;</innerclass>
    <innerclass refid="da/d1b/a08499" prot="public">castor::RegexFormat&lt; RgbaColour &gt;</innerclass>
    <innerclass refid="d5/d3f/a08495" prot="public">castor::RegexFormat&lt; RgbColour &gt;</innerclass>
    <innerclass refid="d1/d9d/a08459" prot="public">castor::RegexFormat&lt; uint16_t &gt;</innerclass>
    <innerclass refid="d5/d25/a08467" prot="public">castor::RegexFormat&lt; uint32_t &gt;</innerclass>
    <innerclass refid="de/d08/a08475" prot="public">castor::RegexFormat&lt; uint64_t &gt;</innerclass>
    <innerclass refid="dc/d34/a08451" prot="public">castor::RegexFormat&lt; uint8_t &gt;</innerclass>
    <innerclass refid="d8/da3/a08255" prot="public">castor::ResourceCacheBaseT</innerclass>
    <innerclass refid="d7/df3/a08259" prot="public">castor::ResourceCacheT</innerclass>
    <innerclass refid="d4/dd9/a03599" prot="public">castor::ResourceCacheT&lt; castor3d::AnimatedObjectGroup, String, castor3d::AnimatedObjectGroupCacheTraits &gt;</innerclass>
    <innerclass refid="d4/dc4/a03647" prot="public">castor::ResourceCacheT&lt; castor3d::Material, String, castor3d::MaterialCacheTraits &gt;</innerclass>
    <innerclass refid="de/de4/a03655" prot="public">castor::ResourceCacheT&lt; castor3d::Overlay, String, castor3d::OverlayCacheTraits &gt;</innerclass>
    <innerclass refid="dd/d77/a03659" prot="public">castor::ResourceCacheT&lt; castor3d::Plugin, String, castor3d::PluginCacheTraits &gt;</innerclass>
    <innerclass refid="d2/d3b/a08767" prot="public">castor::ResourceCacheT&lt; Font, String, FontCacheTraits &gt;</innerclass>
    <innerclass refid="d2/dd8/a08951" prot="public">castor::ResourceCacheT&lt; Image, String, ImageCacheTraits &gt;</innerclass>
    <innerclass refid="dc/df8/a08263" prot="public">castor::ResourceCacheTraitsBaseT</innerclass>
    <innerclass refid="d8/d73/a08235" prot="public">castor::ResourceCacheTraitsT</innerclass>
    <innerclass refid="dc/de5/a08927" prot="public">castor::ResourceCacheTraitsT&lt; Font, String &gt;</innerclass>
    <innerclass refid="d6/d29/a08947" prot="public">castor::ResourceCacheTraitsT&lt; Image, String &gt;</innerclass>
    <innerclass refid="de/dad/a08251" prot="public">castor::ResourceCleanerT</innerclass>
    <innerclass refid="dc/db7/a08247" prot="public">castor::ResourceInitialiserT</innerclass>
    <innerclass refid="dd/da9/a08243" prot="public">castor::ResourceMergerT</innerclass>
    <innerclass refid="d0/d37/a08231" prot="public">castor::ResourceT</innerclass>
    <innerclass refid="dd/db7/a08919" prot="public">castor::RgbaColourT</innerclass>
    <innerclass refid="d2/da0/a08923" prot="public">castor::RgbColourT</innerclass>
    <innerclass refid="d2/ded/a08271" prot="public">castor::ScopeGuard</innerclass>
    <innerclass refid="dc/d79/a08267" prot="public">castor::SignalT</innerclass>
    <innerclass refid="d0/d76/a09475" prot="public">castor::SimplexNoiseT</innerclass>
    <innerclass refid="dc/d93/a08823" prot="public">castor::SingleComponentT</innerclass>
    <innerclass refid="d4/dd6/a09023" prot="public">castor::Size</innerclass>
    <innerclass refid="dc/dad/a09015" prot="public">castor::SizeData</innerclass>
    <innerclass refid="d9/d33/a09227" prot="public">castor::SpeedT</innerclass>
    <innerclass refid="d1/dd1/a09223" prot="public">castor::SpeedTraitsT</innerclass>
    <innerclass refid="dc/d0e/a09335" prot="public">castor::SpeedTraitsT&lt; AngleT&lt; ValueT &gt; &gt;</innerclass>
    <innerclass refid="d6/d31/a09323" prot="public">castor::SpeedTraitsT&lt; Point&lt; ValueT, 2 &gt; &gt;</innerclass>
    <innerclass refid="d6/df4/a09327" prot="public">castor::SpeedTraitsT&lt; Point&lt; ValueT, 3 &gt; &gt;</innerclass>
    <innerclass refid="de/dc6/a09331" prot="public">castor::SpeedTraitsT&lt; Point&lt; ValueT, 4 &gt; &gt;</innerclass>
    <innerclass refid="d8/de5/a09359" prot="public">castor::SphericalVertex</innerclass>
    <innerclass refid="d1/dff/a09451" prot="public">castor::SpinMutex</innerclass>
    <innerclass refid="db/dc1/a09231" prot="public">castor::SquareMatrix</innerclass>
    <innerclass refid="d9/d85/a09031" prot="public">castor::StbImageLoader</innerclass>
    <innerclass refid="d1/dd3/a09035" prot="public">castor::StbImageWriter</innerclass>
    <innerclass refid="d6/d79/a07955" prot="public">castor::StringHash</innerclass>
    <innerclass refid="dc/d82/a08075" prot="public">castor::TextFile</innerclass>
    <innerclass refid="de/d8e/a08791" prot="public">castor::TextLineMetrics</innerclass>
    <innerclass refid="dc/d7c/a08079" prot="public">castor::TextLoaderT</innerclass>
    <innerclass refid="d6/d72/a08795" prot="public">castor::TextMetrics</innerclass>
    <innerclass refid="d7/d3e/a08091" prot="public">castor::TextWriter</innerclass>
    <innerclass refid="d3/d21/a08015" prot="public">castor::TextWriter&lt; Coords&lt; ValueT, 1u &gt; &gt;</innerclass>
    <innerclass refid="d3/de2/a08019" prot="public">castor::TextWriter&lt; Coords&lt; ValueT, 2u &gt; &gt;</innerclass>
    <innerclass refid="d9/d9e/a08023" prot="public">castor::TextWriter&lt; Coords&lt; ValueT, 3u &gt; &gt;</innerclass>
    <innerclass refid="de/d63/a08027" prot="public">castor::TextWriter&lt; Coords&lt; ValueT, 4u &gt; &gt;</innerclass>
    <innerclass refid="d3/d76/a08131" prot="public">castor::TextWriter&lt; double &gt;</innerclass>
    <innerclass refid="d9/d7a/a08127" prot="public">castor::TextWriter&lt; float &gt;</innerclass>
    <innerclass refid="d3/d83/a08031" prot="public">castor::TextWriter&lt; Font &gt;</innerclass>
    <innerclass refid="db/d47/a08103" prot="public">castor::TextWriter&lt; int16_t &gt;</innerclass>
    <innerclass refid="d9/d69/a08111" prot="public">castor::TextWriter&lt; int32_t &gt;</innerclass>
    <innerclass refid="db/de1/a08119" prot="public">castor::TextWriter&lt; int64_t &gt;</innerclass>
    <innerclass refid="d2/dae/a08095" prot="public">castor::TextWriter&lt; int8_t &gt;</innerclass>
    <innerclass refid="dd/dfa/a08035" prot="public">castor::TextWriter&lt; Point&lt; ValueT, 1u &gt; &gt;</innerclass>
    <innerclass refid="dc/dbf/a08039" prot="public">castor::TextWriter&lt; Point&lt; ValueT, 2u &gt; &gt;</innerclass>
    <innerclass refid="d3/d30/a08043" prot="public">castor::TextWriter&lt; Point&lt; ValueT, 3u &gt; &gt;</innerclass>
    <innerclass refid="df/dbd/a08047" prot="public">castor::TextWriter&lt; Point&lt; ValueT, 4u &gt; &gt;</innerclass>
    <innerclass refid="d1/d5e/a08051" prot="public">castor::TextWriter&lt; Position &gt;</innerclass>
    <innerclass refid="d7/d34/a08055" prot="public">castor::TextWriter&lt; QuaternionT&lt; ValueT &gt; &gt;</innerclass>
    <innerclass refid="d9/d0e/a08059" prot="public">castor::TextWriter&lt; RgbaColourT&lt; ComponentT &gt; &gt;</innerclass>
    <innerclass refid="d6/dad/a08063" prot="public">castor::TextWriter&lt; RgbColourT&lt; ComponentT &gt; &gt;</innerclass>
    <innerclass refid="d1/d76/a08067" prot="public">castor::TextWriter&lt; Size &gt;</innerclass>
    <innerclass refid="da/d59/a08135" prot="public">castor::TextWriter&lt; String &gt;</innerclass>
    <innerclass refid="da/d9e/a08107" prot="public">castor::TextWriter&lt; uint16_t &gt;</innerclass>
    <innerclass refid="d6/d96/a08115" prot="public">castor::TextWriter&lt; uint32_t &gt;</innerclass>
    <innerclass refid="de/d7d/a08123" prot="public">castor::TextWriter&lt; uint64_t &gt;</innerclass>
    <innerclass refid="dc/dc3/a08099" prot="public">castor::TextWriter&lt; uint8_t &gt;</innerclass>
    <innerclass refid="da/d1b/a08083" prot="public">castor::TextWriterBase</innerclass>
    <innerclass refid="de/d30/a07987" prot="public">castor::TextWriterT</innerclass>
    <innerclass refid="dd/dd4/a09455" prot="public">castor::ThreadPool</innerclass>
    <innerclass refid="d2/db0/a09075" prot="public">castor::TraceLoggerStreambufTraitsT</innerclass>
    <innerclass refid="d2/df4/a08275" prot="public">castor::TSConnectionT</innerclass>
    <innerclass refid="de/d87/a08279" prot="public">castor::TSSignalT</innerclass>
    <innerclass refid="df/d8c/a08351" prot="public">castor::UnicityException</innerclass>
    <innerclass refid="dc/d63/a08283" prot="public">castor::Unique</innerclass>
    <innerclass refid="df/ddb/a09039" prot="public">castor::UnsupportedFormatException</innerclass>
    <innerclass refid="d1/d09/a08391" prot="public">castor::ValueParser</innerclass>
    <innerclass refid="de/d5b/a09087" prot="public">castor::WarningLoggerStreambufTraitsT</innerclass>
    <innerclass refid="d7/d16/a09479" prot="public">castor::WhiteNoise</innerclass>
    <innerclass refid="df/d28/a09459" prot="public">castor::WorkerThread</innerclass>
    <innerclass refid="dc/d3a/a07991" prot="public">castor::Writer</innerclass>
    <innerclass refid="d5/d1d/a09043" prot="public">castor::XpmImageLoader</innerclass>
    <innerclass refid="d2/dec/a08139" prot="public">castor::ZipArchive</innerclass>
    <innernamespace refid="dc/d1a/a02288">castor::debug</innernamespace>
    <innernamespace refid="db/d2d/a02286">castor::details</innernamespace>
    <innernamespace refid="dd/da4/a02295">castor::format</innernamespace>
    <innernamespace refid="de/d4e/a02289">castor::hashcomb</innernamespace>
    <innernamespace refid="dd/dae/a02294">castor::manip</innernamespace>
    <innernamespace refid="df/d04/a02287">castor::matrix</innernamespace>
    <innernamespace refid="df/d4d/a02285">castor::point</innernamespace>
    <innernamespace refid="d7/da1/a02290">castor::string</innernamespace>
    <innernamespace refid="dd/dc5/a02293">castor::system</innernamespace>
    <sectiondef kind="user-defined">
      <header>Data</header>
      <memberdef kind="enum" id="d2/dd2/a02279_1ac4972a01abb873aee032c3071b56cbe4" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>FileType</name>
        <qualifiedname>castor::FileType</qualifiedname>
        <enumvalue id="d2/dd2/a02279_1ac4972a01abb873aee032c3071b56cbe4aef6572f06eb221f3fcc2a3efd4f39c5e" prot="public">
          <name>eBinary</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Binary file. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ac4972a01abb873aee032c3071b56cbe4a8c15e6038102a3065760b26043b9c162" prot="public">
          <name>eText</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Text file. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ac4972a01abb873aee032c3071b56cbe4ae558bb69fadec037d9eae46601a4df8e" prot="public">
          <name>eCount</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ac4972a01abb873aee032c3071b56cbe4abd967862789968b1f8571ca888fffc77" prot="public">
          <name>eMin</name>
          <initializer>=  eBinary</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumération des types de fichier supportés par <ref refid="d3/d77/a07999" kindref="compound">castor::Loader</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/DataModule.hpp" line="20" column="1" bodyfile="CastorUtils/Data/DataModule.hpp" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac0b8805d02ce50795ab1f20c47d73bc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareVector</definition>
        <argsstring>(Path, Path)</argsstring>
        <name>CU_DeclareVector</name>
        <qualifiedname>castor::CU_DeclareVector</qualifiedname>
        <param>
          <type><ref refid="d1/de1/a08011" kindref="compound">Path</ref></type>
        </param>
        <param>
          <type><ref refid="d1/de1/a08011" kindref="compound">Path</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/DataModule.hpp" line="147" column="1" declfile="CastorUtils/Data/DataModule.hpp" declline="147" declcolumn="1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>File Parser</header>
      <memberdef kind="enum" id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>ParameterType</name>
        <qualifiedname>castor::ParameterType</qualifiedname>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a8c15e6038102a3065760b26043b9c162" prot="public">
          <name>eText</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222aa866af182acab9fffb643ecb752cd9e5" prot="public">
          <name>eName</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a31192bb48f61ce705a1003e2ec256cda" prot="public">
          <name>ePath</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a70c5250c584262dcb9afc9171feaad71" prot="public">
          <name>eCheckedText</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222af562b3a1475186e72ab460ab5fdb8977" prot="public">
          <name>eBitwiseOred32BitsCheckedText</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a5800fa8fcf052b2dcef27ca1a66b9c54" prot="public">
          <name>eBitwiseOred64BitsCheckedText</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222aa72ae44cce754ef20278e5367b74afb8" prot="public">
          <name>eBool</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a738e931fc7cbf7c75e7a12f9ae4fb2b6" prot="public">
          <name>eInt8</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a3845503e40242d6618309692c516108f" prot="public">
          <name>eInt16</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222ad923bf3d9fc434789d3c3a7e2d3d3a2a" prot="public">
          <name>eInt32</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a3dca4388aeecb9a75bc1f3334f0c7a9e" prot="public">
          <name>eInt64</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a74afcf4af3070fd0511ea915d3b9cd92" prot="public">
          <name>eUInt8</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a8f0eb3e5aaf01e9329d226723aacbfc1" prot="public">
          <name>eUInt16</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a0fdef21bbeab2c5de5749662bda11d15" prot="public">
          <name>eUInt32</name>
          <initializer>= 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222ab419b95c1a7e21d02e5a63a2fff2f636" prot="public">
          <name>eUInt64</name>
          <initializer>= 14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a9b9526f83cc144a1ee8dfa49d1c45863" prot="public">
          <name>eFloat</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222afb0a96d3d1a0e6fab85b4b99b193d204" prot="public">
          <name>eDouble</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a2f6409156266f1b5592ee6f7f481bec8" prot="public">
          <name>eLongDouble</name>
          <initializer>= 17</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a80c6282d42674db1757df43d1e753927" prot="public">
          <name>ePixelFormat</name>
          <initializer>= 18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222ab79b03966756422b9b7832480651f6c3" prot="public">
          <name>ePoint2I</name>
          <initializer>= 19</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222aa0b4d001267f6d4ca5ae6a24014ca882" prot="public">
          <name>ePoint3I</name>
          <initializer>= 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a4bf509581922c8ad229e74ea2a557dda" prot="public">
          <name>ePoint4I</name>
          <initializer>= 21</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222ab803624de8c2140403de15b926842c7d" prot="public">
          <name>ePoint2U</name>
          <initializer>= 22</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222afcf3a9bc613a6950081a7a80c83147d9" prot="public">
          <name>ePoint3U</name>
          <initializer>= 23</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a73750f0751240c892168f7fd2b793e31" prot="public">
          <name>ePoint4U</name>
          <initializer>= 24</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222af3d39550cf462fbcf4de62294d7223ed" prot="public">
          <name>ePoint2F</name>
          <initializer>= 25</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a38a01c819f633805ba308e56eb9f4a18" prot="public">
          <name>ePoint3F</name>
          <initializer>= 26</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a0cad3544382a34fb6b37cb9d15249c35" prot="public">
          <name>ePoint4F</name>
          <initializer>= 27</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a32736a0bfcec7ecc0b6c8cbc6bdac120" prot="public">
          <name>ePoint2D</name>
          <initializer>= 28</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a6fa006739ee9669d1c26cce0442cc6e2" prot="public">
          <name>ePoint3D</name>
          <initializer>= 29</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a3194c87f41f835ab7abf321101d2f5ca" prot="public">
          <name>ePoint4D</name>
          <initializer>= 30</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222af242d91ad91cde5d9f5bd4e7cb74b2df" prot="public">
          <name>eSize</name>
          <initializer>= 31</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a091b83531d1056da31350f15fa2cd803" prot="public">
          <name>ePosition</name>
          <initializer>= 32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222adcdf05803336aa422a607fb1afff749c" prot="public">
          <name>eRectangle</name>
          <initializer>= 33</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a1045820129d69835d7269c7a891099ca" prot="public">
          <name>eRgbColour</name>
          <initializer>= 34</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a6ec266da6212503bbdf3540742e30bad" prot="public">
          <name>eRgbaColour</name>
          <initializer>= 35</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222ac8208dbfb0bc40b1f253d6f87fcff28e" prot="public">
          <name>eHdrRgbColour</name>
          <initializer>= 36</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a9db9c23debf6eea289c5d78d4c8b904c" prot="public">
          <name>eHdrRgbaColour</name>
          <initializer>= 37</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222ae558bb69fadec037d9eae46601a4df8e" prot="public">
          <name>eCount</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222abd967862789968b1f8571ca888fffc77" prot="public">
          <name>eMin</name>
          <initializer>=  eText</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumération des types de paramètres pour une fonction d&apos;analyse. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="130" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="132" bodyend="172"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Graphics</header>
      <memberdef kind="enum" id="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" prot="public" static="no" strong="yes">
        <type>uint32_t</type>
        <name>PixelFormat</name>
        <qualifiedname>castor::PixelFormat</qualifiedname>
        <enumvalue id="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055ab1e25b807a11354115d26b653664d1d4" prot="public">
          <name>CUPF_ENUM_VALUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055ae558bb69fadec037d9eae46601a4df8e" prot="public">
          <name>eCount</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055abd967862789968b1f8571ca888fffc77" prot="public">
          <name>eMin</name>
          <initializer>=  eUNDEFINED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumération des formats de <ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="22" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="24" bodyend="29"/>
      </memberdef>
      <memberdef kind="enum" id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926da" prot="public" static="no" strong="yes">
        <type>uint32_t</type>
        <name>PredefinedRgbaColour</name>
        <qualifiedname>castor::PredefinedRgbaColour</qualifiedname>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa93a859084edcbeed00d09372c6d1d9d0" prot="public">
          <name>eTransparentBlack</name>
          <initializer>= 0x00000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daaabdd6a86098842717117d1ac2aa54326" prot="public">
          <name>eLowAlphaBlack</name>
          <initializer>= 0x00000040</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daaa9ca7522b45230af8e7d5316ca40bd66" prot="public">
          <name>eMedAlphaBlack</name>
          <initializer>= 0x0000007F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa556d3359c9cb90ac74c4d2fad3b7d723" prot="public">
          <name>eHighAlphaBlack</name>
          <initializer>= 0x000000BF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa4560a523cbac8349d36f2839e3d030b0" prot="public">
          <name>eOpaqueBlack</name>
          <initializer>= 0x000000FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa44bc2c4f325255aca88d1b596f449a7e" prot="public">
          <name>eTransparentDarkBlue</name>
          <initializer>= 0x00007F00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa9f096b5ea92bbae6a9b52404e57fd6f2" prot="public">
          <name>eLowAlphaDarkBlue</name>
          <initializer>= 0x00007F40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa6e49252c005b65bbc1c521de5c9488a6" prot="public">
          <name>eMedAlphaDarkBlue</name>
          <initializer>= 0x00007F7F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa712348d7d0d6affa6332016c0893c7ff" prot="public">
          <name>eHighAlphaDarkBlue</name>
          <initializer>= 0x00007FBF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa1441f515952a70754b5dbb1076b8ca2c" prot="public">
          <name>eOpaqueDarkBlue</name>
          <initializer>= 0x00007FFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa9c30586dbe2b8a1e32e3ef8ce4322581" prot="public">
          <name>eTransparentBlue</name>
          <initializer>= 0x0000FF00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa7fc0cc47de913136acdedd2248e9b7cf" prot="public">
          <name>eLowAlphaBlue</name>
          <initializer>= 0x0000FF40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daae41be64db24a1e58aad1c7dbb200e6a0" prot="public">
          <name>eMedAlphaBlue</name>
          <initializer>= 0x0000FF7F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daaffbf24c73fff4286e144e44325dfb052" prot="public">
          <name>eHighAlphaBlue</name>
          <initializer>= 0x0000FFBF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa58fb2e7c954904281426808d550db7af" prot="public">
          <name>eOpaqueBlue</name>
          <initializer>= 0x0000FFFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daad678906e61fedb8d2f6eaa5e8f8ae22d" prot="public">
          <name>eTransparentDarkGreen</name>
          <initializer>= 0x007F0000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa57543ac888b368b5a079b402a732f706" prot="public">
          <name>eLowAlphaDarkGreen</name>
          <initializer>= 0x007F0040</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daaf07002b160dfa2ae35a2993165137613" prot="public">
          <name>eMedAlphaDarkGreen</name>
          <initializer>= 0x007F007F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa752c22e3612bf054b2b1f06b9d871347" prot="public">
          <name>eHighAlphaDarkGreen</name>
          <initializer>= 0x007F00BF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daadd76a3f574958c81e43293812a3a7acd" prot="public">
          <name>eOpaqueDarkGreen</name>
          <initializer>= 0x007F00FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daac6743d01faf5f448a902e7bea090a740" prot="public">
          <name>eTransparentGreen</name>
          <initializer>= 0x00FF0000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daaa126629f2d2f3ddf73cbc42659e07745" prot="public">
          <name>eLowAlphaGreen</name>
          <initializer>= 0x00FF0040</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daabb8dcd1fa4cf52d90c5d8c8d0d6d616b" prot="public">
          <name>eMedAlphaGreen</name>
          <initializer>= 0x00FF007F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daaa3da03dc2cb917f3abc83fa660f88414" prot="public">
          <name>eHighAlphaGreen</name>
          <initializer>= 0x00FF00BF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa05b08a926ab56aa522909a83cdb53eb8" prot="public">
          <name>eOpaqueGreen</name>
          <initializer>= 0x00FF00FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daad06cdde230c7bffaa79f6209268b35e9" prot="public">
          <name>eTransparentDarkRed</name>
          <initializer>= 0x7F000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa2596416591d01774cb283453ec361f1f" prot="public">
          <name>eLowAlphaDarkRed</name>
          <initializer>= 0x7F000040</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daae2ee7075555477a9fb5fb699ea6d1efc" prot="public">
          <name>eMedAlphaDarkRed</name>
          <initializer>= 0x7F00007F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa55a95191f2881b3cca85df12cdabdfba" prot="public">
          <name>eHighAlphaDarkRed</name>
          <initializer>= 0x7F0000BF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa1e3eeb6cc07b5ce4ecb58b9c2de82faf" prot="public">
          <name>eOpaqueDarkRed</name>
          <initializer>= 0x7F0000FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa8bbee60b8471f4728b7f75ce6aa91f09" prot="public">
          <name>eTransparentRed</name>
          <initializer>= 0xFF000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa6486e293fc07b85964d7971f37511ddf" prot="public">
          <name>eLowAlphaRed</name>
          <initializer>= 0xFF000040</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa7cdd724b1250c85f6d9e77b7130f9286" prot="public">
          <name>eMedAlphaRed</name>
          <initializer>= 0xFF00007F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa5688025f4af757303e347ae8003fe7ca" prot="public">
          <name>eHighAlphaRed</name>
          <initializer>= 0xFF0000BF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa346df23c86e7d6092518beeb027f6df3" prot="public">
          <name>eOpaqueRed</name>
          <initializer>= 0xFF0000FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daaa9c6565b960c2306e5d91372239ab8a2" prot="public">
          <name>eTransparentLightBlue</name>
          <initializer>= 0x7F7FFF00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daadcbeb8638e4a8986d2eae229b3aaee59" prot="public">
          <name>eLowAlphaLightBlue</name>
          <initializer>= 0x7F7FFF40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daabb72a08a405794fcbac7664819e7cf80" prot="public">
          <name>eMedAlphaLightBlue</name>
          <initializer>= 0x7F7FFF7F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa23ec1694c582a538dc91f4647aeac804" prot="public">
          <name>eHighAlphaLightBlue</name>
          <initializer>= 0x7F7FFFBF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daab5c51b45d7499f1329f6bbda6df14069" prot="public">
          <name>eOpaqueLightBlue</name>
          <initializer>= 0x7F7FFFFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa1c436b9f103ddfafa89c14e21efb19c5" prot="public">
          <name>eTransparentLightGreen</name>
          <initializer>= 0x7FFF7F00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa8cbc6eac6e7d254f6b0c45a6e514b167" prot="public">
          <name>eLowAlphaLightGreen</name>
          <initializer>= 0x7FFF7F40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa7b2632ee99f21a923dc4bde5aba64615" prot="public">
          <name>eMedAlphaLightGreen</name>
          <initializer>= 0x7FFF7F7F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa36bdb1644dfca46f63d246f88a33bdb0" prot="public">
          <name>eHighAlphaLightGreen</name>
          <initializer>= 0x7FFF7FBF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daab77aacffddf1568371a35b59e5144261" prot="public">
          <name>eOpaqueLightGreen</name>
          <initializer>= 0x7FFF7FFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daac3d21905451a3b908b11f7637cd9a4f1" prot="public">
          <name>eTransparentLightRed</name>
          <initializer>= 0xFF7F7F00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daafae69b530eaec0bd34cbeedf543c70fc" prot="public">
          <name>eLowAlphaLightRed</name>
          <initializer>= 0xFF7F7F40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa23a3a9ee97b3614f2ead20f1811cb0c5" prot="public">
          <name>eMedAlphaLightRed</name>
          <initializer>= 0xFF7F7F7F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daae8478308205d2deb8ac7c8ca9f0437b4" prot="public">
          <name>eHighAlphaLightRed</name>
          <initializer>= 0xFF7F7FBF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daabad57021cf61a7fe8bc0bbc92eda3b3e" prot="public">
          <name>eOpaqueLightRed</name>
          <initializer>= 0xFF7F7FFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daacc767b056ad9bab2eb794f1212f0319f" prot="public">
          <name>eTransparentWhite</name>
          <initializer>= 0xFFFFFF00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa2af3854d7227bb7ee895379d31edee3a" prot="public">
          <name>eLowAlphaWhite</name>
          <initializer>= 0xFFFFFF40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa0c3e2ef822f63e2a4718894ee1b5f1a4" prot="public">
          <name>eMedAlphaWhite</name>
          <initializer>= 0xFFFFFF7F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa581425446f10b86d901848371f702e10" prot="public">
          <name>eHighAlphaWhite</name>
          <initializer>= 0xFFFFFFBF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926daa8f292ec993b834f95696c95dde5b046a" prot="public">
          <name>eOpaqueWhite</name>
          <initializer>= 0xFFFFFFFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumération de couleurs prédéfinies. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="36" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="38" bodyend="94"/>
      </memberdef>
      <memberdef kind="enum" id="d2/dd2/a02279_1ab7c465f9d6436e92b483633dace8c9b8" prot="public" static="no" strong="yes">
        <type>uint32_t</type>
        <name>PredefinedRgbColour</name>
        <qualifiedname>castor::PredefinedRgbColour</qualifiedname>
        <enumvalue id="d2/dd2/a02279_1ab7c465f9d6436e92b483633dace8c9b8af67d72274322d43efbef5b3591b019c2" prot="public">
          <name>eBlack</name>
          <initializer>= 0x000000FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ab7c465f9d6436e92b483633dace8c9b8aa132c4a53309a30cbe53e8f482c662db" prot="public">
          <name>eDarkBlue</name>
          <initializer>= 0x00007FFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ab7c465f9d6436e92b483633dace8c9b8ae646385008148e606d53eddd2b4038fc" prot="public">
          <name>eBlue</name>
          <initializer>= 0x0000FFFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ab7c465f9d6436e92b483633dace8c9b8ae8518e17760cf3cf40df93a362f0348c" prot="public">
          <name>eDarkGreen</name>
          <initializer>= 0x007F00FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ab7c465f9d6436e92b483633dace8c9b8a792bf7724ae3b7852ea2a6a5dd6858ed" prot="public">
          <name>eGreen</name>
          <initializer>= 0x00FF00FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ab7c465f9d6436e92b483633dace8c9b8a0633ad1080aaccb2c7d83c8b3bf87988" prot="public">
          <name>eDarkRed</name>
          <initializer>= 0x7F0000FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ab7c465f9d6436e92b483633dace8c9b8a034da23e289662569a29385fc190f2c9" prot="public">
          <name>eRed</name>
          <initializer>= 0xFF0000FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ab7c465f9d6436e92b483633dace8c9b8a9a91ca29c2f9b5a9c34bc22370179b35" prot="public">
          <name>eLightBlue</name>
          <initializer>= 0x7F7FFFFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ab7c465f9d6436e92b483633dace8c9b8ac66e1b35efb9fc567afb6680980bb9f5" prot="public">
          <name>eLightGreen</name>
          <initializer>= 0x7FFF7FFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ab7c465f9d6436e92b483633dace8c9b8a1d1e724f96f3359e47c5ce517e99c877" prot="public">
          <name>eLightRed</name>
          <initializer>= 0xFF7F7FFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ab7c465f9d6436e92b483633dace8c9b8a714612543f5f406591dffcb0f0dff3ad" prot="public">
          <name>eWhite</name>
          <initializer>= 0xFFFFFFFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumération de couleurs prédéfinies. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="101" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="103" bodyend="115"/>
      </memberdef>
      <memberdef kind="enum" id="d2/dd2/a02279_1ac08edd0eba2034b847ce5dae24508528" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>RgbaComponent</name>
        <qualifiedname>castor::RgbaComponent</qualifiedname>
        <enumvalue id="d2/dd2/a02279_1ac08edd0eba2034b847ce5dae24508528a034da23e289662569a29385fc190f2c9" prot="public">
          <name>eRed</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Composante rouge </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ac08edd0eba2034b847ce5dae24508528a792bf7724ae3b7852ea2a6a5dd6858ed" prot="public">
          <name>eGreen</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Composante verte </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ac08edd0eba2034b847ce5dae24508528ae646385008148e606d53eddd2b4038fc" prot="public">
          <name>eBlue</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Composante bleue </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ac08edd0eba2034b847ce5dae24508528a25c85e1726046df1e2fa32207364b4db" prot="public">
          <name>eAlpha</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Composante alpha </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ac08edd0eba2034b847ce5dae24508528ae558bb69fadec037d9eae46601a4df8e" prot="public">
          <name>eCount</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ac08edd0eba2034b847ce5dae24508528abd967862789968b1f8571ca888fffc77" prot="public">
          <name>eMin</name>
          <initializer>=  eRed</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumération des composantes d&apos;une couleur. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="122" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="124" bodyend="138"/>
      </memberdef>
      <memberdef kind="enum" id="d2/dd2/a02279_1a8815d33ec5e4c6d014c78babf91df156" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>RgbComponent</name>
        <qualifiedname>castor::RgbComponent</qualifiedname>
        <enumvalue id="d2/dd2/a02279_1a8815d33ec5e4c6d014c78babf91df156a034da23e289662569a29385fc190f2c9" prot="public">
          <name>eRed</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Composante rouge </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a8815d33ec5e4c6d014c78babf91df156a792bf7724ae3b7852ea2a6a5dd6858ed" prot="public">
          <name>eGreen</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Composante verte </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a8815d33ec5e4c6d014c78babf91df156ae646385008148e606d53eddd2b4038fc" prot="public">
          <name>eBlue</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Composante bleue </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a8815d33ec5e4c6d014c78babf91df156ae558bb69fadec037d9eae46601a4df8e" prot="public">
          <name>eCount</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a8815d33ec5e4c6d014c78babf91df156abd967862789968b1f8571ca888fffc77" prot="public">
          <name>eMin</name>
          <initializer>=  eRed</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumération des composantes d&apos;une couleur. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="145" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="147" bodyend="158"/>
      </memberdef>
      <memberdef kind="enum" id="d2/dd2/a02279_1ad7694f38f6c437bc663e6ef48146c712" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>Intersection</name>
        <qualifiedname>castor::Intersection</qualifiedname>
        <enumvalue id="d2/dd2/a02279_1ad7694f38f6c437bc663e6ef48146c712a251270409212a198cb7feb40542a0f46" prot="public">
          <name>eIn</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Complètement à l&apos;intérieur. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ad7694f38f6c437bc663e6ef48146c712a2545002d2c0ce3415de288b81a231e0f" prot="public">
          <name>eOut</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Complètement à l&apos;extérieur. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ad7694f38f6c437bc663e6ef48146c712a47d00af0e45eb16a70544642ef764312" prot="public">
          <name>eIntersect</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Intersection </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ad7694f38f6c437bc663e6ef48146c712ae558bb69fadec037d9eae46601a4df8e" prot="public">
          <name>eCount</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1ad7694f38f6c437bc663e6ef48146c712abd967862789968b1f8571ca888fffc77" prot="public">
          <name>eMin</name>
          <initializer>=  eIn</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types d&apos;intersection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Enumère les différents types d&apos;intersection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="167" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="169" bodyend="180"/>
      </memberdef>
      <memberdef kind="enum" id="d2/dd2/a02279_1a3149a2f8a5237c82d3d286078e9e6e44" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>PixelComponent</name>
        <qualifiedname>castor::PixelComponent</qualifiedname>
        <enumvalue id="d2/dd2/a02279_1a3149a2f8a5237c82d3d286078e9e6e44a034da23e289662569a29385fc190f2c9" prot="public">
          <name>eRed</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Rouge. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a3149a2f8a5237c82d3d286078e9e6e44a792bf7724ae3b7852ea2a6a5dd6858ed" prot="public">
          <name>eGreen</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Vert. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a3149a2f8a5237c82d3d286078e9e6e44ae646385008148e606d53eddd2b4038fc" prot="public">
          <name>eBlue</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bleu. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a3149a2f8a5237c82d3d286078e9e6e44a25c85e1726046df1e2fa32207364b4db" prot="public">
          <name>eAlpha</name>
          <initializer>= 0x08</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Alpha. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a3149a2f8a5237c82d3d286078e9e6e44a2a37044e2d0bed7cbb63527176543d73" prot="public">
          <name>eDepth</name>
          <initializer>= 0x10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Profondeur. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a3149a2f8a5237c82d3d286078e9e6e44a4432dfcffbc353a6a91b14e435a86939" prot="public">
          <name>eStencil</name>
          <initializer>= 0x20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stencil. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumération des composantes de <ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="414" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="416" bodyend="435"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a6c2b9a2e2ff045eb388b752a020a62ee" prot="public" static="no">
        <type><ref refid="da/dc6/a08731" kindref="compound">BoundingContainer</ref>&lt; 2 &gt;</type>
        <definition>using castor::BoundingContainer2D =  BoundingContainer&lt; 2 &gt;</definition>
        <argsstring></argsstring>
        <name>BoundingContainer2D</name>
        <qualifiedname>castor::BoundingContainer2D</qualifiedname>
        <briefdescription>
<para>Typedef sur une <ref refid="da/dc6/a08731" kindref="compound">BoundingContainer</ref> à 2 dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="248" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a3f4dee6133afe0fe0a75b929bf00e1f8" prot="public" static="no">
        <type><ref refid="da/dc6/a08731" kindref="compound">BoundingContainer</ref>&lt; 3 &gt;</type>
        <definition>using castor::BoundingContainer3D =  BoundingContainer&lt; 3 &gt;</definition>
        <argsstring></argsstring>
        <name>BoundingContainer3D</name>
        <qualifiedname>castor::BoundingContainer3D</qualifiedname>
        <briefdescription>
<para>Typedef sur une <ref refid="da/dc6/a08731" kindref="compound">BoundingContainer</ref> à 3 dimensions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="255" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1acb48ef98745e6277a3737d76a7024923" prot="public" static="no">
        <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PixelFormat::eR8G8B8A8_UNORM &gt;</type>
        <definition>using castor::UbPixel =  Pixel&lt; PixelFormat::eR8G8B8A8_UNORM &gt;</definition>
        <argsstring></argsstring>
        <name>UbPixel</name>
        <qualifiedname>castor::UbPixel</qualifiedname>
        <briefdescription>
<para>Typedef sur un pixel au format A8R8G8B8. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Sylvain DOREMUS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="369" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a360ca5dee8612df6f8f5447ba8e6651a" prot="public" static="no">
        <type><ref refid="dd/dbb/a08207" kindref="compound">castor::FlagCombination</ref>&lt; <ref refid="d2/dd2/a02279_1a3149a2f8a5237c82d3d286078e9e6e44" kindref="member">PixelComponent</ref> &gt;</type>
        <definition>using castor::PixelComponents = castor::FlagCombination&lt;  PixelComponent  &gt;</definition>
        <argsstring></argsstring>
        <name>PixelComponents</name>
        <qualifiedname>castor::PixelComponents</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="436" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aeffe387cf53ed593021313801dcda4ea" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="dd/df5/a08915" kindref="compound">LargerTyperT</ref>&lt; TypeT &gt;::Type</type>
        <definition>using castor::LargerTypeT =  typename LargerTyperT&lt; TypeT &gt;::Type</definition>
        <argsstring></argsstring>
        <name>LargerTypeT</name>
        <qualifiedname>castor::LargerTypeT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="760" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="760" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ac17c92b80747a2b75aa6ceb524bd7e09" prot="public" static="no">
        <type><ref refid="d8/d73/a08235" kindref="compound">ResourceCacheTraitsT</ref>&lt; <ref refid="d0/dbd/a08755" kindref="compound">Font</ref>, <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &gt;</type>
        <definition>using castor::FontCacheTraits =  ResourceCacheTraitsT&lt; Font, String &gt;</definition>
        <argsstring></argsstring>
        <name>FontCacheTraits</name>
        <qualifiedname>castor::FontCacheTraits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="845" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a32d0eef732dd10d9ba9aa271457136f7" prot="public" static="no">
        <type><ref refid="d2/dd2/a02279_1a1703e7c907eb1f09166a4dfb4d39985b" kindref="member">castor::RawUniquePtr</ref>&lt; <ref refid="d6/ded/a08959" kindref="compound">ImageLoaderImpl</ref> &gt;</type>
        <definition>using castor::ImageLoaderPtr =  castor::RawUniquePtr&lt; ImageLoaderImpl &gt;</definition>
        <argsstring></argsstring>
        <name>ImageLoaderPtr</name>
        <qualifiedname>castor::ImageLoaderPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="847" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a2a1a29d7c841836baa5e821afa42c3e0" prot="public" static="no">
        <type><ref refid="d2/dd2/a02279_1a1703e7c907eb1f09166a4dfb4d39985b" kindref="member">castor::RawUniquePtr</ref>&lt; <ref refid="dd/d59/a08967" kindref="compound">ImageWriterImpl</ref> &gt;</type>
        <definition>using castor::ImageWriterPtr =  castor::RawUniquePtr&lt; ImageWriterImpl &gt;</definition>
        <argsstring></argsstring>
        <name>ImageWriterPtr</name>
        <qualifiedname>castor::ImageWriterPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="848" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a87f7ca901ee74f6dcc0725bd7f13e31e" prot="public" static="no">
        <type><ref refid="d1/d39/a08803" kindref="compound">PxBuffer</ref>&lt; PixelFormat::eR8G8B8A8_UNORM &gt;</type>
        <definition>using castor::PixelBuffer =  PxBuffer&lt; PixelFormat::eR8G8B8A8_UNORM &gt;</definition>
        <argsstring></argsstring>
        <name>PixelBuffer</name>
        <qualifiedname>castor::PixelBuffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="849" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a0529e1a9b017fe1ac441cf37d192d052" prot="public" static="no">
        <type><ref refid="d7/df3/a08259" kindref="compound">ResourceCacheT</ref>&lt; <ref refid="d0/dbd/a08755" kindref="compound">Font</ref>, <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref>, <ref refid="d2/dd2/a02279_1ac17c92b80747a2b75aa6ceb524bd7e09" kindref="member">FontCacheTraits</ref> &gt;</type>
        <definition>using castor::FontCache =  ResourceCacheT&lt; Font, String, FontCacheTraits &gt;</definition>
        <argsstring></argsstring>
        <name>FontCache</name>
        <qualifiedname>castor::FontCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="850" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a4425e82836c5b73c4c0276ceeca8d663" prot="public" static="no">
        <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt;</type>
        <definition>using castor::RgbColour =  RgbColourT&lt; ColourComponent &gt;</definition>
        <argsstring></argsstring>
        <name>RgbColour</name>
        <qualifiedname>castor::RgbColour</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="859" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="859" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a0248f41072abe76e8ae264325ea85a18" prot="public" static="no">
        <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt;</type>
        <definition>using castor::RgbaColour =  RgbaColourT&lt; ColourComponent &gt;</definition>
        <argsstring></argsstring>
        <name>RgbaColour</name>
        <qualifiedname>castor::RgbaColour</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="860" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="860" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ae6e51493f47ee99a48e6bc37c45ab9b9" prot="public" static="no">
        <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; <ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> &gt;</type>
        <definition>using castor::HdrRgbColour =  RgbColourT&lt; HdrColourComponent &gt;</definition>
        <argsstring></argsstring>
        <name>HdrRgbColour</name>
        <qualifiedname>castor::HdrRgbColour</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="861" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="861" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1abef501abd8305434e8c297a85c67b5ea" prot="public" static="no">
        <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; <ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> &gt;</type>
        <definition>using castor::HdrRgbaColour =  RgbaColourT&lt; HdrColourComponent &gt;</definition>
        <argsstring></argsstring>
        <name>HdrRgbaColour</name>
        <qualifiedname>castor::HdrRgbaColour</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="862" column="1" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="862" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a1953cc9f2c9a578bfd88727f0b400579" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref> constexpr</type>
        <definition>PixelFormat constexpr castor::singleComponentV</definition>
        <argsstring></argsstring>
        <name>singleComponentV</name>
        <qualifiedname>castor::singleComponentV</qualifiedname>
        <initializer>= <ref refid="dc/d93/a08823" kindref="compound">SingleComponentT</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="464" column="30" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a4978516c368311cb28f0c710871a6795" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::isColourFormatV</definition>
        <argsstring></argsstring>
        <name>isColourFormatV</name>
        <qualifiedname>castor::isColourFormatV</qualifiedname>
        <initializer>= <ref refid="d3/d5b/a08827" kindref="compound">IsColourFormat</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="477" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a8f1a09cd0f0d8fa8d6a01939671b16b2" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::isDepthFormatV</definition>
        <argsstring></argsstring>
        <name>isDepthFormatV</name>
        <qualifiedname>castor::isDepthFormatV</qualifiedname>
        <initializer>= <ref refid="d1/d28/a08831" kindref="compound">IsDepthFormat</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="490" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a318f9a155e7a8537065c8e0edefbae55" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::isStencilFormatV</definition>
        <argsstring></argsstring>
        <name>isStencilFormatV</name>
        <qualifiedname>castor::isStencilFormatV</qualifiedname>
        <initializer>= <ref refid="d2/d5d/a08835" kindref="compound">IsStencilFormat</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="503" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1ad8bcdf20ee24cf3a92d4e0dd49933fd6" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::isDepthStencilFormatV</definition>
        <argsstring></argsstring>
        <name>isDepthStencilFormatV</name>
        <qualifiedname>castor::isDepthStencilFormatV</qualifiedname>
        <initializer>= <ref refid="d4/d6b/a08839" kindref="compound">IsDepthStencilFormat</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="516" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a0336e76ad185995a8cefb6a12967f7c6" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::isCompressedV</definition>
        <argsstring></argsstring>
        <name>isCompressedV</name>
        <qualifiedname>castor::isCompressedV</qualifiedname>
        <initializer>= <ref refid="d1/d76/a08843" kindref="compound">IsCompressed</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="529" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1ac584bbd6a683a11ae015268cbf69c3e6" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::hasAlphaV</definition>
        <argsstring></argsstring>
        <name>hasAlphaV</name>
        <qualifiedname>castor::hasAlphaV</qualifiedname>
        <initializer>= <ref refid="d9/d6f/a08847" kindref="compound">HasAlpha</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="542" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1af48ddf6d5b21bb1e92e181898e6b7b58" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::is8SRGBComponentsV</definition>
        <argsstring></argsstring>
        <name>is8SRGBComponentsV</name>
        <qualifiedname>castor::is8SRGBComponentsV</qualifiedname>
        <initializer>= <ref refid="d5/d1d/a08851" kindref="compound">Is8SRGBComponents</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="555" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="555" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1ac49164bc638365b43e3040856e871d41" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::is8UComponentsV</definition>
        <argsstring></argsstring>
        <name>is8UComponentsV</name>
        <qualifiedname>castor::is8UComponentsV</qualifiedname>
        <initializer>= <ref refid="de/d22/a08855" kindref="compound">Is8UComponents</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="568" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1ab8f474cdc10de5af57a622b837c459b4" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::is16UComponentsV</definition>
        <argsstring></argsstring>
        <name>is16UComponentsV</name>
        <qualifiedname>castor::is16UComponentsV</qualifiedname>
        <initializer>= <ref refid="d3/d9e/a08859" kindref="compound">Is16UComponents</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="581" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="581" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1ac0cfb6fd86d49f1fa0b9037a9f3734eb" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::is32UComponentsV</definition>
        <argsstring></argsstring>
        <name>is32UComponentsV</name>
        <qualifiedname>castor::is32UComponentsV</qualifiedname>
        <initializer>= <ref refid="d3/dcf/a08863" kindref="compound">Is32UComponents</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="594" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="594" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1afc1168b98eb8070bc967ac5e66005aee" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::is64UComponentsV</definition>
        <argsstring></argsstring>
        <name>is64UComponentsV</name>
        <qualifiedname>castor::is64UComponentsV</qualifiedname>
        <initializer>= <ref refid="de/d06/a08867" kindref="compound">Is64UComponents</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="607" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1ad26d04aee1163b337b54ed761ad10e6a" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::is8SComponentsV</definition>
        <argsstring></argsstring>
        <name>is8SComponentsV</name>
        <qualifiedname>castor::is8SComponentsV</qualifiedname>
        <initializer>= <ref refid="d5/df5/a08871" kindref="compound">Is8SComponents</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="620" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a16a8d57be2206c3af6d6abc3b3240170" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::is16SComponentsV</definition>
        <argsstring></argsstring>
        <name>is16SComponentsV</name>
        <qualifiedname>castor::is16SComponentsV</qualifiedname>
        <initializer>= <ref refid="d3/d35/a08875" kindref="compound">Is16SComponents</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="633" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a9f8ebb5f49c4ce553aa6c294cef9249f" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::is32SComponentsV</definition>
        <argsstring></argsstring>
        <name>is32SComponentsV</name>
        <qualifiedname>castor::is32SComponentsV</qualifiedname>
        <initializer>= <ref refid="d1/d83/a08879" kindref="compound">Is32SComponents</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="646" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="646" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a48e0b5ed9102c174eb47b8df7bef225a" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::is64SComponentsV</definition>
        <argsstring></argsstring>
        <name>is64SComponentsV</name>
        <qualifiedname>castor::is64SComponentsV</qualifiedname>
        <initializer>= <ref refid="d4/d08/a08883" kindref="compound">Is64SComponents</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="659" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="659" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a237e3af4e4e09d2bb6bed70a55df1718" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::is16FComponentsV</definition>
        <argsstring></argsstring>
        <name>is16FComponentsV</name>
        <qualifiedname>castor::is16FComponentsV</qualifiedname>
        <initializer>= <ref refid="df/d9d/a08887" kindref="compound">Is16FComponents</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="672" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="672" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a04250a6a132f7e16eea1ea556d141f56" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::is32FComponentsV</definition>
        <argsstring></argsstring>
        <name>is32FComponentsV</name>
        <qualifiedname>castor::is32FComponentsV</qualifiedname>
        <initializer>= <ref refid="d0/d7d/a08891" kindref="compound">Is32FComponents</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="685" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="685" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1aca5997a1ab3fea61d162598a57c72ddd" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::is64FComponentsV</definition>
        <argsstring></argsstring>
        <name>is64FComponentsV</name>
        <qualifiedname>castor::is64FComponentsV</qualifiedname>
        <initializer>= <ref refid="d8/d0c/a08895" kindref="compound">Is64FComponents</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="698" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a032b2efc84d61bab671df67f0433d8fb" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::isD16UComponentV</definition>
        <argsstring></argsstring>
        <name>isD16UComponentV</name>
        <qualifiedname>castor::isD16UComponentV</qualifiedname>
        <initializer>= <ref refid="de/d05/a08899" kindref="compound">IsD16UComponent</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="711" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a9d60d65753bb2846800c3274a31ae642" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::isD24UComponentV</definition>
        <argsstring></argsstring>
        <name>isD24UComponentV</name>
        <qualifiedname>castor::isD24UComponentV</qualifiedname>
        <initializer>= <ref refid="d0/d2b/a08903" kindref="compound">IsD24UComponent</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="724" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="724" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a71c5be1f852d9d7a6666dcdcc1b1e271" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::isD32FComponentV</definition>
        <argsstring></argsstring>
        <name>isD32FComponentV</name>
        <qualifiedname>castor::isD32FComponentV</qualifiedname>
        <initializer>= <ref refid="d1/db9/a08907" kindref="compound">IsD32FComponent</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="737" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a1447c4cea76aad315931b379aca8ab87" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PixelFormatT</declname>
            <defname>PixelFormatT</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::isS8UComponentV</definition>
        <argsstring></argsstring>
        <name>isS8UComponentV</name>
        <qualifiedname>castor::isS8UComponentV</qualifiedname>
        <initializer>= <ref refid="dc/daf/a08911" kindref="compound">IsS8UComponent</ref>&lt; PixelFormatT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="750" column="23" bodyfile="CastorUtils/Graphics/GraphicsModule.hpp" bodystart="750" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1fe41d813a93c2c0148964cac82dfef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>CU_API String castor::getName</definition>
        <argsstring>(PixelComponent const &amp;component)</argsstring>
        <name>getName</name>
        <qualifiedname>castor::getName</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a3149a2f8a5237c82d3d286078e9e6e44" kindref="member">PixelComponent</ref> const &amp;</type>
          <declname>component</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="437" column="15" declfile="CastorUtils/Graphics/GraphicsModule.hpp" declline="437" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a70c0efb73a7f9205f63e3a4c3b148338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>CU_API String castor::getName</definition>
        <argsstring>(PixelComponents const &amp;components)</argsstring>
        <name>getName</name>
        <qualifiedname>castor::getName</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a360ca5dee8612df6f8f5447ba8e6651a" kindref="member">PixelComponents</ref> const &amp;</type>
          <declname>components</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="438" column="15" declfile="CastorUtils/Graphics/GraphicsModule.hpp" declline="438" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3499772a32705eb6dc396a0947b929ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSmartPtr</definition>
        <argsstring>(castor, BoundingBox, CU_API)</argsstring>
        <name>CU_DeclareSmartPtr</name>
        <qualifiedname>castor::CU_DeclareSmartPtr</qualifiedname>
        <param>
          <type>castor</type>
        </param>
        <param>
          <type><ref refid="d6/d51/a08727" kindref="compound">BoundingBox</ref></type>
        </param>
        <param>
          <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="852" column="1" declfile="CastorUtils/Graphics/GraphicsModule.hpp" declline="852" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5a92877ac0d241dad17150103755541e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSmartPtr</definition>
        <argsstring>(castor, BoundingSphere, CU_API)</argsstring>
        <name>CU_DeclareSmartPtr</name>
        <qualifiedname>castor::CU_DeclareSmartPtr</qualifiedname>
        <param>
          <type>castor</type>
        </param>
        <param>
          <type><ref refid="dd/d6f/a08735" kindref="compound">BoundingSphere</ref></type>
        </param>
        <param>
          <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="853" column="1" declfile="CastorUtils/Graphics/GraphicsModule.hpp" declline="853" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6878fbc9cad50ca57180aaf72b250cfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSmartPtr</definition>
        <argsstring>(castor, Image, CU_API)</argsstring>
        <name>CU_DeclareSmartPtr</name>
        <qualifiedname>castor::CU_DeclareSmartPtr</qualifiedname>
        <param>
          <type>castor</type>
        </param>
        <param>
          <type><ref refid="d6/d3e/a08939" kindref="compound">Image</ref></type>
        </param>
        <param>
          <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="854" column="1" declfile="CastorUtils/Graphics/GraphicsModule.hpp" declline="854" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac3230f3beea8a791fb301b273ddc003d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSmartPtr</definition>
        <argsstring>(castor, Font, CU_API)</argsstring>
        <name>CU_DeclareSmartPtr</name>
        <qualifiedname>castor::CU_DeclareSmartPtr</qualifiedname>
        <param>
          <type>castor</type>
        </param>
        <param>
          <type><ref refid="d0/dbd/a08755" kindref="compound">Font</ref></type>
        </param>
        <param>
          <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="855" column="1" declfile="CastorUtils/Graphics/GraphicsModule.hpp" declline="855" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2b4e5d01ffd1c904cbda16510597599f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSmartPtr</definition>
        <argsstring>(castor, PxBufferBase, CU_API)</argsstring>
        <name>CU_DeclareSmartPtr</name>
        <qualifiedname>castor::CU_DeclareSmartPtr</qualifiedname>
        <param>
          <type>castor</type>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref></type>
        </param>
        <param>
          <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="856" column="1" declfile="CastorUtils/Graphics/GraphicsModule.hpp" declline="856" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a14b05e5168191a51a7ede0cc1dc537d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSmartPtr</definition>
        <argsstring>(castor, FontCache, CU_API)</argsstring>
        <name>CU_DeclareSmartPtr</name>
        <qualifiedname>castor::CU_DeclareSmartPtr</qualifiedname>
        <param>
          <type>castor</type>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a0529e1a9b017fe1ac441cf37d192d052" kindref="member">FontCache</ref></type>
        </param>
        <param>
          <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="857" column="1" declfile="CastorUtils/Graphics/GraphicsModule.hpp" declline="857" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa40e8404bd6f686e5455ebacffe51273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::hasAlphaChannel</definition>
        <argsstring>(Image const &amp;image)</argsstring>
        <name>hasAlphaChannel</name>
        <qualifiedname>castor::hasAlphaChannel</qualifiedname>
        <param>
          <type><ref refid="d6/d3e/a08939" kindref="compound">Image</ref> const &amp;</type>
          <declname>image</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/GraphicsModule.hpp" line="864" column="13" declfile="CastorUtils/Graphics/GraphicsModule.hpp" declline="864" declcolumn="13"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Math</header>
      <memberdef kind="enum" id="d2/dd2/a02279_1a8cf4a835d2dbebebe00eef5217134a5f" prot="public" static="no" strong="yes">
        <type></type>
        <name>LengthUnit</name>
        <qualifiedname>castor::LengthUnit</qualifiedname>
        <enumvalue id="d2/dd2/a02279_1a8cf4a835d2dbebebe00eef5217134a5fa4529f94c0a88ab9a5a4d475b3a869ffd" prot="public">
          <name>eKilometre</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a8cf4a835d2dbebebe00eef5217134a5fa72c4b60024431dfaacbf85e7d4531215" prot="public">
          <name>eMetre</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a8cf4a835d2dbebebe00eef5217134a5fa9aad14ed0b1cc10a0649098056092bad" prot="public">
          <name>eCentimetre</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a8cf4a835d2dbebebe00eef5217134a5faac6a92c11ef1c3ce7d4b8b5a9ecb60eb" prot="public">
          <name>eMillimetre</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a8cf4a835d2dbebebe00eef5217134a5fac979bd88323be155378155437825bc7f" prot="public">
          <name>eYard</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a8cf4a835d2dbebebe00eef5217134a5fa3df5b8e6d05309d67bada9ff51e63fe3" prot="public">
          <name>eFoot</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a8cf4a835d2dbebebe00eef5217134a5faf57426a647f387abd6539a917d545108" prot="public">
          <name>eInch</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a8cf4a835d2dbebebe00eef5217134a5fae558bb69fadec037d9eae46601a4df8e" prot="public">
          <name>eCount</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a8cf4a835d2dbebebe00eef5217134a5fabd967862789968b1f8571ca888fffc77" prot="public">
          <name>eMin</name>
          <initializer>=  eKilometre</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="16" column="1" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="17" bodyend="26"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ae8e874b0f16e0aed39b2128f83554e8b" prot="public" static="no">
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; float &gt;</type>
        <definition>typedef AngleT&lt; float &gt; castor::Angle =  AngleT&lt; float &gt;</definition>
        <argsstring></argsstring>
        <name>Angle</name>
        <qualifiedname>castor::Angle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="665" column="1" bodyfile="CastorUtils/Math/Angle.hpp" bodystart="665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aa69fef28c24152a2d8c2b155af85163a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, 2 &gt;</type>
        <definition>using castor::Point2 =  Point&lt; T, 2 &gt;</definition>
        <argsstring></argsstring>
        <name>Point2</name>
        <qualifiedname>castor::Point2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="220" column="14" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a073a6615c730b0cbe22f33728ac95a4b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, 3 &gt;</type>
        <definition>using castor::Point3 =  Point&lt; T, 3 &gt;</definition>
        <argsstring></argsstring>
        <name>Point3</name>
        <qualifiedname>castor::Point3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="221" column="14" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a5e1950beb027b9e1e101eef7c4535a31" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, 4 &gt;</type>
        <definition>using castor::Point4 =  Point&lt; T, 4 &gt;</definition>
        <argsstring></argsstring>
        <name>Point4</name>
        <qualifiedname>castor::Point4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="222" column="14" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a4bd6721c26128ddfc9f8ac72c62546d8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, 2 &gt;</type>
        <definition>using castor::Coords2 =  Coords&lt; T, 2 &gt;</definition>
        <argsstring></argsstring>
        <name>Coords2</name>
        <qualifiedname>castor::Coords2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="224" column="14" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a916f4c33a4634d775ac0cfd9bff376ee" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, 3 &gt;</type>
        <definition>using castor::Coords3 =  Coords&lt; T, 3 &gt;</definition>
        <argsstring></argsstring>
        <name>Coords3</name>
        <qualifiedname>castor::Coords3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="225" column="14" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a5a9465c9b2719da11877027346e73a7f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, 4 &gt;</type>
        <definition>using castor::Coords4 =  Coords&lt; T, 4 &gt;</definition>
        <argsstring></argsstring>
        <name>Coords4</name>
        <qualifiedname>castor::Coords4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="226" column="14" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a2bc005af4322fd6abf8981a625f2cf1e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, 2 &gt;</type>
        <definition>using castor::Matrix2x2 =  SquareMatrix&lt; T, 2 &gt;</definition>
        <argsstring></argsstring>
        <name>Matrix2x2</name>
        <qualifiedname>castor::Matrix2x2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="228" column="14" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a20c9a729fb713d1c692194bdcc4837e9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, 3 &gt;</type>
        <definition>using castor::Matrix3x3 =  SquareMatrix&lt; T, 3 &gt;</definition>
        <argsstring></argsstring>
        <name>Matrix3x3</name>
        <qualifiedname>castor::Matrix3x3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="229" column="14" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a1a6d255a875cbdff26643d39a6406987" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, 4 &gt;</type>
        <definition>using castor::Matrix4x4 =  SquareMatrix&lt; T, 4 &gt;</definition>
        <argsstring></argsstring>
        <name>Matrix4x4</name>
        <qualifiedname>castor::Matrix4x4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="230" column="14" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a54790871ec76669dbdf815a62e36fb81" prot="public" static="no">
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; float &gt;</type>
        <definition>using castor::Length =  LengthT&lt; float &gt;</definition>
        <argsstring></argsstring>
        <name>Length</name>
        <qualifiedname>castor::Length</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="233" column="1" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a09d3481f4a05ba6fbf3d4dede82380d8" prot="public" static="no">
        <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; float &gt;</type>
        <definition>using castor::Quaternion =  QuaternionT&lt; float &gt;</definition>
        <argsstring></argsstring>
        <name>Quaternion</name>
        <qualifiedname>castor::Quaternion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="234" column="1" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aef751a639b02df9e1ebeac0b8dd4bd32" prot="public" static="no">
        <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; <ref refid="d2/dd2/a02279_1a09d3481f4a05ba6fbf3d4dede82380d8" kindref="member">Quaternion</ref> &gt;</type>
        <definition>using castor::QuaternionArray =  Vector&lt; Quaternion &gt;</definition>
        <argsstring></argsstring>
        <name>QuaternionArray</name>
        <qualifiedname>castor::QuaternionArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="236" column="1" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a6386e03c03d78b16e4d94315536aa4f3" prot="public" static="no">
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; Point2f &gt;</type>
        <definition>using castor::Vector2f =  LengthT&lt; Point2f &gt;</definition>
        <argsstring></argsstring>
        <name>Vector2f</name>
        <qualifiedname>castor::Vector2f</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="266" column="1" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a567eb87a4c9ef843fb8933f58196ebb7" prot="public" static="no">
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; Point3f &gt;</type>
        <definition>using castor::Vector3f =  LengthT&lt; Point3f &gt;</definition>
        <argsstring></argsstring>
        <name>Vector3f</name>
        <qualifiedname>castor::Vector3f</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="267" column="1" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a67b22733357e7824373e77208c6fe74c" prot="public" static="no">
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; Point4f &gt;</type>
        <definition>using castor::Vector4f =  LengthT&lt; Point4f &gt;</definition>
        <argsstring></argsstring>
        <name>Vector4f</name>
        <qualifiedname>castor::Vector4f</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="268" column="1" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a4cd3b6753517629bd36ec5e9bbac4224" prot="public" static="no">
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; Point2d &gt;</type>
        <definition>using castor::Vector2d =  LengthT&lt; Point2d &gt;</definition>
        <argsstring></argsstring>
        <name>Vector2d</name>
        <qualifiedname>castor::Vector2d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="269" column="1" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a38f8261b34d863382caa936596d06c8e" prot="public" static="no">
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; Point3d &gt;</type>
        <definition>using castor::Vector3d =  LengthT&lt; Point3d &gt;</definition>
        <argsstring></argsstring>
        <name>Vector3d</name>
        <qualifiedname>castor::Vector3d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="270" column="1" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ac7e0463bfa32913f7796e4acae812450" prot="public" static="no">
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; Point4d &gt;</type>
        <definition>using castor::Vector4d =  LengthT&lt; Point4d &gt;</definition>
        <argsstring></argsstring>
        <name>Vector4d</name>
        <qualifiedname>castor::Vector4d</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="271" column="1" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a931b074b19e86847de40bce81dabb908" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename SrcT</type>
          </param>
          <param>
            <type>typename DstCompT</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="de/dd7/a09235" kindref="compound">PointTyperT</ref>&lt; SrcT, DstCompT &gt;::Type</type>
        <definition>using castor::PointTypeT =  typename PointTyperT&lt; SrcT, DstCompT &gt;::Type</definition>
        <argsstring></argsstring>
        <name>PointTypeT</name>
        <qualifiedname>castor::PointTypeT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="413" column="1" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a262c81b5d080cd4f5d8d56310a78de5b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="d0/df9/a09247" kindref="compound">PointComponentGetT</ref>&lt; TypeT &gt;::Type</type>
        <definition>using castor::PointComponentT =  typename PointComponentGetT&lt; TypeT &gt;::Type</definition>
        <argsstring></argsstring>
        <name>PointComponentT</name>
        <qualifiedname>castor::PointComponentT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="446" column="1" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1ab131203085aeb88ada68c9eb6003c6fc" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>constexpr Type</type>
        <definition>constexpr Type castor::Pi</definition>
        <argsstring></argsstring>
        <name>Pi</name>
        <qualifiedname>castor::Pi</qualifiedname>
        <initializer>{ Type( 3.1415926535897932384626433832795028841968 ) }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="30" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1aada89b553763ad76586bb474285e9332" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>constexpr Type</type>
        <definition>constexpr Type castor::PiMult2</definition>
        <argsstring></argsstring>
        <name>PiMult2</name>
        <qualifiedname>castor::PiMult2</qualifiedname>
        <initializer>{ Type( 3.1415926535897932384626433832795028841968 * 2.0 ) }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="32" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1acd6259789df41c0b75c4e58f6f00a8b4" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>constexpr Type</type>
        <definition>constexpr Type castor::Tau</definition>
        <argsstring></argsstring>
        <name>Tau</name>
        <qualifiedname>castor::Tau</qualifiedname>
        <initializer>{ Type( 3.1415926535897932384626433832795028841968 * 2.0 ) }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="34" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a71eba801c86c0503efac1418ac16de7e" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>constexpr Type</type>
        <definition>constexpr Type castor::PiDiv2</definition>
        <argsstring></argsstring>
        <name>PiDiv2</name>
        <qualifiedname>castor::PiDiv2</qualifiedname>
        <initializer>{ Type( 3.1415926535897932384626433832795028841968 / 2.0 ) }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="36" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1ac803a43cded1595957a3782744d9443c" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isLengthV</definition>
        <argsstring></argsstring>
        <name>isLengthV</name>
        <qualifiedname>castor::isLengthV</qualifiedname>
        <initializer>= <ref refid="d1/d50/a09267" kindref="compound">IsLengthT</ref>&lt; TypeT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="459" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a2c9839c8acde3317555d3d24f4cbc8d5" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isFloatingV</definition>
        <argsstring></argsstring>
        <name>isFloatingV</name>
        <qualifiedname>castor::isFloatingV</qualifiedname>
        <initializer>= std::is_same_v&lt; float, TypeT &gt;
		|| std::is_same_v&lt; double, TypeT &gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="462" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a47b84b08e517ea7f9f97e688eda5fbae" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
          <param>
            <type>typename CoordT</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>CountT</declname>
            <defname>CountT</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isPointV</definition>
        <argsstring></argsstring>
        <name>isPointV</name>
        <qualifiedname>castor::isPointV</qualifiedname>
        <initializer>= std::is_same_v&lt; <ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; CoordT, CountT &gt;, TypeT &gt;
		|| std::is_same_v&lt; <ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; <ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; CoordT, CountT &gt; &gt;, TypeT &gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="468" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a2693ebfc1ce2dd54c119a808923171b1" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
          <param>
            <type>typename CoordT</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isPoint2V</definition>
        <argsstring></argsstring>
        <name>isPoint2V</name>
        <qualifiedname>castor::isPoint2V</qualifiedname>
        <initializer>= <ref refid="d2/dd2/a02279_1a47b84b08e517ea7f9f97e688eda5fbae" kindref="member">isPointV</ref>&lt; TypeT, CoordT, 2u &gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="472" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a7be03cd97a2bb5c546fcd51170aa470c" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
          <param>
            <type>typename CoordT</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isPoint3V</definition>
        <argsstring></argsstring>
        <name>isPoint3V</name>
        <qualifiedname>castor::isPoint3V</qualifiedname>
        <initializer>= <ref refid="d2/dd2/a02279_1a47b84b08e517ea7f9f97e688eda5fbae" kindref="member">isPointV</ref>&lt; TypeT, CoordT, 3u &gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="474" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a91c6024eede3d617479f3cfdc9e48a57" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
          <param>
            <type>typename CoordT</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isPoint4V</definition>
        <argsstring></argsstring>
        <name>isPoint4V</name>
        <qualifiedname>castor::isPoint4V</qualifiedname>
        <initializer>= <ref refid="d2/dd2/a02279_1a47b84b08e517ea7f9f97e688eda5fbae" kindref="member">isPointV</ref>&lt; TypeT, CoordT, 4u &gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="476" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a185a86c80d6db81b2337d87fa07ab6dc" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isPoint2f</definition>
        <argsstring></argsstring>
        <name>isPoint2f</name>
        <qualifiedname>castor::isPoint2f</qualifiedname>
        <initializer>= <ref refid="d2/dd2/a02279_1a2693ebfc1ce2dd54c119a808923171b1" kindref="member">isPoint2V</ref>&lt; TypeT, float &gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="479" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a9514ca7a8eecc1224dfc1ee8d2409e07" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isPoint3f</definition>
        <argsstring></argsstring>
        <name>isPoint3f</name>
        <qualifiedname>castor::isPoint3f</qualifiedname>
        <initializer>= <ref refid="d2/dd2/a02279_1a7be03cd97a2bb5c546fcd51170aa470c" kindref="member">isPoint3V</ref>&lt; TypeT, float &gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="481" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a39a2d4e59814d8341a1feaf664164b8e" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isPoint4f</definition>
        <argsstring></argsstring>
        <name>isPoint4f</name>
        <qualifiedname>castor::isPoint4f</qualifiedname>
        <initializer>= <ref refid="d2/dd2/a02279_1a91c6024eede3d617479f3cfdc9e48a57" kindref="member">isPoint4V</ref>&lt; TypeT, float &gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="483" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a1619fe97eb7ef768fe1d1325f1a7dfb5" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isPoint2d</definition>
        <argsstring></argsstring>
        <name>isPoint2d</name>
        <qualifiedname>castor::isPoint2d</qualifiedname>
        <initializer>= <ref refid="d2/dd2/a02279_1a2693ebfc1ce2dd54c119a808923171b1" kindref="member">isPoint2V</ref>&lt; TypeT, double &gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="486" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1ab5c14d49943f2b229ab0fd07db7c6f4a" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isPoint3d</definition>
        <argsstring></argsstring>
        <name>isPoint3d</name>
        <qualifiedname>castor::isPoint3d</qualifiedname>
        <initializer>= <ref refid="d2/dd2/a02279_1a7be03cd97a2bb5c546fcd51170aa470c" kindref="member">isPoint3V</ref>&lt; TypeT, double &gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="488" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1ae2774cca66a3cc0215a674574a167f46" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isPoint4d</definition>
        <argsstring></argsstring>
        <name>isPoint4d</name>
        <qualifiedname>castor::isPoint4d</qualifiedname>
        <initializer>= <ref refid="d2/dd2/a02279_1a91c6024eede3d617479f3cfdc9e48a57" kindref="member">isPoint4V</ref>&lt; TypeT, double &gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="490" column="23" bodyfile="CastorUtils/Math/MathModule.hpp" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aba4e1a1dcb61ce78c68b82d847bc429b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>CU_API String castor::getName</definition>
        <argsstring>(LengthUnit value)</argsstring>
        <name>getName</name>
        <qualifiedname>castor::getName</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a8cf4a835d2dbebebe00eef5217134a5f" kindref="member">LengthUnit</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="27" column="15" declfile="CastorUtils/Math/MathModule.hpp" declline="27" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4b22ca72d60aca7f5d7dc99d4c87e360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(bool, 4, b)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="238" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="238" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a37fe7fe9fb67cae7147a8fd56f08fbf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(bool, 3, b)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="239" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="239" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ada0de93dcb3ad85e0119734e3843ceed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(bool, 2, b)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="240" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="240" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2848a50bda97c789da9618090c7445a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(int8_t, 4, c)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>c</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="241" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="241" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4638cfaf47e46d36d4b9c59f60dc0f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(int8_t, 3, c)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>c</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="242" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="242" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae54f1a078625fd2b29eefdab521b0361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(int8_t, 2, c)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>c</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="243" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="243" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa707e53ec70643168d3a063903d78086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(uint8_t, 4, ub)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>ub</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="244" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="244" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac77ddb97dabf22ed04d9ed6ea403cf9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(uint8_t, 3, ub)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>ub</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="245" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="245" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3522e77b9e7c15418224d1e01d5a4130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(uint8_t, 2, ub)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>ub</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="246" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="246" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a06d90b0c7c0ea43aabf456629d090f13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(int16_t, 4, s)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>s</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="247" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="247" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a51d143516088f375006e6e561a1b61d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(int16_t, 3, s)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>s</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="248" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="248" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a91a8ed2b42deb49bd9713ba90783f3d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(int16_t, 2, s)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>s</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="249" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="249" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0d50923bb065e95d85733d44130816c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(uint16_t, 4, us)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>us</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="250" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="250" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab8686198468910c3703f358ad92fd73b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(uint16_t, 3, us)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>us</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="251" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="251" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a07e4c54926161e68c083c5884bdc26e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(uint16_t, 2, us)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>us</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="252" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="252" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aba088be96d610114b4ddaca529001f6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(int32_t, 4, i)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="253" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="253" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac746c596138228318b688e1cb1301697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(int32_t, 3, i)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="254" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="254" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3ad2af0353973c2c1866e7f274df04cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(int32_t, 2, i)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="255" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="255" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aacf3df79d606a1b9894d0086bdb33e43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(uint32_t, 4, ui)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="256" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="256" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae38cafc2a00a55340690bef860c78a50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(uint32_t, 3, ui)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="257" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="257" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af8a5a4a8666202726766dbe84aaba0b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(uint32_t, 2, ui)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="258" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="258" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aed5897782db7b8fa0b13a0426a9bdad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(float, 4, f)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="259" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="259" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3d19f74b709a7e5677fd3f552451b74f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(float, 3, f)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="260" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="260" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a99db95916cfd32e16f31a13f63fe69ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(float, 2, f)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="261" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="261" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7339a3289c4ecfa5cfd63971dd8f6265" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(double, 4, d)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="262" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="262" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad6516c520a0c05b6a744eb517657a6d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(double, 3, d)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="263" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="263" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a72cde3aa83537c119b6ee20db6ec3d6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclarePoint</definition>
        <argsstring>(double, 2, d)</argsstring>
        <name>CU_DeclarePoint</name>
        <qualifiedname>castor::CU_DeclarePoint</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="264" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="264" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad5c50c4afca454ea8fe30fd4b856bab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(bool, 4, b)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="273" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="273" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6074d7acda747b52b93bf7dc03b80e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(bool, 3, b)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="274" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="274" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a67b99f1b6b5e3c6ca04cfa3bb744292d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(bool, 2, b)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="275" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="275" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac85f52d9abe6ffb202a8c9c2c61e2bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(int8_t, 4, c)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>c</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="276" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="276" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a40bf5b697e03756280ec4b13e2b6bcc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(int8_t, 3, c)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>c</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="277" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="277" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4cae5e7946b55fc399074c467ee6b0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(int8_t, 2, c)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>c</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="278" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="278" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5e906d1fd2a1c9a7c5cdde0c4d129344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(uint8_t, 4, ub)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>ub</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="279" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="279" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad24dcb5691bfec49d838dd223b13339a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(uint8_t, 3, ub)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>ub</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="280" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="280" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae81cb379afb85ec91f8e3f7fa8dc3f45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(uint8_t, 2, ub)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>ub</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="281" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="281" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2ec0d831d689793ecb4b8fd2a6b54b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(int16_t, 4, s)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>s</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="282" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="282" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6929dc8806d85d5be0f4c4e7f7ebc3da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(int16_t, 3, s)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>s</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="283" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="283" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a624a1c8fa048ac5dd10ba882421f2daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(int16_t, 2, s)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>s</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="284" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="284" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0e853030d5afb79c057e4ef4893c393c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(uint16_t, 4, us)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>us</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="285" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="285" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6d3402c4117a9ec4ff34e74caade8a0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(uint16_t, 3, us)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>us</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="286" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="286" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aaafb797c8cf9b8dff0e4eb149656dbab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(uint16_t, 2, us)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>us</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="287" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="287" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aae1720d206995069982e3a673ad7afba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(int32_t, 4, i)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="288" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="288" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7cd05bd63d2571846361e2c66453d309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(int32_t, 3, i)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="289" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="289" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7624d602dc718f37f209524da390459b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(int32_t, 2, i)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="290" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="290" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa45baf8a7a60b3c93d3322798fd19aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(uint32_t, 4, ui)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="291" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="291" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5205ecb92865933c50b5b42f2811e6bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(uint32_t, 3, ui)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="292" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="292" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6c11c8e56897897800107656f5b94849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(uint32_t, 2, ui)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="293" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="293" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a512f27db04d17342efe57f1d04f82978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(float, 4, f)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="297" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="297" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1adecd3e89fc616c54ba1128ad99964255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(float, 3, f)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="298" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="298" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aea21a96d1ac043f3a472f6741af40c38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(float, 2, f)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="299" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="299" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a26bf48ba9614731e2a6aec821e838528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(double, 4, d)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="300" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="300" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a137fb20782678637f3dcd6bc5a59c55f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(double, 3, d)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="301" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="301" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a57f5e75568b111b89da828ef83326651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareCoord</definition>
        <argsstring>(double, 2, d)</argsstring>
        <name>CU_DeclareCoord</name>
        <qualifiedname>castor::CU_DeclareCoord</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="302" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="302" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab6388d01a31a1557d773c85e04076451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(bool, 4, b)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="307" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="307" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab21692576f7f94eff0d5ab5ac37119c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(bool, 3, b)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="308" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="308" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afe58e3c4b8b149d7869bc8a2099b2bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(bool, 2, b)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="309" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="309" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3cdefb7fd3c514edae48920485e06579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(int8_t, 4, c)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>c</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="310" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="310" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2d6d0fd72bee2d1722dc4ec52f776b61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(int8_t, 3, c)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>c</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="311" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="311" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7e68fb82a3551a2addb93cd7c18744ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(int8_t, 2, c)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>int8_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>c</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="312" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="312" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a056b0bb146eb57a8b01d2473fbb97195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(uint8_t, 4, ub)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>ub</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="313" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="313" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a85cfde84577270b881e201bc11142800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(uint8_t, 3, ub)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>ub</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="314" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="314" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5997c9655c40f0ef365f2bf52020d100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(uint8_t, 2, ub)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>uint8_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>ub</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="315" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="315" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8c582bb6be4ab8ae3b9705ff7fc77399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(int16_t, 4, s)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>s</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="316" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="316" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a38ebef49d2e7a730515c0af630bcabac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(int16_t, 3, s)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>s</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="317" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="317" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad6cf83784568792ca448fe9f6b2f7921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(int16_t, 2, s)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>int16_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>s</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="318" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="318" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac3b12a571d9bee245f314ae399b7e86c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(uint16_t, 4, us)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>us</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="319" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="319" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6168befe8c87e0b68ecdec62407c7dd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(uint16_t, 3, us)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>us</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="320" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="320" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9c665c41a40e4d50415e650da89cb1dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(uint16_t, 2, us)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>uint16_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>us</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="321" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="321" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a544852e24ad3fb497480225c4ed73f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(int32_t, 4, i)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="322" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="322" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a67449b76bb6473ccf13e7a5920efb1b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(int32_t, 3, i)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="323" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="323" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a79f81d6ef54feea611797707b914ffbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(int32_t, 2, i)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="324" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="324" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1cc0232903e85a971b686b985afb73df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(uint32_t, 4, ui)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="325" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="325" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af9192e0e1a8487ed95cc3aff063a015d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(uint32_t, 3, ui)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="326" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="326" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a609a3a20070f44bcadfc5c455bd97d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(uint32_t, 2, ui)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="327" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="327" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3fd87a3dd37f09687a4c2c08a18c59bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(float, 4, f)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="331" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="331" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3b3e891526603865a680480f09c8461c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(float, 3, f)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="332" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="332" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1add00b176351ee7e5e07fb3dd83e9845c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(float, 2, f)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="333" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="333" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8916499091a2a2444b5a9910cb2ee056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(double, 4, d)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="334" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="334" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1acc2b04ec8610a84f3ce8dd3916196050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(double, 3, d)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="335" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="335" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa56dfc7cbfb99aeb824aac0f1d4f9e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareConstCoord</definition>
        <argsstring>(double, 2, d)</argsstring>
        <name>CU_DeclareConstCoord</name>
        <qualifiedname>castor::CU_DeclareConstCoord</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="336" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="336" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a449f0029ad5ac232a96141a8cae352aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(bool, 4, b)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="341" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="341" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af75f0ad34a20bc3bc0217bcd37215f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(bool, 3, b)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="342" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="342" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3daaffc019d5f11f08512d2de00b145e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(bool, 2, b)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="343" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="343" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a25e67ff0f3581db1561ee59598106d5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(int32_t, 4, i)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="344" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="344" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae0100e29e566953c480892f86eebc4d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(int32_t, 3, i)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="345" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="345" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0f8178536b6f653a0b5b9141431eb7e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(int32_t, 2, i)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="346" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="346" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad06fabedc95db60b6d19dec03ec021f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(uint32_t, 4, ui)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="347" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="347" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1abb8999d5a5e4649318c99c39d87bab7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(uint32_t, 3, ui)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="348" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="348" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6383696ffbb2d223b802bf62f7cfd9d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(uint32_t, 2, ui)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="349" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="349" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af04bfd8d143e5a4034c5e2955be7aac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(float, 4, f)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="350" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="350" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aadaebbd87d7bc6c88c07fc820e2f587b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(float, 3, f)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="351" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="351" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a387f857b2980e751218f49108ebfbfb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(float, 2, f)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="352" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="352" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af2e3b2f460a98988570cf0ce961b783a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(double, 4, d)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="353" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="353" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1b7abfa16a2f38190adfb4e17227bb25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(double, 3, d)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="354" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="354" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7cc89ae6576d03ce8ef1be2dcb27b685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSqMtx</definition>
        <argsstring>(double, 2, d)</argsstring>
        <name>CU_DeclareSqMtx</name>
        <qualifiedname>castor::CU_DeclareSqMtx</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="355" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="355" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a54681fbfc86b3247ec1ed3f6432904d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(bool, 2, 3, b)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="357" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="357" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad3dea8e7214b5de08a3a27723c162d4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(bool, 2, 4, b)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="358" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="358" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2e393b591c4fd00120055c8dd7e59fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(bool, 3, 2, b)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="359" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="359" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1abdc74b28504cb94bdce76434d050b252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(bool, 3, 4, b)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="360" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="360" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7f1bd5cae3149ccda5b77cfbd95d969b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(bool, 4, 2, b)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="361" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="361" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3bbde4e57e9c26f65db75077e0a45cff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(bool, 4, 3, b)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>b</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="362" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="362" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad4186c17b573e24efd91ed88d958e66e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(int32_t, 2, 3, i)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="363" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="363" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1adab397dafc96faa70ad081e5c65ef3d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(int32_t, 2, 4, i)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="364" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="364" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5e5504e803c6c100e6cef476a7a5d1a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(int32_t, 3, 2, i)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="365" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="365" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2d7a08b2f6ff57c8df37aabcb64ce791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(int32_t, 3, 4, i)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="366" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="366" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac39e311bd55d68f847949f71d5045d10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(int32_t, 4, 2, i)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="367" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="367" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3b740024154a41835b318f5eb0b75fdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(int32_t, 4, 3, i)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>i</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="368" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="368" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa6280ca7948e818070d2b67d90b65c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(uint32_t, 2, 3, ui)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="369" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="369" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aed4172cd3ec115c98f026eaaff83e9ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(uint32_t, 2, 4, ui)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="370" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="370" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0999c15066251445f0de350ad93749cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(uint32_t, 3, 2, ui)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="371" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="371" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a81f373ef614da87bf326375f26b82c4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(uint32_t, 3, 4, ui)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="372" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="372" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac5ed0f4a792a3b129518059407a61b90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(uint32_t, 4, 2, ui)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="373" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="373" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1abfc98862efb9ba77c34eb435d5fbbf7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(uint32_t, 4, 3, ui)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>ui</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="374" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="374" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1e52decb0997e3a7c7ab0e78f2b6cb6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(float, 2, 3, f)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="375" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="375" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7453ca3ccf5138e5d940cf08e86340ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(float, 2, 4, f)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="376" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="376" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a35138b9f958c61a5e346c33e034545a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(float, 3, 2, f)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="377" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="377" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa1b43427c0cfa899123a0bb45e924b74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(float, 3, 4, f)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="378" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="378" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a51ffdcdb32d1b578be2aa29791551ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(float, 4, 2, f)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="379" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="379" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a547445fbf9c02d9466de14f5d60b1241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(float, 4, 3, f)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="380" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="380" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a061417c27d1e212bc4180d0f021a1d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(double, 2, 3, d)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="381" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="381" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a42675c53f7ab50622bdbeeecf9a85236" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(double, 2, 4, d)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="382" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="382" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7dfd8949eaf3e18c5d378742562339c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(double, 3, 2, d)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="383" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="383" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a97401b6dea30ebc30b166119e5813735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(double, 3, 4, d)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="384" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="384" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a017ddba82c6c8f071afef661c5a38325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(double, 4, 2, d)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>2</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="385" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="385" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a97f13de27e3034b959b7f35f2b0554d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMtx</definition>
        <argsstring>(double, 4, 3, d)</argsstring>
        <name>CU_DeclareMtx</name>
        <qualifiedname>castor::CU_DeclareMtx</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>4</type>
        </param>
        <param>
          <type>3</type>
        </param>
        <param>
          <type>d</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="386" column="1" declfile="CastorUtils/Math/MathModule.hpp" declline="386" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8525c98f5f69c85b2bb5fa4eb00aef1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> Point3f</type>
        <definition>CU_API Point3f castor::operator*</definition>
        <argsstring>(Matrix4x4f const &amp;lhs, Point3f const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type>Matrix4x4f const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Point3f const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="388" column="16" declfile="CastorUtils/Math/MathModule.hpp" declline="388" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4110b2ad89922e6bc2bd1845caae95a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> Point3f</type>
        <definition>CU_API Point3f castor::operator*</definition>
        <argsstring>(Point3f const &amp;lhs, Matrix4x4f const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type>Point3f const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Matrix4x4f const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="389" column="16" declfile="CastorUtils/Math/MathModule.hpp" declline="389" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6f69d2b0930d9caa84a958274102909d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> Point4f</type>
        <definition>CU_API Point4f castor::operator*</definition>
        <argsstring>(Matrix4x4f const &amp;lhs, Point4f const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type>Matrix4x4f const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Point4f const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="390" column="16" declfile="CastorUtils/Math/MathModule.hpp" declline="390" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa0f01ba314df6476c517eeac9c10d00e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> Point4f</type>
        <definition>CU_API Point4f castor::operator*</definition>
        <argsstring>(Point4f const &amp;lhs, Matrix4x4f const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type>Point4f const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>Matrix4x4f const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/MathModule.hpp" line="391" column="16" declfile="CastorUtils/Math/MathModule.hpp" declline="391" declcolumn="16"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Design</header>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a6ceb342c6146442112aee702cfb1c14a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ResT</type>
          </param>
          <param>
            <type>typename KeyT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1ac623881246e92c1d187a3a44b3e011f6" kindref="member">UniquePtr</ref>&lt; <ref refid="d0/d37/a08231" kindref="compound">ResourceT</ref>&lt; ResT, KeyT &gt; &gt;</type>
        <definition>using castor::ResourcePtrT =  UniquePtr&lt; ResourceT&lt; ResT, KeyT &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ResourcePtrT</name>
        <qualifiedname>castor::ResourcePtrT</qualifiedname>
        <briefdescription>
<para>Pointeur sur une vue sur une ressource. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DesignModule.hpp" line="264" column="1" bodyfile="CastorUtils/Design/DesignModule.hpp" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a9443dd732b9652caef94dcebd17df78b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ResT</type>
          </param>
          <param>
            <type>typename KeyT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d0/d37/a08231" kindref="compound">ResourceT</ref>&lt; ResT, KeyT &gt; *</type>
        <definition>using castor::ResourceObsT =  ResourceT&lt; ResT, KeyT &gt; *</definition>
        <argsstring></argsstring>
        <name>ResourceObsT</name>
        <qualifiedname>castor::ResourceObsT</qualifiedname>
        <briefdescription>
<para>Pointeur sur une vue sur une ressource. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DesignModule.hpp" line="272" column="1" bodyfile="CastorUtils/Design/DesignModule.hpp" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ac45fcd5773ba29795665d04ce89f900e" prot="public" static="no">
        <type><ref refid="d5/d3c/a08223" kindref="compound">NamedBaseT</ref>&lt; <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &gt;</type>
        <definition>using castor::Named =  NamedBaseT&lt; String &gt;</definition>
        <argsstring></argsstring>
        <name>Named</name>
        <qualifiedname>castor::Named</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DesignModule.hpp" line="530" column="1" bodyfile="CastorUtils/Design/DesignModule.hpp" bodystart="530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a84edfcb99cc211a68760f2b7b788867e" prot="public" static="no">
        <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; uint32_t &gt;</type>
        <definition>using castor::DynamicBitset =  DynamicBitsetT&lt; uint32_t &gt;</definition>
        <argsstring></argsstring>
        <name>DynamicBitset</name>
        <qualifiedname>castor::DynamicBitset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DesignModule.hpp" line="531" column="1" bodyfile="CastorUtils/Design/DesignModule.hpp" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ae9d3fa7fcdf1d831572a45f9c1f131a9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/def/a08159" kindref="compound">ChangeTrackedT</ref>&lt; ValueT, bool &gt;</type>
        <definition>using castor::ChangeTracked =  ChangeTrackedT&lt; ValueT, bool &gt;</definition>
        <argsstring></argsstring>
        <name>ChangeTracked</name>
        <qualifiedname>castor::ChangeTracked</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DesignModule.hpp" line="534" column="1" bodyfile="CastorUtils/Design/DesignModule.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1af3d491d6af1d18086d4b7765a09779e3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/def/a08159" kindref="compound">ChangeTrackedT</ref>&lt; ValueT, std::atomic_bool &gt;</type>
        <definition>using castor::AtomicChangeTracked =  ChangeTrackedT&lt; ValueT, std::atomic_bool &gt;</definition>
        <argsstring></argsstring>
        <name>AtomicChangeTracked</name>
        <qualifiedname>castor::AtomicChangeTracked</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DesignModule.hpp" line="536" column="1" bodyfile="CastorUtils/Design/DesignModule.hpp" bodystart="536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a04236f6601235ad5003d429f544c5e0e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d4c/a08211" kindref="compound">GroupChangeTrackedT</ref>&lt; ValueT, bool &gt;</type>
        <definition>using castor::GroupChangeTracked =  GroupChangeTrackedT&lt; ValueT, bool &gt;</definition>
        <argsstring></argsstring>
        <name>GroupChangeTracked</name>
        <qualifiedname>castor::GroupChangeTracked</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DesignModule.hpp" line="539" column="1" bodyfile="CastorUtils/Design/DesignModule.hpp" bodystart="539" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ac3f6d2ca50f484925164c6f2a13c97e8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d4c/a08211" kindref="compound">GroupChangeTrackedT</ref>&lt; ValueT, std::atomic_bool &gt;</type>
        <definition>using castor::AtomicGroupChangeTracked =  GroupChangeTrackedT&lt; ValueT, std::atomic_bool &gt;</definition>
        <argsstring></argsstring>
        <name>AtomicGroupChangeTracked</name>
        <qualifiedname>castor::AtomicGroupChangeTracked</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DesignModule.hpp" line="541" column="1" bodyfile="CastorUtils/Design/DesignModule.hpp" bodystart="541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a8fefd3145115c45e47386fc7508bc563" prot="public" static="no">
        <type><ref refid="d2/dd2/a02279_1a171f0ae06cbbe361277eaab9ed92ec74" kindref="member">castor::Function</ref>&lt; void() &gt;</type>
        <definition>using castor::OnCacheChangedFunction =  castor::Function&lt; void() &gt;</definition>
        <argsstring></argsstring>
        <name>OnCacheChangedFunction</name>
        <qualifiedname>castor::OnCacheChangedFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DesignModule.hpp" line="559" column="1" bodyfile="CastorUtils/Design/DesignModule.hpp" bodystart="559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aa9c68a167eb8e5e8c937637fc69b4f67" prot="public" static="no">
        <type><ref refid="dc/d79/a08267" kindref="compound">SignalT</ref>&lt; <ref refid="d2/dd2/a02279_1a8fefd3145115c45e47386fc7508bc563" kindref="member">OnCacheChangedFunction</ref> &gt;</type>
        <definition>using castor::OnCacheChanged =  SignalT&lt; OnCacheChangedFunction &gt;</definition>
        <argsstring></argsstring>
        <name>OnCacheChanged</name>
        <qualifiedname>castor::OnCacheChanged</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DesignModule.hpp" line="560" column="1" bodyfile="CastorUtils/Design/DesignModule.hpp" bodystart="560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a02a8dde74f4a41880af594e1444caf71" prot="public" static="no">
        <type><ref refid="d4/ddb/a08183" kindref="compound">ConnectionT</ref>&lt; <ref refid="d2/dd2/a02279_1aa9c68a167eb8e5e8c937637fc69b4f67" kindref="member">OnCacheChanged</ref> &gt;</type>
        <definition>using castor::OnCacheChangedConnection =  ConnectionT&lt; OnCacheChanged &gt;</definition>
        <argsstring></argsstring>
        <name>OnCacheChangedConnection</name>
        <qualifiedname>castor::OnCacheChangedConnection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DesignModule.hpp" line="561" column="1" bodyfile="CastorUtils/Design/DesignModule.hpp" bodystart="561" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1acf9c83aa8a2c9341a6d69295fe8a53dd" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ResT</type>
          </param>
          <param>
            <type>typename KeyT</type>
          </param>
          <param>
            <type>typename TraitsT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1ac623881246e92c1d187a3a44b3e011f6" kindref="member">UniquePtr</ref>&lt; <ref refid="d7/df3/a08259" kindref="compound">ResourceCacheT</ref>&lt; ResT, KeyT, TraitsT &gt; &gt;</type>
        <definition>using castor::ResourceCachePtrT =  UniquePtr&lt; ResourceCacheT&lt; ResT, KeyT, TraitsT &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ResourceCachePtrT</name>
        <qualifiedname>castor::ResourceCachePtrT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DesignModule.hpp" line="564" column="1" bodyfile="CastorUtils/Design/DesignModule.hpp" bodystart="564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a72aa8f455a1b23e0dc3e3be889cddb00" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::isChangeTrackedT</definition>
        <argsstring></argsstring>
        <name>isChangeTrackedT</name>
        <qualifiedname>castor::isChangeTrackedT</qualifiedname>
        <initializer>= <ref refid="da/dd1/a08287" kindref="compound">IsChangeTrackedT</ref>&lt; T &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DesignModule.hpp" line="554" column="30" bodyfile="CastorUtils/Design/DesignModule.hpp" bodystart="554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a98770ac589852c830df4a5ea13f6ebe3" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::isGroupChangeTrackedT</definition>
        <argsstring></argsstring>
        <name>isGroupChangeTrackedT</name>
        <qualifiedname>castor::isGroupChangeTrackedT</qualifiedname>
        <initializer>= <ref refid="db/dff/a08291" kindref="compound">IsGroupChangeTrackedT</ref>&lt; T &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DesignModule.hpp" line="557" column="30" bodyfile="CastorUtils/Design/DesignModule.hpp" bodystart="557" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6355d2d8348ef2005213e49f5e858816" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ResT</type>
          </param>
          <param>
            <type>typename KeyT</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>ParametersT</declname>
            <defname>ParametersT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a6ceb342c6146442112aee702cfb1c14a" kindref="member">ResourcePtrT</ref>&lt; ResT, KeyT &gt;</type>
        <definition>ResourcePtrT&lt; ResT, KeyT &gt; castor::makeResource</definition>
        <argsstring>(ParametersT &amp;&amp;... params)</argsstring>
        <name>makeResource</name>
        <qualifiedname>castor::makeResource</qualifiedname>
        <param>
          <type>ParametersT &amp;&amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fonction d&apos;aide à la création de ressource. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/Resource.hpp" line="171" column="21" bodyfile="CastorUtils/Design/Resource.hpp" bodystart="171" bodyend="174" declfile="CastorUtils/Design/DesignModule.hpp" declline="380" declcolumn="14"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>STL typedefs</header>
      <memberdef kind="typedef" id="d2/dd2/a02279_1acffb2acc2d0b9ea79130bf6c63ac7cf7" prot="public" static="no">
        <type>std::basic_regex&lt; <ref refid="d2/dd2/a02279_1a98169622bc976df3189194c2b35fbf60" kindref="member">xchar</ref> &gt;</type>
        <definition>using castor::Regex =  std::basic_regex&lt; xchar &gt;</definition>
        <argsstring></argsstring>
        <name>Regex</name>
        <qualifiedname>castor::Regex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="175" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a8e7fa0224cb6500dae96fa72c6cb2d9b" prot="public" static="no">
        <type>std::regex_iterator&lt; String::const_iterator &gt;</type>
        <definition>using castor::RegexIterator =  std::regex_iterator&lt; String::const_iterator &gt;</definition>
        <argsstring></argsstring>
        <name>RegexIterator</name>
        <qualifiedname>castor::RegexIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="176" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a5bc11a2a7d3414e878fd681c530f49af" prot="public" static="no">
        <type>std::match_results&lt; String::const_iterator &gt;</type>
        <definition>using castor::MatchResults =  std::match_results&lt; String::const_iterator &gt;</definition>
        <argsstring></argsstring>
        <name>MatchResults</name>
        <qualifiedname>castor::MatchResults</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="177" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="177" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Parsers holders</header>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aa08facceac53d1149fecf7d7d6b739bf" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using castor::SectionId =  uint32_t</definition>
        <argsstring></argsstring>
        <name>SectionId</name>
        <qualifiedname>castor::SectionId</qualifiedname>
        <briefdescription>
<para>Le type d&apos;un ID de section. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="189" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a0cfae048124eacb762a5f80847f7e57e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>ParameterType</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
          <param>
            <type>typename ParserValueHelperT</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>typename <ref refid="de/db2/a08403" kindref="compound">ParserParameterHelper</ref>&lt; Type, ParserValueHelperT &gt;::ValueType</type>
        <definition>using castor::ParserParameterValueType =  typename ParserParameterHelper&lt; Type, ParserValueHelperT &gt;::ValueType</definition>
        <argsstring></argsstring>
        <name>ParserParameterValueType</name>
        <qualifiedname>castor::ParserParameterValueType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="265" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ae025149db64e1fa986a71e2460c50263" prot="public" static="no">
        <type><ref refid="d2/dd2/a02279_1a74ebc3ab545b69d0f3ec5b14af360c36" kindref="member">castor::SharedPtr</ref>&lt; <ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> &gt;</type>
        <definition>using castor::ParserParameterBaseSPtr =  castor::SharedPtr&lt; ParserParameterBase &gt;</definition>
        <argsstring></argsstring>
        <name>ParserParameterBaseSPtr</name>
        <qualifiedname>castor::ParserParameterBaseSPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="303" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a803dd67bd01170a159f03b11db5b3fc7" prot="public" static="no">
        <type><ref refid="d2/dd2/a02279_1a171f0ae06cbbe361277eaab9ed92ec74" kindref="member">castor::Function</ref>&lt; bool(<ref refid="d0/dfa/a08383" kindref="compound">FileParserContext</ref> &amp;, void *, ParserParameterArray const &amp;) &gt;</type>
        <definition>using castor::ParserFunction =  castor::Function&lt; bool( FileParserContext &amp;, void *, ParserParameterArray const &amp; ) &gt;</definition>
        <argsstring></argsstring>
        <name>ParserFunction</name>
        <qualifiedname>castor::ParserFunction</qualifiedname>
        <briefdescription>
<para>Définition d&apos;une fonction d&apos;analyse. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parser</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;analyseur de fichier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">block</parametername>
</parameternamelist>
<parameterdescription>
<para>Le contexte de bloc, s&apos;il y en a un. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Les paramètres contenus dans la ligne. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si une accolade doit être ouverte à la ligne suivante. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="320" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a52fbce1414ce5cf8e14e7071d9d00766" prot="public" static="no">
        <type>bool(*)(<ref refid="d0/dfa/a08383" kindref="compound">FileParserContext</ref> &amp;, void *, ParserParameterArray const &amp;)</type>
        <definition>using castor::RawParserFunction =  bool( * )( FileParserContext &amp;, void *, ParserParameterArray const &amp; )</definition>
        <argsstring></argsstring>
        <name>RawParserFunction</name>
        <qualifiedname>castor::RawParserFunction</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="321" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1abb19bdc47a3d0605190cebd977e8b5e9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename BlockContextT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a171f0ae06cbbe361277eaab9ed92ec74" kindref="member">castor::Function</ref>&lt; bool(<ref refid="d0/dfa/a08383" kindref="compound">FileParserContext</ref> &amp;, BlockContextT *, ParserParameterArray const &amp;) &gt;</type>
        <definition>using castor::ParserFunctionT =  castor::Function&lt; bool( FileParserContext &amp;, BlockContextT *, ParserParameterArray const &amp; ) &gt;</definition>
        <argsstring></argsstring>
        <name>ParserFunctionT</name>
        <qualifiedname>castor::ParserFunctionT</qualifiedname>
        <briefdescription>
<para>Définition d&apos;une fonction d&apos;analyse. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parser</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;analyseur de fichier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">block</parametername>
</parameternamelist>
<parameterdescription>
<para>Le contexte de bloc, s&apos;il y en a un. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Les paramètres contenus dans la ligne. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si une accolade doit être ouverte à la ligne suivante. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="337" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ae312728215b250f3734571040655ed2a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename BlockContextT</type>
          </param>
        </templateparamlist>
        <type>bool(*)(<ref refid="d0/dfa/a08383" kindref="compound">FileParserContext</ref> &amp;, BlockContextT *, ParserParameterArray const &amp;)</type>
        <definition>using castor::RawParserFunctionT =  bool( * )( FileParserContext &amp;, BlockContextT *, ParserParameterArray const &amp; )</definition>
        <argsstring></argsstring>
        <name>RawParserFunctionT</name>
        <qualifiedname>castor::RawParserFunctionT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="339" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a3d83773303379ca45797dc492752fae9" prot="public" static="no">
        <type><ref refid="d2/dd2/a02279_1a93b53452a3c421817a14b649ccec1fb7" kindref="member">Map</ref>&lt; <ref refid="d2/dd2/a02279_1aa08facceac53d1149fecf7d7d6b739bf" kindref="member">SectionId</ref>, <ref refid="de/d5d/a08415" kindref="compound">ParserFunctionAndParams</ref> &gt;</type>
        <definition>using castor::SectionAttributeParsers =  Map&lt; SectionId, ParserFunctionAndParams &gt;</definition>
        <argsstring></argsstring>
        <name>SectionAttributeParsers</name>
        <qualifiedname>castor::SectionAttributeParsers</qualifiedname>
        <briefdescription>
<para>Les parsers triés par section. Sera utilisé pour stocker les fonctions associées à un unique token. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="375" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a7138ba41c2c2c4ced36cacefe5eb2c33" prot="public" static="no">
        <type><ref refid="d2/dd2/a02279_1af776079ca1d2ee2d1b993f2d34011159" kindref="member">StringMap</ref>&lt; <ref refid="d2/dd2/a02279_1a3d83773303379ca45797dc492752fae9" kindref="member">SectionAttributeParsers</ref> &gt;</type>
        <definition>using castor::AttributeParsers =  StringMap&lt; SectionAttributeParsers &gt;</definition>
        <argsstring></argsstring>
        <name>AttributeParsers</name>
        <qualifiedname>castor::AttributeParsers</qualifiedname>
        <briefdescription>
<para>Les parsers triés par nom de token. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="384" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a60b7ae265f5b3f1c88303e2abbbc80ed" prot="public" static="no">
        <type><ref refid="d2/dd2/a02279_1a171f0ae06cbbe361277eaab9ed92ec74" kindref="member">castor::Function</ref>&lt; void *(<ref refid="d0/dfa/a08383" kindref="compound">FileParserContext</ref> &amp;) &gt;</type>
        <definition>using castor::UserContextCreator =  castor::Function&lt; void * ( FileParserContext &amp; ) &gt;</definition>
        <argsstring></argsstring>
        <name>UserContextCreator</name>
        <qualifiedname>castor::UserContextCreator</qualifiedname>
        <briefdescription>
<para>Fonction de création d&apos;un contexte défini par l&apos;utilisateur. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="391" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a46c30374b4c5a10111c56cf42877f648" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename BlockContextT</type>
          </param>
        </templateparamlist>
        <type>bool(*)(<ref refid="d0/dfa/a08383" kindref="compound">FileParserContext</ref> &amp;, BlockContextT *, ParserParameterArray const &amp;)</type>
        <definition>using castor::BlockParserFunctionT =  bool( * )( FileParserContext &amp;, BlockContextT *, ParserParameterArray const &amp; )</definition>
        <argsstring></argsstring>
        <name>BlockParserFunctionT</name>
        <qualifiedname>castor::BlockParserFunctionT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="489" column="1" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="489" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1ac039c2af81b36406cf8e6e61fdcbf250" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="d2/dd2/a02279_1aa08facceac53d1149fecf7d7d6b739bf" kindref="member">SectionId</ref></type>
        <definition>constexpr SectionId castor::PreviousSection</definition>
        <argsstring></argsstring>
        <name>PreviousSection</name>
        <qualifiedname>castor::PreviousSection</qualifiedname>
        <initializer>= ( (<ref refid="d2/dd2/a02279_1aa08facceac53d1149fecf7d7d6b739bf" kindref="member">castor::SectionId</ref>(  &apos;P&apos;  ) &lt;&lt; 24 ) | ( <ref refid="d2/dd2/a02279_1aa08facceac53d1149fecf7d7d6b739bf" kindref="member">castor::SectionId</ref>(  &apos;R&apos;  ) &lt;&lt; 16 ) | ( <ref refid="d2/dd2/a02279_1aa08facceac53d1149fecf7d7d6b739bf" kindref="member">castor::SectionId</ref>(  &apos;E&apos;  ) &lt;&lt; 8 ) | ( <ref refid="d2/dd2/a02279_1aa08facceac53d1149fecf7d7d6b739bf" kindref="member">castor::SectionId</ref>(  &apos;V&apos;  ) &lt;&lt; 0 ) )</initializer>
        <briefdescription>
<para>Indique que la prochaine section d&apos;un parser est la précédente. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="198" column="28" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="198" bodyend="-1"/>
        <referencedby refid="d9/dba/a02278_1a537381975332d1a13c1457dcb6aba1f5" compoundref="db/dce/a01529" startline="117" endline="188">castor3d::CU_DeclareAttributeParser</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1ac48665c3cde3f6797b95563c7af6308e" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>ParameterType</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
          <param>
            <type>typename ParserValueHelperT</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222" kindref="member">ParameterType</ref> constexpr</type>
        <definition>ParameterType constexpr castor::ParserParameterParamType</definition>
        <argsstring></argsstring>
        <name>ParserParameterParamType</name>
        <qualifiedname>castor::ParserParameterParamType</qualifiedname>
        <initializer>= <ref refid="de/db2/a08403" kindref="compound">ParserParameterHelper</ref>&lt; Type, ParserValueHelperT &gt;::ParamType</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="268" column="32" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a1eceb832ad748cd8c3dc80525ebac874" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>ParameterType</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
          <param>
            <type>typename ParserValueHelperT</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a7fc5aca9eb8d35e69abfe9df07e365e3" kindref="member">StringView</ref> constexpr</type>
        <definition>StringView constexpr castor::ParserParameterStringType</definition>
        <argsstring></argsstring>
        <name>ParserParameterStringType</name>
        <qualifiedname>castor::ParserParameterStringType</qualifiedname>
        <initializer>= <ref refid="de/db2/a08403" kindref="compound">ParserParameterHelper</ref>&lt; Type, ParserValueHelperT &gt;::StringType</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="271" column="29" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a760d119a60956774cbdcad21ce82d985" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>ParameterType</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::hasBaseParameterTypeV</definition>
        <argsstring></argsstring>
        <name>hasBaseParameterTypeV</name>
        <qualifiedname>castor::hasBaseParameterTypeV</qualifiedname>
        <initializer>= <ref refid="d6/db9/a08407" kindref="compound">HasBaseParameterType</ref>&lt; Type &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="284" column="23" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7aafd875905e2a174b21c4f635caff0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSmartPtr</definition>
        <argsstring>(castor, FileParserContext, CU_API)</argsstring>
        <name>CU_DeclareSmartPtr</name>
        <qualifiedname>castor::CU_DeclareSmartPtr</qualifiedname>
        <param>
          <type>castor</type>
        </param>
        <param>
          <type><ref refid="d0/dfa/a08383" kindref="compound">FileParserContext</ref></type>
        </param>
        <param>
          <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="301" column="1" declfile="CastorUtils/FileParser/FileParserModule.hpp" declline="301" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9c9c21efdc662c5d983eca75bcced8e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareVector</definition>
        <argsstring>(ParserParameterBaseSPtr, ParserParameter)</argsstring>
        <name>CU_DeclareVector</name>
        <qualifiedname>castor::CU_DeclareVector</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ae025149db64e1fa986a71e2460c50263" kindref="member">ParserParameterBaseSPtr</ref></type>
        </param>
        <param>
          <type><ref refid="d3/d9a/a08387" kindref="compound">ParserParameter</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="305" column="1" declfile="CastorUtils/FileParser/FileParserModule.hpp" declline="305" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a53e2d088a69d3acb6583a12123f4a2f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::addParser</definition>
        <argsstring>(AttributeParsers &amp;parsers, uint32_t oldSection, uint32_t newSection, String const &amp;name, ParserFunction function, ParserParameterArray params=ParserParameterArray{})</argsstring>
        <name>addParser</name>
        <qualifiedname>castor::addParser</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a7138ba41c2c2c4ced36cacefe5eb2c33" kindref="member">AttributeParsers</ref> &amp;</type>
          <declname>parsers</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>oldSection</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>newSection</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a803dd67bd01170a159f03b11db5b3fc7" kindref="member">ParserFunction</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>ParserParameterArray</type>
          <declname>params</declname>
          <defval>ParserParameterArray{}</defval>
        </param>
        <briefdescription>
<para>Ajoute une fonction d&apos;analyse à la liste. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">parsers</parametername>
</parameternamelist>
<parameterdescription>
<para>Reçoit le parser ajouté. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oldSection</parametername>
</parameternamelist>
<parameterdescription>
<para>La section sur laquelle la fonction est appliquée. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">newSection</parametername>
</parameternamelist>
<parameterdescription>
<para>La section résultant de l&apos;application de la fonction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Le nom de la fonction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">function</parametername>
</parameternamelist>
<parameterdescription>
<para>La fonction d&apos;analyse. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Les paramètres attendus. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="440" column="13" declfile="CastorUtils/FileParser/FileParserModule.hpp" declline="440" declcolumn="13"/>
        <referencedby refid="d9/dba/a02278_1a537381975332d1a13c1457dcb6aba1f5" compoundref="db/dce/a01529" startline="117" endline="188">castor3d::CU_DeclareAttributeParser</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae60396eb94803501473856b1d3dbfa3a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void castor::addParser</definition>
        <argsstring>(AttributeParsers &amp;parsers, uint32_t section, String const &amp;name, ParserFunction function, ParserParameterArray params=ParserParameterArray{})</argsstring>
        <name>addParser</name>
        <qualifiedname>castor::addParser</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a7138ba41c2c2c4ced36cacefe5eb2c33" kindref="member">AttributeParsers</ref> &amp;</type>
          <declname>parsers</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>section</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a803dd67bd01170a159f03b11db5b3fc7" kindref="member">ParserFunction</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>ParserParameterArray</type>
          <declname>params</declname>
          <defval>ParserParameterArray{}</defval>
        </param>
        <briefdescription>
<para>Ajoute une fonction d&apos;analyse à la liste. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">parsers</parametername>
</parameternamelist>
<parameterdescription>
<para>Reçoit le parser ajouté. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">section</parametername>
</parameternamelist>
<parameterdescription>
<para>La section. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Le nom de la fonction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">function</parametername>
</parameternamelist>
<parameterdescription>
<para>La fonction d&apos;analyse. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">params</parametername>
</parameternamelist>
<parameterdescription>
<para>Les paramètres attendus. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="474" column="13" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="474" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aefd2eb11cdc330613b56c9bb63b3e22b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SectionT</type>
          </param>
          <param>
            <type>typename BlockContextT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::addParserT</definition>
        <argsstring>(AttributeParsers &amp;parsers, SectionT section, String const &amp;name, BlockParserFunctionT&lt; BlockContextT &gt; function, ParserParameterArray params=ParserParameterArray{})</argsstring>
        <name>addParserT</name>
        <qualifiedname>castor::addParserT</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a7138ba41c2c2c4ced36cacefe5eb2c33" kindref="member">AttributeParsers</ref> &amp;</type>
          <declname>parsers</declname>
        </param>
        <param>
          <type>SectionT</type>
          <declname>section</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a46c30374b4c5a10111c56cf42877f648" kindref="member">BlockParserFunctionT</ref>&lt; BlockContextT &gt;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>ParserParameterArray</type>
          <declname>params</declname>
          <defval>ParserParameterArray{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="492" column="13" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="492" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1acdbd88e8a3e9027d2904a716134994fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SectionT</type>
          </param>
          <param>
            <type>typename SectionU</type>
          </param>
          <param>
            <type>typename BlockContextT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::addParserT</definition>
        <argsstring>(AttributeParsers &amp;parsers, SectionT oldSection, SectionU newSection, String const &amp;name, BlockParserFunctionT&lt; BlockContextT &gt; function, ParserParameterArray params=ParserParameterArray{})</argsstring>
        <name>addParserT</name>
        <qualifiedname>castor::addParserT</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a7138ba41c2c2c4ced36cacefe5eb2c33" kindref="member">AttributeParsers</ref> &amp;</type>
          <declname>parsers</declname>
        </param>
        <param>
          <type>SectionT</type>
          <declname>oldSection</declname>
        </param>
        <param>
          <type>SectionU</type>
          <declname>newSection</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a46c30374b4c5a10111c56cf42877f648" kindref="member">BlockParserFunctionT</ref>&lt; BlockContextT &gt;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>ParserParameterArray</type>
          <declname>params</declname>
          <defval>ParserParameterArray{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserModule.hpp" line="507" column="13" bodyfile="CastorUtils/FileParser/FileParserModule.hpp" bodystart="507" bodyend="521"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Log</header>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a4073aba22fdf3f40d36bc88f2890cb52" prot="public" static="no">
        <type><ref refid="d2/dd2/a02279_1a74f230fe112208da79caa0e9ddab4090" kindref="member">Deque</ref>&lt; <ref refid="d1/d1f/a09095" kindref="compound">Message</ref> &gt;</type>
        <definition>using castor::MessageQueue =  Deque&lt; Message &gt;</definition>
        <argsstring></argsstring>
        <name>MessageQueue</name>
        <qualifiedname>castor::MessageQueue</qualifiedname>
        <briefdescription>
<para>The message queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Log/LogModule.hpp" line="43" column="1" bodyfile="CastorUtils/Log/LogModule.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a5645bcfec67b15512d704592da29ac2d" prot="public" static="no">
        <type><ref refid="d2/dd2/a02279_1a171f0ae06cbbe361277eaab9ed92ec74" kindref="member">castor::Function</ref>&lt; void(<ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref> const &amp;text, <ref refid="d2/dd2/a02279_1a2ca663b75d75cc82d9481b0c87b1cb59" kindref="member">LogType</ref> type, bool newLine) &gt;</type>
        <definition>using castor::LogCallback =  castor::Function&lt; void( MbString const &amp; text, LogType type, bool newLine ) &gt;</definition>
        <argsstring></argsstring>
        <name>LogCallback</name>
        <qualifiedname>castor::LogCallback</qualifiedname>
        <briefdescription>
<para>Fonction de callback de log. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">text</parametername>
</parameternamelist>
<parameterdescription>
<para>Le texte écrit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>Le type de log. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">newLine</parametername>
</parameternamelist>
<parameterdescription>
<para>Dit si on ajoute le caractère de fin de ligne. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Log/LogModule.hpp" line="100" column="1" bodyfile="CastorUtils/Log/LogModule.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a7ad33750488d04aeaaeff625c01195ec" prot="public" static="no">
        <type><ref refid="d2/dd2/a02279_1a1703e7c907eb1f09166a4dfb4d39985b" kindref="member">castor::RawUniquePtr</ref>&lt; <ref refid="d9/d93/a09063" kindref="compound">LoggerInstance</ref> &gt;</type>
        <definition>using castor::LoggerInstancePtr =  castor::RawUniquePtr&lt; LoggerInstance &gt;</definition>
        <argsstring></argsstring>
        <name>LoggerInstancePtr</name>
        <qualifiedname>castor::LoggerInstancePtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Log/LogModule.hpp" line="102" column="1" bodyfile="CastorUtils/Log/LogModule.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Miscellaneous</header>
      <memberdef kind="variable" id="d2/dd2/a02279_1a7c18e4c3fddbb7d19d9ec46d342b4246" prot="public" static="yes" mutable="no">
        <type>const <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>const String castor::cuEmptyString</definition>
        <argsstring></argsstring>
        <name>cuEmptyString</name>
        <qualifiedname>castor::cuEmptyString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/MiscellaneousModule.hpp" line="93" column="21" bodyfile="CastorUtils/Miscellaneous/MiscellaneousModule.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0aecfdef95acb81f3a038ed4ef60ff27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSmartPtr</definition>
        <argsstring>(castor, DynamicLibrary, CU_API)</argsstring>
        <name>CU_DeclareSmartPtr</name>
        <qualifiedname>castor::CU_DeclareSmartPtr</qualifiedname>
        <param>
          <type>castor</type>
        </param>
        <param>
          <type><ref refid="d7/d44/a09387" kindref="compound">DynamicLibrary</ref></type>
        </param>
        <param>
          <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/MiscellaneousModule.hpp" line="95" column="1" declfile="CastorUtils/Miscellaneous/MiscellaneousModule.hpp" declline="95" declcolumn="1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1a39b19e1c014637eceeafa72a39822b61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BlockTypeT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(DynamicBitsetT&lt; BlockTypeT &gt; const &amp;lhs, DynamicBitsetT&lt; BlockTypeT &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérateurs logiques. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DynamicBitset.hpp" line="104" column="13" declfile="CastorUtils/Design/DynamicBitset.hpp" declline="104" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af8c789306da6f8b4cc5bb98e429a9f03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BlockTypeT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(DynamicBitsetT&lt; BlockTypeT &gt; const &amp;lhs, DynamicBitsetT&lt; BlockTypeT &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DynamicBitset.hpp" line="107" column="13" declfile="CastorUtils/Design/DynamicBitset.hpp" declline="107" declcolumn="13"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1af2971fd9d6e6fde43bb19917b25ce2dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BlockTypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;</type>
        <definition>DynamicBitsetT&lt; BlockTypeT &gt; castor::operator&lt;&lt;</definition>
        <argsstring>(DynamicBitsetT&lt; BlockTypeT &gt; const &amp;lhs, int rhs)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérations bit à bit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DynamicBitset.hpp" line="107" column="13" declfile="CastorUtils/Design/DynamicBitset.hpp" declline="107" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6bed1e7916b4d4c2b3988a7465943dac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BlockTypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;</type>
        <definition>DynamicBitsetT&lt; BlockTypeT &gt; castor::operator&gt;&gt;</definition>
        <argsstring>(DynamicBitsetT&lt; BlockTypeT &gt; const &amp;lhs, int rhs)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>castor::operator&gt;&gt;</qualifiedname>
        <param>
          <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DynamicBitset.hpp" line="123" column="23" declfile="CastorUtils/Design/DynamicBitset.hpp" declline="123" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af99de992353a29f89b62bb9209bcff5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BlockTypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;</type>
        <definition>DynamicBitsetT&lt; BlockTypeT &gt; castor::operator&amp;</definition>
        <argsstring>(DynamicBitsetT&lt; BlockTypeT &gt; const &amp;lhs, DynamicBitsetT&lt; BlockTypeT &gt; const &amp;rhs)</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>castor::operator&amp;</qualifiedname>
        <param>
          <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DynamicBitset.hpp" line="126" column="23" declfile="CastorUtils/Design/DynamicBitset.hpp" declline="126" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aff9c99c3b751a04ae9049d372d0d613f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BlockTypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;</type>
        <definition>DynamicBitsetT&lt; BlockTypeT &gt; castor::operator|</definition>
        <argsstring>(DynamicBitsetT&lt; BlockTypeT &gt; const &amp;lhs, DynamicBitsetT&lt; BlockTypeT &gt; const &amp;rhs)</argsstring>
        <name>operator|</name>
        <qualifiedname>castor::operator|</qualifiedname>
        <param>
          <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DynamicBitset.hpp" line="129" column="23" declfile="CastorUtils/Design/DynamicBitset.hpp" declline="129" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afb73440957b9a3b45d05d3e8d8712afd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BlockTypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;</type>
        <definition>DynamicBitsetT&lt; BlockTypeT &gt; castor::operator^</definition>
        <argsstring>(DynamicBitsetT&lt; BlockTypeT &gt; const &amp;lhs, DynamicBitsetT&lt; BlockTypeT &gt; const &amp;rhs)</argsstring>
        <name>operator^</name>
        <qualifiedname>castor::operator^</qualifiedname>
        <param>
          <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DynamicBitset.hpp" line="132" column="23" declfile="CastorUtils/Design/DynamicBitset.hpp" declline="132" declcolumn="23"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1a1d2c2dde18cd0b4be904846acbeebf30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BlockTypeT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(typename DynamicBitsetT&lt; BlockTypeT &gt;::Bit const &amp;lhs, typename DynamicBitsetT&lt; BlockTypeT &gt;::Bit const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type>typename <ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;::Bit const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>typename <ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;::Bit const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérateurs logiques. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DynamicBitset.hpp" line="190" column="13" declfile="CastorUtils/Design/DynamicBitset.hpp" declline="190" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2e2fa3e1d4729a0f42f56773e4d8cadc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BlockTypeT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(typename DynamicBitsetT&lt; BlockTypeT &gt;::Bit const &amp;lhs, typename DynamicBitsetT&lt; BlockTypeT &gt;::Bit const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type>typename <ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;::Bit const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>typename <ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;::Bit const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DynamicBitset.hpp" line="193" column="13" declfile="CastorUtils/Design/DynamicBitset.hpp" declline="193" declcolumn="13"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1ace13f997c4215450f1f2fdf774c5dfec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BlockTypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;::Bit</type>
        <definition>DynamicBitsetT&lt; BlockTypeT &gt;::Bit castor::operator|</definition>
        <argsstring>(typename DynamicBitsetT&lt; BlockTypeT &gt;::Bit const &amp;lhs, bool rhs)</argsstring>
        <name>operator|</name>
        <qualifiedname>castor::operator|</qualifiedname>
        <param>
          <type>typename <ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;::Bit const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérations bit à bit. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DynamicBitset.hpp" line="206" column="31" declfile="CastorUtils/Design/DynamicBitset.hpp" declline="206" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5fce01a539a842e647cda8e8fd3eee7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BlockTypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;::Bit</type>
        <definition>DynamicBitsetT&lt; BlockTypeT &gt;::Bit castor::operator&amp;</definition>
        <argsstring>(typename DynamicBitsetT&lt; BlockTypeT &gt;::Bit const &amp;lhs, bool rhs)</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>castor::operator&amp;</qualifiedname>
        <param>
          <type>typename <ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;::Bit const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DynamicBitset.hpp" line="209" column="31" declfile="CastorUtils/Design/DynamicBitset.hpp" declline="209" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae2553aa502e570b0a49988cd840b35c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BlockTypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;::Bit</type>
        <definition>DynamicBitsetT&lt; BlockTypeT &gt;::Bit castor::operator^</definition>
        <argsstring>(typename DynamicBitsetT&lt; BlockTypeT &gt;::Bit const &amp;lhs, bool rhs)</argsstring>
        <name>operator^</name>
        <qualifiedname>castor::operator^</qualifiedname>
        <param>
          <type>typename <ref refid="d5/dfa/a08187" kindref="compound">DynamicBitsetT</ref>&lt; BlockTypeT &gt;::Bit const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/DynamicBitset.hpp" line="212" column="31" declfile="CastorUtils/Design/DynamicBitset.hpp" declline="212" declcolumn="31"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <description><para>Opérateurs de comparaison. </para>
</description>
      <memberdef kind="function" id="d2/dd2/a02279_1a475a349b49098fdba4766b66548b9b85" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::operator==</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;lhs, FlagCombination&lt; FlagType &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="291" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="291" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3386be40261e587b0c61b427b203ae14" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::operator==</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;lhs, FlagType const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>FlagType const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="299" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="299" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9d04bda9e502bd0c9bfc1eac0843097f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::operator!=</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;lhs, FlagCombination&lt; FlagType &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="307" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="307" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a44e05de12e7697c70e5ccbd71f4688fb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::operator!=</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;lhs, FlagType const &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>FlagType const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="315" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="315" bodyend="320"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <description><para>Opérateurs binaires. </para>
</description>
      <memberdef kind="function" id="d2/dd2/a02279_1a8d29f450bf38b3a36745a3fc7266d727" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; castor::operator&amp;</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;lhs, FlagType const &amp;rhs) noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>castor::operator&amp;</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>FlagType const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="331" column="27" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="332" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae5e42543b85bdd56f432deddea082305" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; castor::operator|</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;lhs, FlagType const &amp;rhs) noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>castor::operator|</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>FlagType const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="340" column="27" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="341" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a17b784d77a83968a1d13a8db5de9bd2c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; castor::operator^</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;lhs, FlagType const &amp;rhs) noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>castor::operator^</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>FlagType const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="349" column="27" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="350" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad76214cead87f7641e805f2394ceedb8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; castor::operator&amp;</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;lhs, typename FlagCombination&lt; FlagType &gt;::BaseType const &amp;rhs) noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>castor::operator&amp;</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>typename <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;::BaseType const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="358" column="27" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="359" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8ada665b407b4c3fdb8dd47745fc6dad" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; castor::operator|</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;lhs, typename FlagCombination&lt; FlagType &gt;::BaseType const &amp;rhs) noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>castor::operator|</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>typename <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;::BaseType const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="367" column="27" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="368" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4cd4efe1134720b31fa54b43531d5491" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; castor::operator^</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;lhs, typename FlagCombination&lt; FlagType &gt;::BaseType const &amp;rhs) noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>castor::operator^</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>typename <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;::BaseType const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="376" column="27" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="377" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a70ae939a0f349d4eb2898b7d6542cd72" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; castor::operator&amp;</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;lhs, FlagCombination&lt; FlagType &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>castor::operator&amp;</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="385" column="27" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="386" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aafdb21c5a847770393eece55e828678f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; castor::operator|</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;lhs, FlagCombination&lt; FlagType &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator|</name>
        <qualifiedname>castor::operator|</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="394" column="27" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="395" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1c556545b54fb47e98e24131b204547d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; castor::operator^</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;lhs, FlagCombination&lt; FlagType &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator^</name>
        <qualifiedname>castor::operator^</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="403" column="27" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="404" bodyend="409"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Opérateurs arithmétiques.</header>
      <memberdef kind="function" id="d2/dd2/a02279_1a8ac55dd36c0f96d99f0b2bcf5bbf234c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>FT</declname>
            <defname>FT</defname>
          </param>
          <param>
            <type>PixelFormat</type>
            <declname>FU</declname>
            <defname>FU</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; FT &gt;</type>
        <definition>Pixel&lt; FT &gt; castor::operator+</definition>
        <argsstring>(Pixel&lt; FT &gt; const &amp;lhs, Pixel&lt; FU &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; FT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; FU &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Pixel.hpp" line="373" column="7" declfile="CastorUtils/Graphics/Pixel.hpp" declline="373" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7f13367125d82660ec7e2464fa69800a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>FT</declname>
            <defname>FT</defname>
          </param>
          <param>
            <type>PixelFormat</type>
            <declname>FU</declname>
            <defname>FU</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; FT &gt;</type>
        <definition>Pixel&lt; FT &gt; castor::operator-</definition>
        <argsstring>(Pixel&lt; FT &gt; const &amp;lhs, Pixel&lt; FU &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; FT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; FU &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Pixel.hpp" line="375" column="7" declfile="CastorUtils/Graphics/Pixel.hpp" declline="375" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0135a688b5d945eabdaab8303a275a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>FT</declname>
            <defname>FT</defname>
          </param>
          <param>
            <type>PixelFormat</type>
            <declname>FU</declname>
            <defname>FU</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; FT &gt;</type>
        <definition>Pixel&lt; FT &gt; castor::operator/</definition>
        <argsstring>(Pixel&lt; FT &gt; const &amp;lhs, Pixel&lt; FU &gt; const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; FT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; FU &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Pixel.hpp" line="377" column="7" declfile="CastorUtils/Graphics/Pixel.hpp" declline="377" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a232359bbb3e3cf10980c02d07c3146a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>FT</declname>
            <defname>FT</defname>
          </param>
          <param>
            <type>PixelFormat</type>
            <declname>FU</declname>
            <defname>FU</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; FT &gt;</type>
        <definition>Pixel&lt; FT &gt; castor::operator*</definition>
        <argsstring>(Pixel&lt; FT &gt; const &amp;lhs, Pixel&lt; FU &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; FT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; FU &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Pixel.hpp" line="379" column="7" declfile="CastorUtils/Graphics/Pixel.hpp" declline="379" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a71d013c6c8559dd03f0840082decd0c3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt;</type>
        <definition>LengthT&lt; TypeT &gt; castor::operator+</definition>
        <argsstring>(LengthT&lt; TypeT &gt; const &amp;lhs, LengthT&lt; TypeT &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="358" column="16" declfile="CastorUtils/Math/Length.hpp" declline="358" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5a68a4bf625137e80135b4500b1e874c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt;</type>
        <definition>LengthT&lt; TypeT &gt; castor::operator-</definition>
        <argsstring>(LengthT&lt; TypeT &gt; const &amp;lhs, LengthT&lt; TypeT &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="360" column="16" declfile="CastorUtils/Math/Length.hpp" declline="360" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac2791b43d14be830fca98b7490926db5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt;</type>
        <definition>LengthT&lt; TypeT &gt; castor::operator+</definition>
        <argsstring>(TypeT const &amp;lhs, LengthT&lt; TypeT &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type>TypeT const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="362" column="16" declfile="CastorUtils/Math/Length.hpp" declline="362" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad76a0a8b55164a26428a53a6eec940af" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt;</type>
        <definition>LengthT&lt; TypeT &gt; castor::operator-</definition>
        <argsstring>(TypeT const &amp;lhs, LengthT&lt; TypeT &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type>TypeT const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="364" column="16" declfile="CastorUtils/Math/Length.hpp" declline="364" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4c5157a06bd78dbee8c63bb72d4fc1a4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt;</type>
        <definition>LengthT&lt; TypeT &gt; castor::operator+</definition>
        <argsstring>(LengthT&lt; TypeT &gt; const &amp;lhs, TypeT const &amp;rhs) noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>TypeT const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="366" column="16" declfile="CastorUtils/Math/Length.hpp" declline="366" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad31d6b76360312a8f3e216e1986711f6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt;</type>
        <definition>LengthT&lt; TypeT &gt; castor::operator-</definition>
        <argsstring>(LengthT&lt; TypeT &gt; const &amp;lhs, TypeT const &amp;rhs) noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>TypeT const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="368" column="16" declfile="CastorUtils/Math/Length.hpp" declline="368" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab36dc22570df692e315e2bb8a3398ce6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt;</type>
        <definition>LengthT&lt; TypeT &gt; castor::operator*</definition>
        <argsstring>(LengthT&lt; TypeT &gt; const &amp;lhs, double rhs) noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="370" column="16" declfile="CastorUtils/Math/Length.hpp" declline="370" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4e0a7d272b37a00462c47748e39593b5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt;</type>
        <definition>LengthT&lt; TypeT &gt; castor::operator/</definition>
        <argsstring>(LengthT&lt; TypeT &gt; const &amp;lhs, double rhs) noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="372" column="16" declfile="CastorUtils/Math/Length.hpp" declline="372" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af772be557e409d7a4dbd024d01c752f8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T castor::operator+</definition>
        <argsstring>(T const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="345" column="10" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a71dffb4464d65f0ecf611ba3b4e11231" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T castor::operator-</definition>
        <argsstring>(T const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="351" column="10" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2265ec6a060a076b4dc883284d5005e0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T castor::operator*</definition>
        <argsstring>(T const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="357" column="10" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="357" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1adc94ba9834a10b175fd443bf18170964" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T castor::operator/</definition>
        <argsstring>(T const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="363" column="10" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="363" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2e3eb8145e4e499994dc9f9c309f303d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T castor::operator+</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, T const &amp;rhs) noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="369" column="10" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="369" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad2aefaaf3a9d944979d7331e790a00f5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T castor::operator-</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, T const &amp;rhs) noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="375" column="10" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="375" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5c46840095de1b3156c0574f19a99e36" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T castor::operator*</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, T const &amp;rhs) noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="381" column="10" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="381" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1e1750c6c80e5b67b25d082923a6c73a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T castor::operator/</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, T const &amp;rhs) noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="387" column="10" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="387" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a89496cb8faba09c7684f26a3b92b7904" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T castor::operator+</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="393" column="10" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="393" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5162fa60b4c1a392c707b506e918ad48" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T castor::operator-</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="400" column="10" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="400" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a94297eb8e41a9370bad52f3192e06b11" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T castor::operator*</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="407" column="10" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="407" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9648816d1b9cd3e46072764e761579ad" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T castor::operator/</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="414" column="10" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="414" bodyend="418"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1a04ffe59bd71c810c296bc2881c5b8871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;lhs, Coords&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérateurs de comparaison. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="243" column="6" declfile="CastorUtils/Math/Coords.hpp" declline="243" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a81d5d80a38c5d37aa11dca22eb9c32e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;lhs, Coords&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="245" column="6" declfile="CastorUtils/Math/Coords.hpp" declline="245" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1af849e6966a8dba9e07c8cf185bb57050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, Count &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, Count &gt; castor::operator-</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérateurs arithmétiques. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="255" column="7" declfile="CastorUtils/Math/Coords.hpp" declline="255" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a048f892f3f8d021dad73e0b95c30f1a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, Count &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, Count &gt; castor::operator+</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;lhs, Coords&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="258" column="7" declfile="CastorUtils/Math/Coords.hpp" declline="258" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a44959b2acc40ed495bf6e9bf8b2e7d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, Count &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, Count &gt; castor::operator-</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;lhs, Coords&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="260" column="7" declfile="CastorUtils/Math/Coords.hpp" declline="260" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a74b10fa9fb9d1ef33281f48019d559cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, Count &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, Count &gt; castor::operator*</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;lhs, Coords&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="262" column="7" declfile="CastorUtils/Math/Coords.hpp" declline="262" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab25643ccf641153ddffc95144c66d836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, Count &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, Count &gt; castor::operator/</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;lhs, Coords&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="264" column="7" declfile="CastorUtils/Math/Coords.hpp" declline="264" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a87766d5d5f805bb3b05b76c75ded05c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, Count &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, Count &gt; castor::operator+</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;lhs, U const *rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="267" column="7" declfile="CastorUtils/Math/Coords.hpp" declline="267" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a14c8bb18920e9fc73f8252d3f7dbd2a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, Count &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, Count &gt; castor::operator-</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;lhs, U const *rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="269" column="7" declfile="CastorUtils/Math/Coords.hpp" declline="269" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2df1600586db882497d6fce39d2f2f34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, Count &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, Count &gt; castor::operator*</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;lhs, U const *rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="271" column="7" declfile="CastorUtils/Math/Coords.hpp" declline="271" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a02f1b19596c267ed1dfa28875ca610b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, Count &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, Count &gt; castor::operator/</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;lhs, U const *rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="273" column="7" declfile="CastorUtils/Math/Coords.hpp" declline="273" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a58358ef527cb3061726857bc68d207b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, Count &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, Count &gt; castor::operator+</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="276" column="7" declfile="CastorUtils/Math/Coords.hpp" declline="276" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a58acf4bbd3c49a75365614764092fb88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, Count &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, Count &gt; castor::operator-</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="278" column="7" declfile="CastorUtils/Math/Coords.hpp" declline="278" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa38bd6809a22fddd960f0dc42eb2a460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, Count &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, Count &gt; castor::operator*</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="280" column="7" declfile="CastorUtils/Math/Coords.hpp" declline="280" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0e9f521001fc92433a4b98ffbdc69a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, Count &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, Count &gt; castor::operator/</definition>
        <argsstring>(Coords&lt; T, Count &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="282" column="7" declfile="CastorUtils/Math/Coords.hpp" declline="282" declcolumn="7"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1a3ed046693c3d5396f5558a77e6441446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &amp;</type>
        <definition>String &amp; castor::operator&lt;&lt;</definition>
        <argsstring>(String &amp;out, Coords&lt; T, Count &gt; const &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérateurs de flux. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="488" column="1" declfile="CastorUtils/Math/Coords.hpp" declline="488" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a40e56c930241ae6c6ff719f55632e7b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &amp;</type>
        <definition>String &amp; castor::operator&gt;&gt;</definition>
        <argsstring>(String &amp;in, Coords&lt; T, Count &gt; &amp;out)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>castor::operator&gt;&gt;</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="490" column="9" declfile="CastorUtils/Math/Coords.hpp" declline="490" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afbdf5b477a78fc0d0e54e64b5d24e7f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; CharType &gt; &amp;</type>
        <definition>std::basic_ostream&lt; CharType &gt; &amp; castor::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; CharType &gt; &amp;out, Coords&lt; T, Count &gt; const &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; CharType &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="490" column="9" declfile="CastorUtils/Math/Coords.hpp" declline="490" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae8f77c05bd4494fe4b8961ac2efdfdb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>std::basic_istream&lt; CharType &gt; &amp;</type>
        <definition>std::basic_istream&lt; CharType &gt; &amp; castor::operator&gt;&gt;</definition>
        <argsstring>(std::basic_istream&lt; CharType &gt; &amp;in, Coords&lt; T, Count &gt; &amp;out)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>castor::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::basic_istream&lt; CharType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, Count &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Coords.hpp" line="494" column="21" declfile="CastorUtils/Math/Coords.hpp" declline="494" declcolumn="21"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Opérateurs logiques.</header>
      <memberdef kind="function" id="d2/dd2/a02279_1a93caa38173c998259f48bc14e68afea3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(LengthT&lt; TypeT &gt; const &amp;lhs, LengthT&lt; TypeT &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="338" column="13" declfile="CastorUtils/Math/Length.hpp" declline="338" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa3689fd2b99204453acce8fcdc476586" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(LengthT&lt; TypeT &gt; const &amp;lhs, LengthT&lt; TypeT &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="340" column="13" declfile="CastorUtils/Math/Length.hpp" declline="340" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a300a307c26488f09c91b6f7aa52a2471" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&lt;</definition>
        <argsstring>(LengthT&lt; TypeT &gt; const &amp;lhs, LengthT&lt; TypeT &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>castor::operator&lt;</qualifiedname>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="342" column="8" declfile="CastorUtils/Math/Length.hpp" declline="342" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a30c54a6e81c1ad6e3f13a9ce6f67eb03" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&gt;=</definition>
        <argsstring>(LengthT&lt; TypeT &gt; const &amp;lhs, LengthT&lt; TypeT &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>castor::operator&gt;=</qualifiedname>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="344" column="13" declfile="CastorUtils/Math/Length.hpp" declline="344" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a11810651c0bab2c05fa0ab22623b4135" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&gt;</definition>
        <argsstring>(LengthT&lt; TypeT &gt; const &amp;lhs, LengthT&lt; TypeT &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>castor::operator&gt;</qualifiedname>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="346" column="13" declfile="CastorUtils/Math/Length.hpp" declline="346" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a29903fe78bbf6e28c338d28778d1ac7f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&lt;=</definition>
        <argsstring>(LengthT&lt; TypeT &gt; const &amp;lhs, LengthT&lt; TypeT &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>castor::operator&lt;=</qualifiedname>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/dda/a09107" kindref="compound">LengthT</ref>&lt; TypeT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="348" column="8" declfile="CastorUtils/Math/Length.hpp" declline="348" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a101535679c320f5332d38cfdd95ca4fa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, T const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="209" column="13" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="209" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a444b0b4418db605bf4a8a7c457c1943a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, T const &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="217" column="13" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="217" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a00b11755a8c66155b594348241f3b04f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&gt;</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, T const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>castor::operator&gt;</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="224" column="13" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3e1ff4ff04ab911ca90041ec8fd1024c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&lt;</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, T const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>castor::operator&lt;</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="231" column="8" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="231" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa41f48a18969d94a56e5b0359b297250" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&gt;=</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, T const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>castor::operator&gt;=</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="238" column="13" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="238" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1add7a113cbd514e5d8a1ffb6e781c2859" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&lt;=</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, T const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>castor::operator&lt;=</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="245" column="8" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="245" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a656915b5083c9e270f96e36875ec4c28" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(T const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="252" column="13" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="252" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6617bb81c0394ce4f28e670f34d9f9b0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(T const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="260" column="13" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="260" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1ab9ce7bf7c4b34148e19c4c8f09382a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&gt;</definition>
        <argsstring>(T const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>castor::operator&gt;</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="267" column="13" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="267" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a362fb6b938af58a159191dc7e57a580d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&lt;</definition>
        <argsstring>(T const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>castor::operator&lt;</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="274" column="8" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="274" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af1c8a0eccda2b0dcdf9bd0852b8cbc0d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&gt;=</definition>
        <argsstring>(T const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>castor::operator&gt;=</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="281" column="13" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="281" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a226e4ce121b507e8769e54fd66ab13c2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&lt;=</definition>
        <argsstring>(T const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>castor::operator&lt;=</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="288" column="8" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="288" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a622b6a8b919b6e60b4b86474f7cc8149" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="295" column="13" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="295" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a518c0d0e2a6e405a2665ef7f049016dc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="303" column="13" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="303" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a59a26f00bde376df26d2cbca90951cc8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&gt;</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>castor::operator&gt;</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="310" column="13" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="310" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a57bc3b9dca5fc11538dbfef17df242da" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&lt;</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>castor::operator&lt;</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="317" column="8" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="317" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a26e6197f18cfb973200b1cca6f0e3c3f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&gt;=</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>castor::operator&gt;=</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="324" column="13" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="324" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1d8dd53e312834732989cc423e038b9c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&lt;=</definition>
        <argsstring>(RangedValue&lt; T &gt; const &amp;lhs, RangedValue&lt; T &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>castor::operator&lt;=</qualifiedname>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="331" column="8" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="331" bodyend="335"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1a608647201fa896cef7dc0b9b98c0abb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(Matrix&lt; T, Columns, Rows &gt; const &amp;lhs, Matrix&lt; T, Columns, Rows &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérateurs logiques </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="216" column="6" declfile="CastorUtils/Math/Matrix.hpp" declline="216" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afaef98f89455038c6bd77cb834c712ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(Matrix&lt; T, Columns, Rows &gt; const &amp;lhs, Matrix&lt; T, Columns, Rows &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="218" column="6" declfile="CastorUtils/Math/Matrix.hpp" declline="218" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1a614022439d59fefa30113383cacc98d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt;</type>
        <definition>Matrix&lt; T, Columns, Rows &gt; castor::operator+</definition>
        <argsstring>(Matrix&lt; T, Columns, Rows &gt; const &amp;lhs, Matrix&lt; U, Columns, Rows &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; U, Columns, Rows &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérateurs arithmétiques. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="228" column="8" declfile="CastorUtils/Math/Matrix.hpp" declline="228" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2cf97d83870619bc445b5dae19d49d21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt;</type>
        <definition>Matrix&lt; T, Columns, Rows &gt; castor::operator-</definition>
        <argsstring>(Matrix&lt; T, Columns, Rows &gt; const &amp;lhs, Matrix&lt; U, Columns, Rows &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; U, Columns, Rows &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="230" column="8" declfile="CastorUtils/Math/Matrix.hpp" declline="230" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab029ae3cad8aafb15a3850258a333dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>ColumnsU</declname>
            <defname>ColumnsU</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, ColumnsU, Rows &gt;</type>
        <definition>Matrix&lt; T, ColumnsU, Rows &gt; castor::operator*</definition>
        <argsstring>(Matrix&lt; T, Columns, Rows &gt; const &amp;lhs, Matrix&lt; U, ColumnsU, Columns &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; U, ColumnsU, Columns &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="232" column="8" declfile="CastorUtils/Math/Matrix.hpp" declline="232" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a11cfed143503ff13fbbb1f5a137752f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, Rows &gt;</type>
        <definition>Point&lt; T, Rows &gt; castor::operator*</definition>
        <argsstring>(Matrix&lt; T, Columns, Rows &gt; const &amp;lhs, Point&lt; U, Columns &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; U, Columns &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="235" column="7" declfile="CastorUtils/Math/Matrix.hpp" declline="235" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a96f5f1307c04d6ea52594f381907e901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, Columns &gt;</type>
        <definition>Point&lt; T, Columns &gt; castor::operator*</definition>
        <argsstring>(Point&lt; T, Rows &gt; const &amp;lhs, Matrix&lt; U, Columns, Rows &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, Rows &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; U, Columns, Rows &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="238" column="7" declfile="CastorUtils/Math/Matrix.hpp" declline="238" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a37e96171b75754fafcf5a7da29791acf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt;</type>
        <definition>Matrix&lt; T, Columns, Rows &gt; castor::operator+</definition>
        <argsstring>(Matrix&lt; T, Columns, Rows &gt; const &amp;lhs, U const *rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="241" column="8" declfile="CastorUtils/Math/Matrix.hpp" declline="241" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac34e067912b06366045968bc3a141369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt;</type>
        <definition>Matrix&lt; T, Columns, Rows &gt; castor::operator-</definition>
        <argsstring>(Matrix&lt; T, Columns, Rows &gt; const &amp;lhs, U const *rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="243" column="8" declfile="CastorUtils/Math/Matrix.hpp" declline="243" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aaf56a8128498dfa4a3c6bbf19c82d26f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt;</type>
        <definition>Matrix&lt; T, Columns, Rows &gt; castor::operator+</definition>
        <argsstring>(Matrix&lt; T, Columns, Rows &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="246" column="8" declfile="CastorUtils/Math/Matrix.hpp" declline="246" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aba7a32143e16ca5df7c08f4dfb6903ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt;</type>
        <definition>Matrix&lt; T, Columns, Rows &gt; castor::operator-</definition>
        <argsstring>(Matrix&lt; T, Columns, Rows &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="248" column="8" declfile="CastorUtils/Math/Matrix.hpp" declline="248" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a61c843a8bac0913d4b569140ca62ed2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt;</type>
        <definition>Matrix&lt; T, Columns, Rows &gt; castor::operator*</definition>
        <argsstring>(Matrix&lt; T, Columns, Rows &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="250" column="8" declfile="CastorUtils/Math/Matrix.hpp" declline="250" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0fe323c5182d16cd7864126b723d518c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt;</type>
        <definition>Matrix&lt; T, Columns, Rows &gt; castor::operator/</definition>
        <argsstring>(Matrix&lt; T, Columns, Rows &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="252" column="8" declfile="CastorUtils/Math/Matrix.hpp" declline="252" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac62a4c2968d666ac0d95b2ba9eae87d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt;</type>
        <definition>Matrix&lt; T, Columns, Rows &gt; castor::operator+</definition>
        <argsstring>(T const &amp;lhs, Matrix&lt; U, Columns, Rows &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; U, Columns, Rows &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="255" column="8" declfile="CastorUtils/Math/Matrix.hpp" declline="255" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa115ca36549d21a2bb8c40bd81128382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt;</type>
        <definition>Matrix&lt; T, Columns, Rows &gt; castor::operator-</definition>
        <argsstring>(T const &amp;lhs, Matrix&lt; U, Columns, Rows &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; U, Columns, Rows &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="257" column="8" declfile="CastorUtils/Math/Matrix.hpp" declline="257" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aecafef3e5ad2babea367feca0a8d8c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt;</type>
        <definition>Matrix&lt; T, Columns, Rows &gt; castor::operator*</definition>
        <argsstring>(T const &amp;lhs, Matrix&lt; U, Columns, Rows &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; U, Columns, Rows &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="259" column="8" declfile="CastorUtils/Math/Matrix.hpp" declline="259" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af5713f52901a689fda4153f0132a2a5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt;</type>
        <definition>Matrix&lt; T, Columns, Rows &gt; castor::operator-</definition>
        <argsstring>(Matrix&lt; T, Columns, Rows &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="262" column="8" declfile="CastorUtils/Math/Matrix.hpp" declline="262" declcolumn="8"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1a1697aa4b9d326c00b9f36ab4cb730202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &amp;</type>
        <definition>String &amp; castor::operator&lt;&lt;</definition>
        <argsstring>(String &amp;stream, Matrix&lt; T, Columns, Rows &gt; const &amp;matrix)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérateurs de flux. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="272" column="1" declfile="CastorUtils/Math/Matrix.hpp" declline="272" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6edd66b9112cb9376c34fb4994ea4a2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &amp;</type>
        <definition>String &amp; castor::operator&gt;&gt;</definition>
        <argsstring>(String &amp;stream, Matrix&lt; T, Columns, Rows &gt; &amp;matrix)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>castor::operator&gt;&gt;</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="274" column="9" declfile="CastorUtils/Math/Matrix.hpp" declline="274" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a016a78351254009557981d3397c0e05b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; CharT &gt; &amp;</type>
        <definition>std::basic_ostream&lt; CharT &gt; &amp; castor::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; CharT &gt; &amp;stream, Matrix&lt; T, Columns, Rows &gt; const &amp;matrix)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; CharT &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; const &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="274" column="9" declfile="CastorUtils/Math/Matrix.hpp" declline="274" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a676570ff063b6db3d827815efeabab98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
        </templateparamlist>
        <type>std::basic_istream&lt; CharT &gt; &amp;</type>
        <definition>std::basic_istream&lt; CharT &gt; &amp; castor::operator&gt;&gt;</definition>
        <argsstring>(std::basic_istream&lt; CharT &gt; &amp;stream, Matrix&lt; T, Columns, Rows &gt; &amp;matrix)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>castor::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::basic_istream&lt; CharT &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Columns, Rows &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Matrix.hpp" line="278" column="21" declfile="CastorUtils/Math/Matrix.hpp" declline="278" declcolumn="21"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1a7dbf1b64ba6822fdd6b907036d1dc5a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, Point&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérateurs logiques </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="230" column="6" declfile="CastorUtils/Math/Point.hpp" declline="230" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2b5d53154994e6fa40fe206ef722b2b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, Point&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="232" column="6" declfile="CastorUtils/Math/Point.hpp" declline="232" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a61f62c43d1f38c79137fee83041ba443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, Coords&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="235" column="6" declfile="CastorUtils/Math/Point.hpp" declline="235" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af6c3f6b7d837fbdc4b65d0768ac67992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, Coords&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="237" column="6" declfile="CastorUtils/Math/Point.hpp" declline="237" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0da106c3fd7df8a18c95e4e0c6f29a1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(Coords&lt; T, TCount &gt; const &amp;lhs, Point&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="240" column="6" declfile="CastorUtils/Math/Point.hpp" declline="240" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a113640371c25acf384ec424335a35056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(Coords&lt; T, TCount &gt; const &amp;lhs, Point&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="242" column="6" declfile="CastorUtils/Math/Point.hpp" declline="242" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1a674fd0793d613414844ce6f09adef016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator-</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérateurs arithmétiques. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="252" column="7" declfile="CastorUtils/Math/Point.hpp" declline="252" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5d5e6ed05e907818af86b9494ff55d89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator+</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, Point&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="255" column="7" declfile="CastorUtils/Math/Point.hpp" declline="255" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1b4f9552aeb684e230f37b57839aa5c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator-</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, Point&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="257" column="7" declfile="CastorUtils/Math/Point.hpp" declline="257" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1abd7da4ad55aa0a39c927c0cb24861cc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator*</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, Point&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="259" column="7" declfile="CastorUtils/Math/Point.hpp" declline="259" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a491acf50dec5f52b6026684dc3894092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator/</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, Point&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="261" column="7" declfile="CastorUtils/Math/Point.hpp" declline="261" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a69a6a5807b1d1a400446e2e672b3ad1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator+</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, Coords&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="264" column="7" declfile="CastorUtils/Math/Point.hpp" declline="264" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad2f3ade211760361d6e4616e17b2562e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator-</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, Coords&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="266" column="7" declfile="CastorUtils/Math/Point.hpp" declline="266" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a387ae91f433fa0da76b1e4583d1aef0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator*</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, Coords&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="268" column="7" declfile="CastorUtils/Math/Point.hpp" declline="268" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a913d4d01a0592cb4dd66656730730083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator/</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, Coords&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="270" column="7" declfile="CastorUtils/Math/Point.hpp" declline="270" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a053cc2a1bbc8aa19aacbf19809a78e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator+</definition>
        <argsstring>(Coords&lt; T, TCount &gt; const &amp;lhs, Point&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="273" column="7" declfile="CastorUtils/Math/Point.hpp" declline="273" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0fe64102068bdba1bc38515ff6db1c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator-</definition>
        <argsstring>(Coords&lt; T, TCount &gt; const &amp;lhs, Point&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="275" column="7" declfile="CastorUtils/Math/Point.hpp" declline="275" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a745e0e5057b4bf9eef2336fbaa183a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator*</definition>
        <argsstring>(Coords&lt; T, TCount &gt; const &amp;lhs, Point&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="277" column="7" declfile="CastorUtils/Math/Point.hpp" declline="277" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9ae20cb0df8f781282273e5ab4b881be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>UCount</declname>
            <defname>UCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator/</definition>
        <argsstring>(Coords&lt; T, TCount &gt; const &amp;lhs, Point&lt; U, UCount &gt; const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d9/d6a/a09103" kindref="compound">Coords</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; U, UCount &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="279" column="7" declfile="CastorUtils/Math/Point.hpp" declline="279" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8487a44c9b49485ddb8dc571d4641219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator+</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, U const *rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="282" column="7" declfile="CastorUtils/Math/Point.hpp" declline="282" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9be0a2b5cfb996765c7e4e9e81bc26a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator-</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, U const *rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="284" column="7" declfile="CastorUtils/Math/Point.hpp" declline="284" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad0201f6d67d392d878b64f7696e7e3ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator*</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, U const *rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="286" column="7" declfile="CastorUtils/Math/Point.hpp" declline="286" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aabbb470487a3574eb562c87dcc52cbd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator/</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, U const *rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="288" column="7" declfile="CastorUtils/Math/Point.hpp" declline="288" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8d941bf5c5db58158f2d822d9cdba470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator+</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="291" column="7" declfile="CastorUtils/Math/Point.hpp" declline="291" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a755d40d632ac84eeea91d0146ae20225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator-</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="293" column="7" declfile="CastorUtils/Math/Point.hpp" declline="293" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6d4f4e2dc1d36b07296522bb3629c9ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator*</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="295" column="7" declfile="CastorUtils/Math/Point.hpp" declline="295" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af4d8b3fa865bde37a3caca994e5fa647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; std::remove_cv_t&lt; T &gt;, TCount &gt;</type>
        <definition>Point&lt; std::remove_cv_t&lt; T &gt;, TCount &gt; castor::operator/</definition>
        <argsstring>(Point&lt; T, TCount &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="297" column="7" declfile="CastorUtils/Math/Point.hpp" declline="297" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1acc84bda048e444fbbc56288a7921adca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstCompT</type>
          </param>
          <param>
            <type>typename SrcT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a931b074b19e86847de40bce81dabb908" kindref="member">PointTypeT</ref>&lt; SrcT, DstCompT &gt;</type>
        <definition>PointTypeT&lt; SrcT, DstCompT &gt; castor::pointCast</definition>
        <argsstring>(SrcT const &amp;src)</argsstring>
        <name>pointCast</name>
        <qualifiedname>castor::pointCast</qualifiedname>
        <param>
          <type>SrcT const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="300" column="12" declfile="CastorUtils/Math/Point.hpp" declline="300" declcolumn="12"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1a45651b4ee2455df0d41dcf601c1b17be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &amp;</type>
        <definition>String &amp; castor::operator&lt;&lt;</definition>
        <argsstring>(String &amp;out, Point&lt; T, TCount &gt; const &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérateurs de flux. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="754" column="1" declfile="CastorUtils/Math/Point.hpp" declline="754" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a20acb30bf37d1626323ca010237f461d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &amp;</type>
        <definition>String &amp; castor::operator&gt;&gt;</definition>
        <argsstring>(String &amp;in, Point&lt; T, TCount &gt; &amp;out)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>castor::operator&gt;&gt;</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="756" column="9" declfile="CastorUtils/Math/Point.hpp" declline="756" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aeacf7920fcdd9cdb2b74032548d3e6c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; CharType &gt; &amp;</type>
        <definition>std::basic_ostream&lt; CharType &gt; &amp; castor::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; CharType &gt; &amp;out, Point&lt; T, TCount &gt; const &amp;in)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; CharType &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="756" column="9" declfile="CastorUtils/Math/Point.hpp" declline="756" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9daaf0257513fd7e50dc79238e898f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>TCount</declname>
            <defname>TCount</defname>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>std::basic_istream&lt; CharType &gt; &amp;</type>
        <definition>std::basic_istream&lt; CharType &gt; &amp; castor::operator&gt;&gt;</definition>
        <argsstring>(std::basic_istream&lt; CharType &gt; &amp;in, Point&lt; T, TCount &gt; &amp;out)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>castor::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::basic_istream&lt; CharType &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="db/dcf/a09187" kindref="compound">Point</ref>&lt; T, TCount &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Point.hpp" line="760" column="21" declfile="CastorUtils/Math/Point.hpp" declline="760" declcolumn="21"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1aa622dbc431356f865fd8cc54e5ea1468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename DurationT</type>
          </param>
          <param>
            <type>typename TraitsT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(SpeedT&lt; ValueT, DurationT, TraitsT &gt; const &amp;lhs, SpeedT&lt; ValueT, DurationT, TraitsT &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d9/d33/a09227" kindref="compound">SpeedT</ref>&lt; ValueT, DurationT, TraitsT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d33/a09227" kindref="compound">SpeedT</ref>&lt; ValueT, DurationT, TraitsT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Speed.hpp" line="171" column="6" bodyfile="CastorUtils/Math/Speed.hpp" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af19017ad21137447a9cf753fe2e2cd17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename DurationT</type>
          </param>
          <param>
            <type>typename TraitsT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(SpeedT&lt; ValueT, DurationT, TraitsT &gt; const &amp;lhs, SpeedT&lt; ValueT, DurationT, TraitsT &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d9/d33/a09227" kindref="compound">SpeedT</ref>&lt; ValueT, DurationT, TraitsT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d33/a09227" kindref="compound">SpeedT</ref>&lt; ValueT, DurationT, TraitsT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Speed.hpp" line="178" column="6" bodyfile="CastorUtils/Math/Speed.hpp" bodystart="178" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9165df4b33b8f27a16a5852c1147f7c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename DurationT</type>
          </param>
          <param>
            <type>typename TraitsT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&lt;</definition>
        <argsstring>(SpeedT&lt; ValueT, DurationT, TraitsT &gt; const &amp;lhs, SpeedT&lt; ValueT, DurationT, TraitsT &gt; const &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>castor::operator&lt;</qualifiedname>
        <param>
          <type><ref refid="d9/d33/a09227" kindref="compound">SpeedT</ref>&lt; ValueT, DurationT, TraitsT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d33/a09227" kindref="compound">SpeedT</ref>&lt; ValueT, DurationT, TraitsT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Speed.hpp" line="185" column="1" bodyfile="CastorUtils/Math/Speed.hpp" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad63d744cf8686cdc8df07a4fafe626cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename DurationT</type>
          </param>
          <param>
            <type>typename TraitsT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&gt;=</definition>
        <argsstring>(SpeedT&lt; ValueT, DurationT, TraitsT &gt; const &amp;lhs, SpeedT&lt; ValueT, DurationT, TraitsT &gt; const &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>castor::operator&gt;=</qualifiedname>
        <param>
          <type><ref refid="d9/d33/a09227" kindref="compound">SpeedT</ref>&lt; ValueT, DurationT, TraitsT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d33/a09227" kindref="compound">SpeedT</ref>&lt; ValueT, DurationT, TraitsT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Speed.hpp" line="192" column="6" bodyfile="CastorUtils/Math/Speed.hpp" bodystart="192" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a49e7cb66d4389d303924a88d1eb5d0be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename DurationT</type>
          </param>
          <param>
            <type>typename TraitsT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&gt;</definition>
        <argsstring>(SpeedT&lt; ValueT, DurationT, TraitsT &gt; const &amp;lhs, SpeedT&lt; ValueT, DurationT, TraitsT &gt; const &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>castor::operator&gt;</qualifiedname>
        <param>
          <type><ref refid="d9/d33/a09227" kindref="compound">SpeedT</ref>&lt; ValueT, DurationT, TraitsT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d33/a09227" kindref="compound">SpeedT</ref>&lt; ValueT, DurationT, TraitsT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Speed.hpp" line="199" column="6" bodyfile="CastorUtils/Math/Speed.hpp" bodystart="199" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9a306526263a7c437e77461be870dd00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename DurationT</type>
          </param>
          <param>
            <type>typename TraitsT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&lt;=</definition>
        <argsstring>(SpeedT&lt; ValueT, DurationT, TraitsT &gt; const &amp;lhs, SpeedT&lt; ValueT, DurationT, TraitsT &gt; const &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>castor::operator&lt;=</qualifiedname>
        <param>
          <type><ref refid="d9/d33/a09227" kindref="compound">SpeedT</ref>&lt; ValueT, DurationT, TraitsT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/d33/a09227" kindref="compound">SpeedT</ref>&lt; ValueT, DurationT, TraitsT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Speed.hpp" line="206" column="1" bodyfile="CastorUtils/Math/Speed.hpp" bodystart="206" bodyend="210"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1a8604b8709b1b45ef00446613c57d41bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(SquareMatrix&lt; T, Count &gt; const &amp;lhs, SquareMatrix&lt; T, Count &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérateurs logiques </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="212" column="6" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="212" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a56a3fab1036405410704e24063fdcae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(SquareMatrix&lt; T, Count &gt; const &amp;lhs, SquareMatrix&lt; T, Count &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="214" column="6" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="214" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1ad9dbeecdbf11dd159f07ae474a2f0979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator+</definition>
        <argsstring>(SquareMatrix&lt; T, Count &gt; const &amp;lhs, SquareMatrix&lt; U, Count &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; U, Count &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérateurs arithmétiques. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="224" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="224" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5c914a172e1593b235f605dd30cedf0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator-</definition>
        <argsstring>(SquareMatrix&lt; T, Count &gt; const &amp;lhs, SquareMatrix&lt; U, Count &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; U, Count &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="226" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="226" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac8c588cc8dcaaee68bbb73838baeaf94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator*</definition>
        <argsstring>(SquareMatrix&lt; T, Count &gt; const &amp;lhs, SquareMatrix&lt; U, Count &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; U, Count &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="228" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="228" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9d57c50fae9912f98a4c5aca78b71929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Columns</declname>
            <defname>Columns</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator*</definition>
        <argsstring>(SquareMatrix&lt; T, Count &gt; const &amp;lhs, Matrix&lt; U, Columns, Count &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; U, Columns, Count &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="230" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="230" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1adc1b6b460c10c08559677230876ccade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator+</definition>
        <argsstring>(SquareMatrix&lt; T, Count &gt; const &amp;lhs, U const *rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="232" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="232" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a98db246de78bfb80f64a43fb888ab057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator-</definition>
        <argsstring>(SquareMatrix&lt; T, Count &gt; const &amp;lhs, U const *rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="234" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="234" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac23ee7c945aa4c6231d8b53ff6ac02bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator*</definition>
        <argsstring>(SquareMatrix&lt; T, Count &gt; const &amp;lhs, U const *rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="236" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="236" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a00a628ec54c96c1e7067f4f21d3034b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator+</definition>
        <argsstring>(SquareMatrix&lt; T, Count &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="238" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="238" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa40e2145b48a6849a1a4b98e718ad2e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator-</definition>
        <argsstring>(SquareMatrix&lt; T, Count &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="240" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="240" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1accdfc93b71dacc0b3c4526e9cb851781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator*</definition>
        <argsstring>(SquareMatrix&lt; T, Count &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="242" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="242" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9c6774501f98dc85a0a6f53bb935dd30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator/</definition>
        <argsstring>(SquareMatrix&lt; T, Count &gt; const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="244" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="244" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a865902910f795c9fcde9b673ddad241c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; T, Count, Rows &gt;</type>
        <definition>Matrix&lt; T, Count, Rows &gt; castor::operator*</definition>
        <argsstring>(Matrix&lt; U, Count, Rows &gt; const &amp;lhs, SquareMatrix&lt; T, Count &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="d2/d61/a09183" kindref="compound">Matrix</ref>&lt; U, Count, Rows &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="246" column="8" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="246" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5921f2a0b3c9b0027ad6f9b8d385ad5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator+</definition>
        <argsstring>(T const &amp;lhs, SquareMatrix&lt; T, Count &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="248" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="248" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a051c4ab6ebb37dce26335d9d82c13f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator-</definition>
        <argsstring>(T const &amp;lhs, SquareMatrix&lt; T, Count &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="250" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="250" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1b429ffd0b9c61903efd1effe5621178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator*</definition>
        <argsstring>(T const &amp;lhs, SquareMatrix&lt; T, Count &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="252" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="252" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aee58b5708ad1e99e91a336be554771f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt;</type>
        <definition>SquareMatrix&lt; T, Count &gt; castor::operator-</definition>
        <argsstring>(SquareMatrix&lt; T, Count &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="254" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="254" declcolumn="14"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <memberdef kind="function" id="d2/dd2/a02279_1abe5c993529c12e0091e8770cf1116824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; CharT &gt; &amp;</type>
        <definition>std::basic_ostream&lt; CharT &gt; &amp; castor::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; CharT &gt; &amp;streamOut, SquareMatrix&lt; T, Count &gt; const &amp;matrix)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; CharT &gt; &amp;</type>
          <declname>streamOut</declname>
        </param>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; const &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>name Opérateurs de flux. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="254" column="14" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="254" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad6436b3683106fd1af19ab0f77c80ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>uint32_t</type>
            <declname>Count</declname>
            <defname>Count</defname>
          </param>
        </templateparamlist>
        <type>std::basic_istream&lt; CharT &gt; &amp;</type>
        <definition>std::basic_istream&lt; CharT &gt; &amp; castor::operator&gt;&gt;</definition>
        <argsstring>(std::basic_istream&lt; CharT &gt; &amp;streamIn, SquareMatrix&lt; T, Count &gt; &amp;matrix)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>castor::operator&gt;&gt;</qualifiedname>
        <param>
          <type>std::basic_istream&lt; CharT &gt; &amp;</type>
          <declname>streamIn</declname>
        </param>
        <param>
          <type><ref refid="db/dc1/a09231" kindref="compound">SquareMatrix</ref>&lt; T, Count &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/SquareMatrix.hpp" line="266" column="22" declfile="CastorUtils/Math/SquareMatrix.hpp" declline="266" declcolumn="22"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="d2/dd2/a02279_1a0de5c07d759081bd828afd9620e1b346" prot="public" static="no" strong="yes">
        <type></type>
        <name>UnicityError</name>
        <qualifiedname>castor::UnicityError</qualifiedname>
        <enumvalue id="d2/dd2/a02279_1a0de5c07d759081bd828afd9620e1b346a702bc241399aa1925401dcc679ddc64a" prot="public">
          <name>eNoInstance</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a0de5c07d759081bd828afd9620e1b346a2c5bbc12f7834c4f6d81f001db6507cc" prot="public">
          <name>eAnInstance</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a0de5c07d759081bd828afd9620e1b346ae558bb69fadec037d9eae46601a4df8e" prot="public">
          <name>eCount</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a0de5c07d759081bd828afd9620e1b346abd967862789968b1f8571ca888fffc77" prot="public">
          <name>eMin</name>
          <initializer>=  eNoInstance</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumération des erreurs d&apos;unicité. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/UnicityException.hpp" line="19" column="1" bodyfile="CastorUtils/Design/UnicityException.hpp" bodystart="20" bodyend="26"/>
      </memberdef>
      <memberdef kind="enum" id="d2/dd2/a02279_1a2ca663b75d75cc82d9481b0c87b1cb59" prot="public" static="no" strong="yes">
        <type>uint8_t</type>
        <name>LogType</name>
        <qualifiedname>castor::LogType</qualifiedname>
        <enumvalue id="d2/dd2/a02279_1a2ca663b75d75cc82d9481b0c87b1cb59a884fd8777b228c63388fd108895217bf" prot="public">
          <name>eTrace</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Log de type trace. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a2ca663b75d75cc82d9481b0c87b1cb59a54aa5966939e3ea8616b09cc2f635312" prot="public">
          <name>eDebug</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Log de type debug. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a2ca663b75d75cc82d9481b0c87b1cb59a63751a38ef3979cde8e8fd54844fd5e2" prot="public">
          <name>eInfo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Log de type information. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a2ca663b75d75cc82d9481b0c87b1cb59a16ef90ced71f6e8c01f2f69f429708b8" prot="public">
          <name>eWarning</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Log de type avertissement. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a2ca663b75d75cc82d9481b0c87b1cb59a946db550abb284f3a919132343c4d984" prot="public">
          <name>eError</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Log de type erreur. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/dd2/a02279_1a2ca663b75d75cc82d9481b0c87b1cb59ae558bb69fadec037d9eae46601a4df8e" prot="public">
          <name>eCount</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compte des logs. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Définit les différents types de log. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Log/ELogType.hpp" line="15" column="1" bodyfile="CastorUtils/Log/ELogType.hpp" bodystart="17" bodyend="36"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d2/dd2/a02279_1a115884061fd2bb8f8aa86393887eaec5" prot="public" static="no">
        <type>int8_t</type>
        <definition>using castor::s8 =  int8_t</definition>
        <argsstring></argsstring>
        <name>s8</name>
        <qualifiedname>castor::s8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="45" column="1" bodyfile="CastorUtils/CastorUtils.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a2140af39ced32676a9844b96ae736159" prot="public" static="no">
        <type>uint8_t</type>
        <definition>using castor::u8 =  uint8_t</definition>
        <argsstring></argsstring>
        <name>u8</name>
        <qualifiedname>castor::u8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="46" column="1" bodyfile="CastorUtils/CastorUtils.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aca8563dfbb381d26a3914193c17100b2" prot="public" static="no">
        <type>uint8_t</type>
        <definition>using castor::byte =  uint8_t</definition>
        <argsstring></argsstring>
        <name>byte</name>
        <qualifiedname>castor::byte</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="47" column="1" bodyfile="CastorUtils/CastorUtils.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a9f585f2c7fe8620ba1b18624dc7573e2" prot="public" static="no">
        <type>int16_t</type>
        <definition>using castor::s16 =  int16_t</definition>
        <argsstring></argsstring>
        <name>s16</name>
        <qualifiedname>castor::s16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="48" column="1" bodyfile="CastorUtils/CastorUtils.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ae464803bcf37ca3648adf8e222658365" prot="public" static="no">
        <type>uint16_t</type>
        <definition>using castor::u16 =  uint16_t</definition>
        <argsstring></argsstring>
        <name>u16</name>
        <qualifiedname>castor::u16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="49" column="1" bodyfile="CastorUtils/CastorUtils.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a56b4fefdc51947c070b45d9ee02694f2" prot="public" static="no">
        <type>int32_t</type>
        <definition>using castor::s32 =  int32_t</definition>
        <argsstring></argsstring>
        <name>s32</name>
        <qualifiedname>castor::s32</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="50" column="1" bodyfile="CastorUtils/CastorUtils.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a03cc011a86d6f847862db4cb35f25c65" prot="public" static="no">
        <type>uint32_t</type>
        <definition>using castor::u32 =  uint32_t</definition>
        <argsstring></argsstring>
        <name>u32</name>
        <qualifiedname>castor::u32</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="51" column="1" bodyfile="CastorUtils/CastorUtils.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ad0c1ab37102f354ad6a2175bdf2137af" prot="public" static="no">
        <type>int64_t</type>
        <definition>using castor::s64 =  int64_t</definition>
        <argsstring></argsstring>
        <name>s64</name>
        <qualifiedname>castor::s64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="52" column="1" bodyfile="CastorUtils/CastorUtils.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a0f72ab4a310a025bda4545402003a54c" prot="public" static="no">
        <type>uint64_t</type>
        <definition>using castor::u64 =  uint64_t</definition>
        <argsstring></argsstring>
        <name>u64</name>
        <qualifiedname>castor::u64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="53" column="1" bodyfile="CastorUtils/CastorUtils.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a0d78770791bfa19c33ee9db1d006c857" prot="public" static="no">
        <type>size_t</type>
        <definition>using castor::usize =  size_t</definition>
        <argsstring></argsstring>
        <name>usize</name>
        <qualifiedname>castor::usize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="54" column="1" bodyfile="CastorUtils/CastorUtils.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a58b6dbc665e4bc4c72a6ea0751a73d67" prot="public" static="no">
        <type>float</type>
        <definition>using castor::f32 =  float</definition>
        <argsstring></argsstring>
        <name>f32</name>
        <qualifiedname>castor::f32</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="55" column="1" bodyfile="CastorUtils/CastorUtils.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aad045ac823915853d76cdb9e79017f3b" prot="public" static="no">
        <type>double</type>
        <definition>using castor::f64 =  double</definition>
        <argsstring></argsstring>
        <name>f64</name>
        <qualifiedname>castor::f64</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="56" column="1" bodyfile="CastorUtils/CastorUtils.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a98169622bc976df3189194c2b35fbf60" prot="public" static="no">
        <type>char</type>
        <definition>using castor::xchar =  char</definition>
        <argsstring></argsstring>
        <name>xchar</name>
        <qualifiedname>castor::xchar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="54" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a4a12ceb3990ad6174c0bf74cd6bdf9fc" prot="public" static="no">
        <type>char</type>
        <definition>using castor::mbchar =  char</definition>
        <argsstring></argsstring>
        <name>mbchar</name>
        <qualifiedname>castor::mbchar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="60" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1afda6ed6bdd14be9135b3827cf81f7ce2" prot="public" static="no">
        <type>wchar_t</type>
        <definition>using castor::wchar =  wchar_t</definition>
        <argsstring></argsstring>
        <name>wchar</name>
        <qualifiedname>castor::wchar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="61" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a17d8877464f26e03b4bdec4ee0ba0518" prot="public" static="no">
        <type>char32_t</type>
        <definition>using castor::u32char =  char32_t</definition>
        <argsstring></argsstring>
        <name>u32char</name>
        <qualifiedname>castor::u32char</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="62" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" prot="public" static="no">
        <type>std::basic_string&lt; <ref refid="d2/dd2/a02279_1a98169622bc976df3189194c2b35fbf60" kindref="member">xchar</ref> &gt;</type>
        <definition>using castor::String =  std::basic_string&lt; xchar &gt;</definition>
        <argsstring></argsstring>
        <name>String</name>
        <qualifiedname>castor::String</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="64" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a7fc5aca9eb8d35e69abfe9df07e365e3" prot="public" static="no">
        <type>std::basic_string_view&lt; <ref refid="d2/dd2/a02279_1a98169622bc976df3189194c2b35fbf60" kindref="member">xchar</ref> &gt;</type>
        <definition>using castor::StringView =  std::basic_string_view&lt; xchar &gt;</definition>
        <argsstring></argsstring>
        <name>StringView</name>
        <qualifiedname>castor::StringView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="65" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ae7002b6add23b6f33bfde31351b5e8c9" prot="public" static="no">
        <type>std::basic_stringstream&lt; <ref refid="d2/dd2/a02279_1a98169622bc976df3189194c2b35fbf60" kindref="member">xchar</ref> &gt;</type>
        <definition>using castor::StringStream =  std::basic_stringstream&lt; xchar &gt;</definition>
        <argsstring></argsstring>
        <name>StringStream</name>
        <qualifiedname>castor::StringStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="66" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a94d62fa325e00abf00b18705df54a96b" prot="public" static="no">
        <type>std::basic_ostringstream&lt; <ref refid="d2/dd2/a02279_1a98169622bc976df3189194c2b35fbf60" kindref="member">xchar</ref> &gt;</type>
        <definition>using castor::OutputStringStream =  std::basic_ostringstream&lt; xchar &gt;</definition>
        <argsstring></argsstring>
        <name>OutputStringStream</name>
        <qualifiedname>castor::OutputStringStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="67" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a7a788d64b086263c3afbd8962fa7892e" prot="public" static="no">
        <type>std::basic_istringstream&lt; <ref refid="d2/dd2/a02279_1a98169622bc976df3189194c2b35fbf60" kindref="member">xchar</ref> &gt;</type>
        <definition>using castor::InputStringStream =  std::basic_istringstream&lt; xchar &gt;</definition>
        <argsstring></argsstring>
        <name>InputStringStream</name>
        <qualifiedname>castor::InputStringStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="68" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ac8dca26c22640aed8eaed8fee3a45069" prot="public" static="no">
        <type>std::basic_ostream&lt; <ref refid="d2/dd2/a02279_1a98169622bc976df3189194c2b35fbf60" kindref="member">xchar</ref> &gt;</type>
        <definition>using castor::OutputStream =  std::basic_ostream&lt; xchar &gt;</definition>
        <argsstring></argsstring>
        <name>OutputStream</name>
        <qualifiedname>castor::OutputStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="69" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ab37ec035a7be629e219b32532d962624" prot="public" static="no">
        <type>std::basic_istream&lt; <ref refid="d2/dd2/a02279_1a98169622bc976df3189194c2b35fbf60" kindref="member">xchar</ref> &gt;</type>
        <definition>using castor::InputStream =  std::basic_istream&lt; xchar &gt;</definition>
        <argsstring></argsstring>
        <name>InputStream</name>
        <qualifiedname>castor::InputStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="70" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" prot="public" static="no">
        <type>std::basic_string&lt; <ref refid="d2/dd2/a02279_1a4a12ceb3990ad6174c0bf74cd6bdf9fc" kindref="member">mbchar</ref> &gt;</type>
        <definition>using castor::MbString =  std::basic_string&lt; mbchar &gt;</definition>
        <argsstring></argsstring>
        <name>MbString</name>
        <qualifiedname>castor::MbString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="72" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a23b979cd0649684711c624066876c890" prot="public" static="no">
        <type>std::basic_string_view&lt; <ref refid="d2/dd2/a02279_1a4a12ceb3990ad6174c0bf74cd6bdf9fc" kindref="member">mbchar</ref> &gt;</type>
        <definition>using castor::MbStringView =  std::basic_string_view&lt; mbchar &gt;</definition>
        <argsstring></argsstring>
        <name>MbStringView</name>
        <qualifiedname>castor::MbStringView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="73" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a367b87022dc0d81717379070ea34fa16" prot="public" static="no">
        <type>std::basic_stringstream&lt; <ref refid="d2/dd2/a02279_1a4a12ceb3990ad6174c0bf74cd6bdf9fc" kindref="member">mbchar</ref> &gt;</type>
        <definition>using castor::MbStringStream =  std::basic_stringstream&lt; mbchar &gt;</definition>
        <argsstring></argsstring>
        <name>MbStringStream</name>
        <qualifiedname>castor::MbStringStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="74" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a66a255be73c45ea4988a6db770cee8ec" prot="public" static="no">
        <type>std::basic_ostringstream&lt; <ref refid="d2/dd2/a02279_1a4a12ceb3990ad6174c0bf74cd6bdf9fc" kindref="member">mbchar</ref> &gt;</type>
        <definition>using castor::MbOutputStringStream =  std::basic_ostringstream&lt; mbchar &gt;</definition>
        <argsstring></argsstring>
        <name>MbOutputStringStream</name>
        <qualifiedname>castor::MbOutputStringStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="75" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ac0413516dc52b4658dbf5709405826a5" prot="public" static="no">
        <type>std::basic_istringstream&lt; <ref refid="d2/dd2/a02279_1a4a12ceb3990ad6174c0bf74cd6bdf9fc" kindref="member">mbchar</ref> &gt;</type>
        <definition>using castor::MbInputStringStream =  std::basic_istringstream&lt; mbchar &gt;</definition>
        <argsstring></argsstring>
        <name>MbInputStringStream</name>
        <qualifiedname>castor::MbInputStringStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="76" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a986281a2ae49fd15d3f982cda92f6c4a" prot="public" static="no">
        <type>std::basic_ostream&lt; <ref refid="d2/dd2/a02279_1a4a12ceb3990ad6174c0bf74cd6bdf9fc" kindref="member">mbchar</ref> &gt;</type>
        <definition>using castor::MbOutputStream =  std::basic_ostream&lt; mbchar &gt;</definition>
        <argsstring></argsstring>
        <name>MbOutputStream</name>
        <qualifiedname>castor::MbOutputStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="77" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a28a5de82f01ce5906c3e7ad0616bfd9a" prot="public" static="no">
        <type>std::basic_istream&lt; <ref refid="d2/dd2/a02279_1a4a12ceb3990ad6174c0bf74cd6bdf9fc" kindref="member">mbchar</ref> &gt;</type>
        <definition>using castor::MbInputStream =  std::basic_istream&lt; mbchar &gt;</definition>
        <argsstring></argsstring>
        <name>MbInputStream</name>
        <qualifiedname>castor::MbInputStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="78" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ae5b1e9a2409f0870782a59af6208c267" prot="public" static="no">
        <type>std::basic_string&lt; <ref refid="d2/dd2/a02279_1afda6ed6bdd14be9135b3827cf81f7ce2" kindref="member">wchar</ref> &gt;</type>
        <definition>using castor::WString =  std::basic_string&lt; wchar &gt;</definition>
        <argsstring></argsstring>
        <name>WString</name>
        <qualifiedname>castor::WString</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="80" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aafdc86d433d684fbc82a6ee3e2958521" prot="public" static="no">
        <type>std::basic_string_view&lt; <ref refid="d2/dd2/a02279_1afda6ed6bdd14be9135b3827cf81f7ce2" kindref="member">wchar</ref> &gt;</type>
        <definition>using castor::WStringView =  std::basic_string_view&lt; wchar &gt;</definition>
        <argsstring></argsstring>
        <name>WStringView</name>
        <qualifiedname>castor::WStringView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="81" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ae0eb3278c65821db51985e94c342209a" prot="public" static="no">
        <type>std::basic_stringstream&lt; <ref refid="d2/dd2/a02279_1afda6ed6bdd14be9135b3827cf81f7ce2" kindref="member">wchar</ref> &gt;</type>
        <definition>using castor::WStringStream =  std::basic_stringstream&lt; wchar &gt;</definition>
        <argsstring></argsstring>
        <name>WStringStream</name>
        <qualifiedname>castor::WStringStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="82" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aceb8b413d84a39556782c4a8114417f4" prot="public" static="no">
        <type>std::basic_ostringstream&lt; <ref refid="d2/dd2/a02279_1afda6ed6bdd14be9135b3827cf81f7ce2" kindref="member">wchar</ref> &gt;</type>
        <definition>using castor::WOutputStringStream =  std::basic_ostringstream&lt; wchar &gt;</definition>
        <argsstring></argsstring>
        <name>WOutputStringStream</name>
        <qualifiedname>castor::WOutputStringStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="83" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a55415c50e49d003c89f09a1735cbdb94" prot="public" static="no">
        <type>std::basic_istringstream&lt; <ref refid="d2/dd2/a02279_1afda6ed6bdd14be9135b3827cf81f7ce2" kindref="member">wchar</ref> &gt;</type>
        <definition>using castor::WInputStringStream =  std::basic_istringstream&lt; wchar &gt;</definition>
        <argsstring></argsstring>
        <name>WInputStringStream</name>
        <qualifiedname>castor::WInputStringStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="84" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a5aae70a52c688e161fbfd44cde96ef2b" prot="public" static="no">
        <type>std::basic_ostream&lt; <ref refid="d2/dd2/a02279_1afda6ed6bdd14be9135b3827cf81f7ce2" kindref="member">wchar</ref> &gt;</type>
        <definition>using castor::WOutputStream =  std::basic_ostream&lt; wchar &gt;</definition>
        <argsstring></argsstring>
        <name>WOutputStream</name>
        <qualifiedname>castor::WOutputStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="85" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a1fd3d0b38f0151ed1e3689d7017e7bd2" prot="public" static="no">
        <type>std::basic_istream&lt; <ref refid="d2/dd2/a02279_1afda6ed6bdd14be9135b3827cf81f7ce2" kindref="member">wchar</ref> &gt;</type>
        <definition>using castor::WInputStream =  std::basic_istream&lt; wchar &gt;</definition>
        <argsstring></argsstring>
        <name>WInputStream</name>
        <qualifiedname>castor::WInputStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="86" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a711230db9a0d01b63d4a842b71cf1f95" prot="public" static="no">
        <type>std::basic_string&lt; <ref refid="d2/dd2/a02279_1a17d8877464f26e03b4bdec4ee0ba0518" kindref="member">u32char</ref> &gt;</type>
        <definition>using castor::U32String =  std::basic_string&lt; u32char &gt;</definition>
        <argsstring></argsstring>
        <name>U32String</name>
        <qualifiedname>castor::U32String</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="88" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aa72b13919cde38f6ffb00426fc64c7e5" prot="public" static="no">
        <type>std::basic_string_view&lt; <ref refid="d2/dd2/a02279_1a17d8877464f26e03b4bdec4ee0ba0518" kindref="member">u32char</ref> &gt;</type>
        <definition>using castor::U32StringView =  std::basic_string_view&lt; u32char &gt;</definition>
        <argsstring></argsstring>
        <name>U32StringView</name>
        <qualifiedname>castor::U32StringView</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="89" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a43d49fb0342886c1b050b72254289b67" prot="public" static="no">
        <type>std::basic_stringstream&lt; <ref refid="d2/dd2/a02279_1a17d8877464f26e03b4bdec4ee0ba0518" kindref="member">u32char</ref> &gt;</type>
        <definition>using castor::U32StringStream =  std::basic_stringstream&lt; u32char &gt;</definition>
        <argsstring></argsstring>
        <name>U32StringStream</name>
        <qualifiedname>castor::U32StringStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="90" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a474ecce855c5631ef266f28c02126819" prot="public" static="no">
        <type>std::basic_ostringstream&lt; <ref refid="d2/dd2/a02279_1a17d8877464f26e03b4bdec4ee0ba0518" kindref="member">u32char</ref> &gt;</type>
        <definition>using castor::U32OutputStringStream =  std::basic_ostringstream&lt; u32char &gt;</definition>
        <argsstring></argsstring>
        <name>U32OutputStringStream</name>
        <qualifiedname>castor::U32OutputStringStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="91" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a087cf9671e896f01235c89b5353562cf" prot="public" static="no">
        <type>std::basic_istringstream&lt; <ref refid="d2/dd2/a02279_1a17d8877464f26e03b4bdec4ee0ba0518" kindref="member">u32char</ref> &gt;</type>
        <definition>using castor::U32InputStringStream =  std::basic_istringstream&lt; u32char &gt;</definition>
        <argsstring></argsstring>
        <name>U32InputStringStream</name>
        <qualifiedname>castor::U32InputStringStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="92" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a63025845dbd968e642c93265197b686e" prot="public" static="no">
        <type>std::basic_ostream&lt; <ref refid="d2/dd2/a02279_1a17d8877464f26e03b4bdec4ee0ba0518" kindref="member">u32char</ref> &gt;</type>
        <definition>using castor::U32OutputStream =  std::basic_ostream&lt; u32char &gt;</definition>
        <argsstring></argsstring>
        <name>U32OutputStream</name>
        <qualifiedname>castor::U32OutputStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="93" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a6e68efca2f7121a99dcaaad5b17e141a" prot="public" static="no">
        <type>std::basic_istream&lt; <ref refid="d2/dd2/a02279_1a17d8877464f26e03b4bdec4ee0ba0518" kindref="member">u32char</ref> &gt;</type>
        <definition>using castor::U32InputStream =  std::basic_istream&lt; u32char &gt;</definition>
        <argsstring></argsstring>
        <name>U32InputStream</name>
        <qualifiedname>castor::U32InputStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="94" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a171f0ae06cbbe361277eaab9ed92ec74" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class FuncT</type>
          </param>
        </templateparamlist>
        <type>std::function&lt; FuncT &gt;</type>
        <definition>using castor::Function =  std::function&lt; FuncT &gt;</definition>
        <argsstring></argsstring>
        <name>Function</name>
        <qualifiedname>castor::Function</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="97" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a2d339222ffb89e8324291fb135b12496" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename FirstT</type>
          </param>
          <param>
            <type>typename SecondT</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; FirstT, SecondT &gt;</type>
        <definition>using castor::Pair =  std::pair&lt; FirstT, SecondT &gt;</definition>
        <argsstring></argsstring>
        <name>Pair</name>
        <qualifiedname>castor::Pair</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="130" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ae55d0b1917b046899c7780d186c58c37" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename KeyT</type>
          </param>
          <param>
            <type>typename PredT</type>
            <defval>std::less&lt;&gt;</defval>
          </param>
          <param>
            <type>typename AllocT</type>
            <defval>std::allocator&lt; KeyT &gt;</defval>
          </param>
        </templateparamlist>
        <type>std::set&lt; KeyT, PredT, AllocT &gt;</type>
        <definition>using castor::Set =  std::set&lt; KeyT, PredT, AllocT &gt;</definition>
        <argsstring></argsstring>
        <name>Set</name>
        <qualifiedname>castor::Set</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="132" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a93b53452a3c421817a14b649ccec1fb7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename KeyT</type>
          </param>
          <param>
            <type>typename DataT</type>
          </param>
          <param>
            <type>typename PredT</type>
            <defval>std::less&lt;&gt;</defval>
          </param>
          <param>
            <type>typename AllocT</type>
            <defval>std::allocator&lt; Pair&lt; KeyT const, DataT &gt; &gt;</defval>
          </param>
        </templateparamlist>
        <type>std::map&lt; KeyT, DataT, PredT, AllocT &gt;</type>
        <definition>using castor::Map =  std::map&lt; KeyT, DataT, PredT, AllocT &gt;</definition>
        <argsstring></argsstring>
        <name>Map</name>
        <qualifiedname>castor::Map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="134" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1af344c17ffaf561883f9426288bd186f2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename KeyT</type>
          </param>
          <param>
            <type>typename DataT</type>
          </param>
          <param>
            <type>typename PredT</type>
            <defval>std::less&lt;&gt;</defval>
          </param>
          <param>
            <type>typename AllocT</type>
            <defval>std::allocator&lt; Pair&lt; KeyT const, DataT &gt; &gt;</defval>
          </param>
        </templateparamlist>
        <type>std::multimap&lt; KeyT, DataT, PredT, AllocT &gt;</type>
        <definition>using castor::MultiMap =  std::multimap&lt; KeyT, DataT, PredT, AllocT &gt;</definition>
        <argsstring></argsstring>
        <name>MultiMap</name>
        <qualifiedname>castor::MultiMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="136" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1adf5e585082ceda19e5f450b382dba67d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename KeyT</type>
          </param>
          <param>
            <type>typename DataT</type>
          </param>
          <param>
            <type>typename PredT</type>
            <defval>std::less&lt;&gt;</defval>
          </param>
          <param>
            <type>typename AllocT</type>
            <defval>std::allocator&lt; KeyT &gt;</defval>
          </param>
        </templateparamlist>
        <type>std::multiset&lt; KeyT, PredT, AllocT &gt;</type>
        <definition>using castor::MultiSet =  std::multiset&lt; KeyT, PredT, AllocT &gt;</definition>
        <argsstring></argsstring>
        <name>MultiSet</name>
        <qualifiedname>castor::MultiSet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="138" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a5f667ec3534f15e07b7825ade796cd2b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename KeyT</type>
          </param>
          <param>
            <type>typename DataT</type>
          </param>
          <param>
            <type>typename HashT</type>
            <defval>std::hash&lt; KeyT &gt;</defval>
          </param>
          <param>
            <type>typename KeyEqT</type>
            <defval>std::equal_to&lt;&gt;</defval>
          </param>
          <param>
            <type>typename AllocT</type>
            <defval>std::allocator&lt; Pair&lt; KeyT const, DataT &gt; &gt;</defval>
          </param>
        </templateparamlist>
        <type>std::unordered_map&lt; KeyT, DataT, HashT, KeyEqT, AllocT &gt;</type>
        <definition>using castor::UnorderedMap =  std::unordered_map&lt; KeyT, DataT, HashT, KeyEqT, AllocT &gt;</definition>
        <argsstring></argsstring>
        <name>UnorderedMap</name>
        <qualifiedname>castor::UnorderedMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="140" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1af8f754e468ae7bee3f7cb9c73bc2615c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename KeyT</type>
          </param>
          <param>
            <type>typename HashT</type>
            <defval>std::hash&lt; KeyT &gt;</defval>
          </param>
          <param>
            <type>typename KeyEqT</type>
            <defval>std::equal_to&lt;&gt;</defval>
          </param>
          <param>
            <type>typename AllocT</type>
            <defval>std::allocator&lt; KeyT &gt;</defval>
          </param>
        </templateparamlist>
        <type>std::unordered_set&lt; KeyT, HashT, KeyEqT &gt;</type>
        <definition>using castor::UnorderedSet =  std::unordered_set&lt; KeyT, HashT, KeyEqT &gt;</definition>
        <argsstring></argsstring>
        <name>UnorderedSet</name>
        <qualifiedname>castor::UnorderedSet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="142" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename DataT</type>
          </param>
          <param>
            <type>typename AllocT</type>
            <defval>std::allocator&lt; DataT &gt;</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; DataT, AllocT &gt;</type>
        <definition>using castor::Vector =  std::vector&lt; DataT, AllocT &gt;</definition>
        <argsstring></argsstring>
        <name>Vector</name>
        <qualifiedname>castor::Vector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="144" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ad647f2440f3ac85908e69db85c3706ca" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename DataT</type>
          </param>
          <param>
            <type>typename AllocT</type>
            <defval>std::allocator&lt; DataT &gt;</defval>
          </param>
        </templateparamlist>
        <type>std::list&lt; DataT, AllocT &gt;</type>
        <definition>using castor::List =  std::list&lt; DataT, AllocT &gt;</definition>
        <argsstring></argsstring>
        <name>List</name>
        <qualifiedname>castor::List</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="146" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename DataT</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>SizeT</declname>
            <defname>SizeT</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; DataT, SizeT &gt;</type>
        <definition>using castor::Array =  std::array&lt; DataT, SizeT &gt;</definition>
        <argsstring></argsstring>
        <name>Array</name>
        <qualifiedname>castor::Array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="148" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a74f230fe112208da79caa0e9ddab4090" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class DataT</type>
          </param>
          <param>
            <type>class AllocT</type>
            <defval>std::allocator&lt; DataT &gt;</defval>
          </param>
        </templateparamlist>
        <type>std::deque&lt; DataT, AllocT &gt;</type>
        <definition>using castor::Deque =  std::deque&lt; DataT, AllocT &gt;</definition>
        <argsstring></argsstring>
        <name>Deque</name>
        <qualifiedname>castor::Deque</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="150" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a8fa348db8b901a4d5d1be99ba6cc7a23" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename DataT</type>
          </param>
          <param>
            <type>class ContainerT</type>
            <defval>Deque&lt; DataT &gt;</defval>
          </param>
        </templateparamlist>
        <type>std::stack&lt; DataT, ContainerT &gt;</type>
        <definition>using castor::Stack =  std::stack&lt; DataT, ContainerT &gt;</definition>
        <argsstring></argsstring>
        <name>Stack</name>
        <qualifiedname>castor::Stack</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="152" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1af776079ca1d2ee2d1b993f2d34011159" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename DataT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a93b53452a3c421817a14b649ccec1fb7" kindref="member">Map</ref>&lt; <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref>, DataT &gt;</type>
        <definition>using castor::StringMap =  Map&lt; String, DataT &gt;</definition>
        <argsstring></argsstring>
        <name>StringMap</name>
        <qualifiedname>castor::StringMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="155" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1afaceb665bb135b35bf24ad03bccf63b9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename DataT</type>
          </param>
        </templateparamlist>
        <type>std::unordered_map&lt; <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref>, DataT, <ref refid="d6/d79/a07955" kindref="compound">StringHash</ref>, std::equal_to&lt;&gt; &gt;</type>
        <definition>using castor::UnorderedStringMap =  std::unordered_map&lt; String, DataT, StringHash, std::equal_to&lt;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>UnorderedStringMap</name>
        <qualifiedname>castor::UnorderedStringMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="157" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a6ef394343b2d0cbec62bb05fedf4de05" prot="public" static="no">
        <type>std::set&lt; <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref>, <ref refid="d6/d79/a07955" kindref="compound">StringHash</ref>, std::equal_to&lt;&gt; &gt;</type>
        <definition>using castor::StringSet =  std::set&lt; String, StringHash, std::equal_to&lt;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>StringSet</name>
        <qualifiedname>castor::StringSet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="159" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a43d3f8492846b9730b235a47ad5ad06e" prot="public" static="no">
        <type>std::unordered_set&lt; <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref>, <ref refid="d6/d79/a07955" kindref="compound">StringHash</ref>, std::equal_to&lt;&gt; &gt;</type>
        <definition>using castor::UnorderedStringSet =  std::unordered_set&lt; String, StringHash, std::equal_to&lt;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>UnorderedStringSet</name>
        <qualifiedname>castor::UnorderedStringSet</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="160" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a9aaad646c84376a26f2d788244c11c3c" prot="public" static="no">
        <type>std::chrono::seconds</type>
        <definition>using castor::Seconds =  std::chrono::seconds</definition>
        <argsstring></argsstring>
        <name>Seconds</name>
        <qualifiedname>castor::Seconds</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="162" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a9bbae2d5d564fa58ccbb16ec1d0ed7a1" prot="public" static="no">
        <type>std::chrono::milliseconds</type>
        <definition>using castor::Milliseconds =  std::chrono::milliseconds</definition>
        <argsstring></argsstring>
        <name>Milliseconds</name>
        <qualifiedname>castor::Milliseconds</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="163" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aec9457602161bdb6bf2780b4c9798a5a" prot="public" static="no">
        <type>std::chrono::microseconds</type>
        <definition>using castor::Microseconds =  std::chrono::microseconds</definition>
        <argsstring></argsstring>
        <name>Microseconds</name>
        <qualifiedname>castor::Microseconds</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="164" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a57f7b67526f72e5483ea563f44eef9ef" prot="public" static="no">
        <type>std::chrono::nanoseconds</type>
        <definition>using castor::Nanoseconds =  std::chrono::nanoseconds</definition>
        <argsstring></argsstring>
        <name>Nanoseconds</name>
        <qualifiedname>castor::Nanoseconds</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="165" column="1" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a388fd75dcd12a3eb9749946a99143d02" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Lockable</type>
          </param>
        </templateparamlist>
        <type>std::unique_lock&lt; Lockable &gt;</type>
        <definition>using castor::UniqueLock =  std::unique_lock&lt; Lockable &gt;</definition>
        <argsstring></argsstring>
        <name>UniqueLock</name>
        <qualifiedname>castor::UniqueLock</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/MultiThreadConfig.hpp" line="20" column="1" bodyfile="CastorUtils/Config/MultiThreadConfig.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aac3763b795438810958473f0b84908fb" prot="public" static="no">
        <type>std::mutex</type>
        <definition>using castor::Mutex =  std::mutex</definition>
        <argsstring></argsstring>
        <name>Mutex</name>
        <qualifiedname>castor::Mutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/MultiThreadConfig.hpp" line="22" column="1" bodyfile="CastorUtils/Config/MultiThreadConfig.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a606c2c78804885010d3c95a99c9b4b1d" prot="public" static="no">
        <type>std::recursive_mutex</type>
        <definition>using castor::RecursiveMutex =  std::recursive_mutex</definition>
        <argsstring></argsstring>
        <name>RecursiveMutex</name>
        <qualifiedname>castor::RecursiveMutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/MultiThreadConfig.hpp" line="23" column="1" bodyfile="CastorUtils/Config/MultiThreadConfig.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a464d681cd265adfb1354f1f5adb9d0f6" prot="public" static="no">
        <type><ref refid="db/d36/a07959" kindref="compound">CheckedMutexT</ref>&lt; <ref refid="d2/dd2/a02279_1aac3763b795438810958473f0b84908fb" kindref="member">castor::Mutex</ref> &gt;</type>
        <definition>using castor::CheckedMutex =  CheckedMutexT&lt; castor::Mutex &gt;</definition>
        <argsstring></argsstring>
        <name>CheckedMutex</name>
        <qualifiedname>castor::CheckedMutex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/MultiThreadConfig.hpp" line="72" column="1" bodyfile="CastorUtils/Config/MultiThreadConfig.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aaac20e91bd22921708388c09abb51422" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class DataT</type>
          </param>
        </templateparamlist>
        <type>std::reference_wrapper&lt; DataT &gt;</type>
        <definition>using castor::ReferenceWrapper =  std::reference_wrapper&lt; DataT &gt;</definition>
        <argsstring></argsstring>
        <name>ReferenceWrapper</name>
        <qualifiedname>castor::ReferenceWrapper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/SmartPtr.hpp" line="29" column="1" bodyfile="CastorUtils/Config/SmartPtr.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a74ebc3ab545b69d0f3ec5b14af360c36" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class DataT</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; DataT &gt;</type>
        <definition>using castor::SharedPtr =  std::shared_ptr&lt; DataT &gt;</definition>
        <argsstring></argsstring>
        <name>SharedPtr</name>
        <qualifiedname>castor::SharedPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/SmartPtr.hpp" line="32" column="1" bodyfile="CastorUtils/Config/SmartPtr.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a1703e7c907eb1f09166a4dfb4d39985b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
          <param>
            <type>class DelT</type>
            <defval>std::default_delete&lt; TypeT &gt;</defval>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; TypeT, DelT &gt;</type>
        <definition>using castor::RawUniquePtr =  std::unique_ptr&lt; TypeT, DelT &gt;</definition>
        <argsstring></argsstring>
        <name>RawUniquePtr</name>
        <qualifiedname>castor::RawUniquePtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/SmartPtr.hpp" line="35" column="1" bodyfile="CastorUtils/Config/SmartPtr.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ac623881246e92c1d187a3a44b3e011f6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a1703e7c907eb1f09166a4dfb4d39985b" kindref="member">RawUniquePtr</ref>&lt; TypeT, <ref refid="d7/dbd/a07963" kindref="compound">Deleter</ref>&lt; TypeT &gt; &gt;</type>
        <definition>using castor::UniquePtr =  RawUniquePtr&lt; TypeT, Deleter&lt; TypeT &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>UniquePtr</name>
        <qualifiedname>castor::UniquePtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/SmartPtr.hpp" line="38" column="1" bodyfile="CastorUtils/Config/SmartPtr.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a0c23e5ad06cd83b41e7a911593b46a1c" prot="public" static="no">
        <type><ref refid="dd/dbb/a08207" kindref="compound">castor::FlagCombination</ref>&lt; <ref refid="d4/d10/a08003" kindref="compound">File</ref> :: OpenMode &gt;</type>
        <definition>using castor::FileOpenModes = castor::FlagCombination&lt;  File  ::  OpenMode  &gt;</definition>
        <argsstring></argsstring>
        <name>FileOpenModes</name>
        <qualifiedname>castor::FileOpenModes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/File.hpp" line="491" column="1" bodyfile="CastorUtils/Data/File.hpp" bodystart="491" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a97c073fe446566c23c60f76317f9bf59" prot="public" static="no">
        <type><ref refid="dd/dbb/a08207" kindref="compound">castor::FlagCombination</ref>&lt; <ref refid="d4/d10/a08003" kindref="compound">File</ref> :: CreateMode &gt;</type>
        <definition>using castor::FileCreateModes = castor::FlagCombination&lt;  File  ::  CreateMode  &gt;</definition>
        <argsstring></argsstring>
        <name>FileCreateModes</name>
        <qualifiedname>castor::FileCreateModes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/File.hpp" line="492" column="1" bodyfile="CastorUtils/Data/File.hpp" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a27a5fadabd88829c1fb75daab222a523" prot="public" static="no">
        <type><ref refid="d2/dd2/a02279_1a1703e7c907eb1f09166a4dfb4d39985b" kindref="member">castor::RawUniquePtr</ref>&lt; <ref refid="dc/d84/a08371" kindref="compound">ContextDeleter</ref> &gt;</type>
        <definition>using castor::ContextDeleterPtr =  castor::RawUniquePtr&lt; ContextDeleter &gt;</definition>
        <argsstring></argsstring>
        <name>ContextDeleterPtr</name>
        <qualifiedname>castor::ContextDeleterPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserContext.hpp" line="25" column="1" bodyfile="CastorUtils/FileParser/FileParserContext.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ae8c18a86f66d58ecdffa09d7b4d06803" prot="public" static="no">
        <type><ref refid="dc/de5/a08927_1a52800ce1981bb1dad7e1de85713ea40c" kindref="member">FontCacheTraits::ElementPtrT</ref></type>
        <definition>using castor::FontRes =  FontCacheTraits::ElementPtrT</definition>
        <argsstring></argsstring>
        <name>FontRes</name>
        <qualifiedname>castor::FontRes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/FontCache.hpp" line="57" column="1" bodyfile="CastorUtils/Graphics/FontCache.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a6c07a5d4a14a010afebad45a6c87e438" prot="public" static="no">
        <type><ref refid="dc/df8/a08263_1ab778cd9b7ca70fc3d8db4a6e49465034" kindref="member">FontCacheTraits::ElementObsT</ref></type>
        <definition>using castor::FontResPtr =  FontCacheTraits::ElementObsT</definition>
        <argsstring></argsstring>
        <name>FontResPtr</name>
        <qualifiedname>castor::FontResPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/FontCache.hpp" line="58" column="1" bodyfile="CastorUtils/Graphics/FontCache.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a91eacc350c18bc62d27b1a10f442c708" prot="public" static="no">
        <type><ref refid="d8/d73/a08235" kindref="compound">ResourceCacheTraitsT</ref>&lt; <ref refid="d6/d3e/a08939" kindref="compound">Image</ref>, <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &gt;</type>
        <definition>using castor::ImageCacheTraits =  ResourceCacheTraitsT&lt; Image, String &gt;</definition>
        <argsstring></argsstring>
        <name>ImageCacheTraits</name>
        <qualifiedname>castor::ImageCacheTraits</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageCache.hpp" line="98" column="1" bodyfile="CastorUtils/Graphics/ImageCache.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aa54986932aa7ed016fdb8e94c36b5f9d" prot="public" static="no">
        <type><ref refid="d7/df3/a08259" kindref="compound">ResourceCacheT</ref>&lt; <ref refid="d6/d3e/a08939" kindref="compound">Image</ref>, <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref>, <ref refid="d2/dd2/a02279_1a91eacc350c18bc62d27b1a10f442c708" kindref="member">ImageCacheTraits</ref> &gt;</type>
        <definition>using castor::ImageCache =  ResourceCacheT&lt; Image, String, ImageCacheTraits &gt;</definition>
        <argsstring></argsstring>
        <name>ImageCache</name>
        <qualifiedname>castor::ImageCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageCache.hpp" line="141" column="1" bodyfile="CastorUtils/Graphics/ImageCache.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aac8d24087e1a0dd9a9d027c40b145d94" prot="public" static="no">
        <type><ref refid="d6/d29/a08947_1a94cd82717221167efab398eb2d024a90" kindref="member">ImageCacheTraits::ElementPtrT</ref></type>
        <definition>using castor::ImageRes =  ImageCacheTraits::ElementPtrT</definition>
        <argsstring></argsstring>
        <name>ImageRes</name>
        <qualifiedname>castor::ImageRes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageCache.hpp" line="142" column="1" bodyfile="CastorUtils/Graphics/ImageCache.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a46b6c6550c04c84e401c4c521b8de6d1" prot="public" static="no">
        <type><ref refid="dc/df8/a08263_1ab778cd9b7ca70fc3d8db4a6e49465034" kindref="member">ImageCacheTraits::ElementObsT</ref></type>
        <definition>using castor::ImageResPtr =  ImageCacheTraits::ElementObsT</definition>
        <argsstring></argsstring>
        <name>ImageResPtr</name>
        <qualifiedname>castor::ImageResPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageCache.hpp" line="143" column="1" bodyfile="CastorUtils/Graphics/ImageCache.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a96ba1e9194a2423d2b203bf3f38e5552" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/d84/a09071" kindref="compound">LoggerStreambufT</ref>&lt; CharT, <ref refid="d2/db0/a09075" kindref="compound">TraceLoggerStreambufTraitsT</ref>&lt; CharT &gt; &gt;</type>
        <definition>using castor::TraceLoggerStreambufT =  LoggerStreambufT&lt; CharT, TraceLoggerStreambufTraitsT&lt; CharT &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TraceLoggerStreambufT</name>
        <qualifiedname>castor::TraceLoggerStreambufT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Log/LoggerStreambuf.hpp" line="227" column="1" bodyfile="CastorUtils/Log/LoggerStreambuf.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1ac74e3bcf57eab7fb12a413c2c4f260a8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/d84/a09071" kindref="compound">LoggerStreambufT</ref>&lt; CharT, <ref refid="d2/dd9/a09079" kindref="compound">DebugLoggerStreambufTraitsT</ref>&lt; CharT &gt; &gt;</type>
        <definition>using castor::DebugLoggerStreambufT =  LoggerStreambufT&lt; CharT, DebugLoggerStreambufTraitsT&lt; CharT &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>DebugLoggerStreambufT</name>
        <qualifiedname>castor::DebugLoggerStreambufT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Log/LoggerStreambuf.hpp" line="229" column="1" bodyfile="CastorUtils/Log/LoggerStreambuf.hpp" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a1ca33f5b75d661551655444a9e8ebf8c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/d84/a09071" kindref="compound">LoggerStreambufT</ref>&lt; CharT, <ref refid="d4/d76/a09083" kindref="compound">InfoLoggerStreambufTraitsT</ref>&lt; CharT &gt; &gt;</type>
        <definition>using castor::InfoLoggerStreambufT =  LoggerStreambufT&lt; CharT, InfoLoggerStreambufTraitsT&lt; CharT &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>InfoLoggerStreambufT</name>
        <qualifiedname>castor::InfoLoggerStreambufT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Log/LoggerStreambuf.hpp" line="231" column="1" bodyfile="CastorUtils/Log/LoggerStreambuf.hpp" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a557f76fb2b85cdb55518d2e28c67e7eb" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/d84/a09071" kindref="compound">LoggerStreambufT</ref>&lt; CharT, <ref refid="de/d5b/a09087" kindref="compound">WarningLoggerStreambufTraitsT</ref>&lt; CharT &gt; &gt;</type>
        <definition>using castor::WarningLoggerStreambufT =  LoggerStreambufT&lt; CharT, WarningLoggerStreambufTraitsT&lt; CharT &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>WarningLoggerStreambufT</name>
        <qualifiedname>castor::WarningLoggerStreambufT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Log/LoggerStreambuf.hpp" line="233" column="1" bodyfile="CastorUtils/Log/LoggerStreambuf.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a7e6d51696893aa68191297cc3b76a35a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/d84/a09071" kindref="compound">LoggerStreambufT</ref>&lt; CharT, <ref refid="d8/dc8/a09091" kindref="compound">ErrorLoggerStreambufTraitsT</ref>&lt; CharT &gt; &gt;</type>
        <definition>using castor::ErrorLoggerStreambufT =  LoggerStreambufT&lt; CharT, ErrorLoggerStreambufTraitsT&lt; CharT &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ErrorLoggerStreambufT</name>
        <qualifiedname>castor::ErrorLoggerStreambufT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Log/LoggerStreambuf.hpp" line="235" column="1" bodyfile="CastorUtils/Log/LoggerStreambuf.hpp" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aab393963225ba8fb4004f8af8ae9c9ff" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d6/dc3/a09191" kindref="compound">PointData</ref>&lt; T, 4u &gt;</type>
        <definition>using castor::QuaternionDataT =  PointData&lt; T, 4u &gt;</definition>
        <argsstring></argsstring>
        <name>QuaternionDataT</name>
        <qualifiedname>castor::QuaternionDataT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Quaternion.hpp" line="15" column="1" bodyfile="CastorUtils/Math/Quaternion.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a338a384816a9800611fb243b55b7eb1d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="dc/d2f/a09315" kindref="compound">RangedValueGetterT</ref>&lt; T &gt;::Type</type>
        <definition>using castor::UnRangedValueT =  typename RangedValueGetterT&lt; T &gt;::Type</definition>
        <argsstring></argsstring>
        <name>UnRangedValueT</name>
        <qualifiedname>castor::UnRangedValueT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="447" column="1" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1a4740fbfe951df8deaa724800f527f14d" prot="public" static="no">
        <type>void(<ref refid="d2/d31/a01811_1ae68a38b3de490a9c05e446490108cca0" kindref="member">CU_stdcall</ref> *)()</type>
        <definition>using castor::VoidFnType =  void( CU_stdcall * )( )</definition>
        <argsstring></argsstring>
        <name>VoidFnType</name>
        <qualifiedname>castor::VoidFnType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/DynamicLibrary.hpp" line="11" column="1" bodyfile="CastorUtils/Miscellaneous/DynamicLibrary.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/dd2/a02279_1aa43cdc5f10ae33b0c3492d894e55b16d" prot="public" static="no">
        <type><ref refid="d5/d4f/a09495" kindref="compound">BuddyAllocatorT</ref>&lt; <ref refid="dc/dc1/a09487" kindref="compound">BuddyAllocatorTraits</ref> &gt;</type>
        <definition>using castor::BuddyAllocator =  BuddyAllocatorT&lt; BuddyAllocatorTraits &gt;</definition>
        <argsstring></argsstring>
        <name>BuddyAllocator</name>
        <qualifiedname>castor::BuddyAllocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Pool/BuddyAllocator.hpp" line="176" column="1" bodyfile="CastorUtils/Pool/BuddyAllocator.hpp" bodystart="176" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="d2/dd2/a02279_1a90c093ecb8214ecc033523e0bb3f6a20" prot="public" static="yes" constexpr="yes" mutable="no">
        <type><ref refid="da/d68/a07951" kindref="compound">NoInit</ref> constexpr</type>
        <definition>NoInit constexpr castor::noInit</definition>
        <argsstring></argsstring>
        <name>noInit</name>
        <qualifiedname>castor::noInit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="43" column="25" bodyfile="CastorUtils/CastorUtils.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1abba16ae029767a35567e6610917d92b2" prot="public" static="yes" mutable="no">
        <type>const <ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref></type>
        <definition>const MbString castor::ERROR_UNKNOWN_OBJECT</definition>
        <argsstring></argsstring>
        <name>ERROR_UNKNOWN_OBJECT</name>
        <qualifiedname>castor::ERROR_UNKNOWN_OBJECT</qualifiedname>
        <initializer>= &quot;Unknown object type&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/Factory.hpp" line="17" column="23" bodyfile="CastorUtils/Design/Factory.hpp" bodystart="17" bodyend="-1"/>
        <referencedby refid="d4/da7/a08195_1a443ae4447b1ff6df0becc9b882158959" compoundref="dd/d8e/a01898" startline="195" endline="211">castor::Factory&lt; ObjT, KeyT, PtrTypeT, CreatorT, IdT, EntryT &gt;::create</referencedby>
        <referencedby refid="d2/dc6/a07295_1a7d2bbf802ab6e3918d8e326a52407bde" compoundref="de/d2c/a01553" startline="128" endline="152">castor3d::LightingModelFactory::create</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1ae96277d5a21fe42d561e0e9f41918251" prot="public" static="yes" mutable="no">
        <type><ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; <ref refid="d2/dd2/a02279_1a23b979cd0649684711c624066876c890" kindref="member">MbStringView</ref>, size_t(<ref refid="d2/dd2/a02279_1a0de5c07d759081bd828afd9620e1b346ae558bb69fadec037d9eae46601a4df8e" kindref="member">UnicityError::eCount</ref>) &gt; const</type>
        <definition>Array&lt; MbStringView, size_t( UnicityError::eCount ) &gt; const castor::STR_UNICITY_ERROR</definition>
        <argsstring></argsstring>
        <name>STR_UNICITY_ERROR</name>
        <qualifiedname>castor::STR_UNICITY_ERROR</qualifiedname>
        <initializer>{
		&quot;No instance for <ref refid="dc/d63/a08283" kindref="compound">Unique</ref> class &quot;,
		&quot;Duplicate instance for <ref refid="dc/d63/a08283" kindref="compound">Unique</ref> class &quot;,
	}</initializer>
        <briefdescription>
<para>Textes des erreurs d&apos;unicité </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/UnicityException.hpp" line="33" column="20" bodyfile="CastorUtils/Design/UnicityException.hpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1aafc30a53f25dd72ce125d63b765b3b4b" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>ParameterType</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::isArithmeticTypeV</definition>
        <argsstring></argsstring>
        <name>isArithmeticTypeV</name>
        <qualifiedname>castor::isArithmeticTypeV</qualifiedname>
        <initializer>= <ref refid="d5/d41/a08679" kindref="compound">IsArithmeticType</ref>&lt; Type &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterHelpers.hpp" line="810" column="23" bodyfile="CastorUtils/FileParser/ParserParameterHelpers.hpp" bodystart="810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a85006f0e95c0954aaa69e377b9aa9972" prot="public" static="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>details::ValueTypeT</type>
            <declname>DataT</declname>
            <defname>DataT</defname>
          </param>
          <param>
            <type>DataT ...</type>
            <declname>ValuesT</declname>
            <defname>ValuesT</defname>
          </param>
        </templateparamlist>
        <type>DataT</type>
        <definition>DataT castor::minValueT</definition>
        <argsstring></argsstring>
        <name>minValueT</name>
        <qualifiedname>castor::minValueT</qualifiedname>
        <initializer>= <ref refid="d1/dab/a09151" kindref="compound">details::MinRecT</ref>&lt; DataT, ValuesT... &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Math.hpp" line="177" column="14" bodyfile="CastorUtils/Math/Math.hpp" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1af448f1575bd124bda88203cf5f2cf8d6" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>details::ValueTypeT</type>
            <declname>DataT</declname>
            <defname>DataT</defname>
          </param>
          <param>
            <type>DataT ...</type>
            <declname>ValuesT</declname>
            <defname>ValuesT</defname>
          </param>
        </templateparamlist>
        <type>DataT constexpr</type>
        <definition>DataT constexpr castor::maxValueT</definition>
        <argsstring></argsstring>
        <name>maxValueT</name>
        <qualifiedname>castor::maxValueT</qualifiedname>
        <initializer>= <ref refid="de/d26/a09167" kindref="compound">details::MaxRecT</ref>&lt; DataT, ValuesT... &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Math.hpp" line="180" column="24" bodyfile="CastorUtils/Math/Math.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a18f939276a5da0da9ae097aa28d4e9f1" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::isRangedValueT</definition>
        <argsstring></argsstring>
        <name>isRangedValueT</name>
        <qualifiedname>castor::isRangedValueT</qualifiedname>
        <initializer>= <ref refid="d3/dc3/a09307" kindref="compound">IsRangedValueT</ref>&lt; T &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="432" column="30" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/dd2/a02279_1a228e1f50b365a5d282ae24add14ee946" prot="public" static="yes" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type>bool constexpr</type>
        <definition>bool constexpr castor::isSpeedT</definition>
        <argsstring></argsstring>
        <name>isSpeedT</name>
        <qualifiedname>castor::isSpeedT</qualifiedname>
        <initializer>= <ref refid="d3/def/a09339" kindref="compound">IsSpeedT</ref>&lt; ValueT &gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Speed.hpp" line="242" column="23" bodyfile="CastorUtils/Math/Speed.hpp" bodystart="242" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="d2/dd2/a02279_1ac966ce5a232271cb63f592293488a0e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void *</type>
        <definition>CU_API void * castor::alignedAlloc</definition>
        <argsstring>(size_t alignment, size_t size)</argsstring>
        <name>alignedAlloc</name>
        <qualifiedname>castor::alignedAlloc</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Alloue de la mémoire alignée. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur d&apos;alignement, doit être une puissance de deux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>La taille désirée. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La mémoire allouée, nullptr en cas d&apos;erreur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Align/Aligned.hpp" line="25" column="14" declfile="CastorUtils/Align/Aligned.hpp" declline="25" declcolumn="14"/>
        <referencedby refid="d2/dd2/a02279_1a7e04eedd6b3f29c9d882fac3d352d4e2" compoundref="dd/d20/a01772" startline="48" endline="52">alignedAlloc</referencedby>
        <referencedby refid="d6/d92/a07935_1aab3ac5d49d6ecaf9fabb55c7377a6b95" compoundref="d1/d6b/a01775" startline="23" endline="27">castor::AlignedMemoryAllocator&lt; Align &gt;::allocate</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4ae90a1c02af9510b8c10ed730dbb2f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::alignedFree</definition>
        <argsstring>(void *memory)</argsstring>
        <name>alignedFree</name>
        <qualifiedname>castor::alignedFree</qualifiedname>
        <param>
          <type>void *</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
<para>Désalloue de la mémoire alignée. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">memory</parametername>
</parameternamelist>
<parameterdescription>
<para>La mémoire. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Align/Aligned.hpp" line="34" column="13" declfile="CastorUtils/Align/Aligned.hpp" declline="34" declcolumn="13"/>
        <referencedby refid="d6/d92/a07935_1a17f4ecdfe27104d697c8cc923007d1f4" compoundref="d1/d6b/a01775" startline="36" endline="39">castor::AlignedMemoryAllocator&lt; Align &gt;::deallocate</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7e04eedd6b3f29c9d882fac3d352d4e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * castor::alignedAlloc</definition>
        <argsstring>(size_t alignment, size_t size)</argsstring>
        <name>alignedAlloc</name>
        <qualifiedname>castor::alignedAlloc</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Alloue de la mémoire alignée. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur d&apos;alignement, doit être une puissance de deux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>La taille désirée. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La mémoire allouée, nullptr en cas d&apos;erreur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Align/Aligned.hpp" line="48" column="4" bodyfile="CastorUtils/Align/Aligned.hpp" bodystart="48" bodyend="52"/>
        <references refid="d2/dd2/a02279_1ac966ce5a232271cb63f592293488a0e0">alignedAlloc</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a60d4a2eedf67cdd6c902e02cc5aeb21d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>class castor::CU_Alignas</definition>
        <argsstring>(A) Aligned</argsstring>
        <name>CU_Alignas</name>
        <qualifiedname>castor::CU_Alignas</qualifiedname>
        <param>
          <type>A</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Align/Aligned.hpp" line="48" column="4" bodyfile="CastorUtils/Align/Aligned.hpp" bodystart="55" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3d6312246e87a16613b473d5c1055626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>class castor::CU_Alignas</definition>
        <argsstring>(alignof(T)) AlignedFrom</argsstring>
        <name>CU_Alignas</name>
        <qualifiedname>castor::CU_Alignas</qualifiedname>
        <param>
          <type>alignof(T)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Align/Aligned.hpp" line="48" column="4" bodyfile="CastorUtils/Align/Aligned.hpp" bodystart="101" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a536be282960b074eb28d1bdfa4a6602d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareVector</definition>
        <argsstring>(byte, Byte)</argsstring>
        <name>CU_DeclareVector</name>
        <qualifiedname>castor::CU_DeclareVector</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aca8563dfbb381d26a3914193c17100b2" kindref="member">byte</ref></type>
        </param>
        <param>
          <type>Byte</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="58" column="1" declfile="CastorUtils/CastorUtils.hpp" declline="58" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac2484ade09881370f94f416dcefa27e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareVector</definition>
        <argsstring>(s32, Int32)</argsstring>
        <name>CU_DeclareVector</name>
        <qualifiedname>castor::CU_DeclareVector</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a56b4fefdc51947c070b45d9ee02694f2" kindref="member">s32</ref></type>
        </param>
        <param>
          <type>Int32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="59" column="1" declfile="CastorUtils/CastorUtils.hpp" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a41091a96aacc42185f4ac4ce04fc9528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareVector</definition>
        <argsstring>(u32, UInt32)</argsstring>
        <name>CU_DeclareVector</name>
        <qualifiedname>castor::CU_DeclareVector</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a03cc011a86d6f847862db4cb35f25c65" kindref="member">u32</ref></type>
        </param>
        <param>
          <type>UInt32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/CastorUtils.hpp" line="60" column="1" declfile="CastorUtils/CastorUtils.hpp" declline="60" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af92c246cb039e7c6748333c997f5a371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareVector</definition>
        <argsstring>(MbString, MbString)</argsstring>
        <name>CU_DeclareVector</name>
        <qualifiedname>castor::CU_DeclareVector</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref></type>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="167" column="1" declfile="CastorUtils/Config/ConfigModule.hpp" declline="167" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a10046519531b037640f7625b392449fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareVector</definition>
        <argsstring>(String, String)</argsstring>
        <name>CU_DeclareVector</name>
        <qualifiedname>castor::CU_DeclareVector</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="168" column="1" declfile="CastorUtils/Config/ConfigModule.hpp" declline="168" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a97006f99e1f2f3199528fc58c7f69e94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareVector</definition>
        <argsstring>(StringView, StringView)</argsstring>
        <name>CU_DeclareVector</name>
        <qualifiedname>castor::CU_DeclareVector</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a7fc5aca9eb8d35e69abfe9df07e365e3" kindref="member">StringView</ref></type>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a7fc5aca9eb8d35e69abfe9df07e365e3" kindref="member">StringView</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="169" column="1" declfile="CastorUtils/Config/ConfigModule.hpp" declline="169" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0a2e489c53f701e4762c4ce75480499e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareVector</definition>
        <argsstring>(MbStringView, MbStringView)</argsstring>
        <name>CU_DeclareVector</name>
        <qualifiedname>castor::CU_DeclareVector</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a23b979cd0649684711c624066876c890" kindref="member">MbStringView</ref></type>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a23b979cd0649684711c624066876c890" kindref="member">MbStringView</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="170" column="1" declfile="CastorUtils/Config/ConfigModule.hpp" declline="170" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a38f52759fd7c498b7c933bac19951c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMap</definition>
        <argsstring>(String, uint32_t, UInt32Str)</argsstring>
        <name>CU_DeclareMap</name>
        <qualifiedname>castor::CU_DeclareMap</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        </param>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type>UInt32Str</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="171" column="1" declfile="CastorUtils/Config/ConfigModule.hpp" declline="171" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9b6e63b2c417815c2e70557ab1be10d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMap</definition>
        <argsstring>(String, uint64_t, UInt64Str)</argsstring>
        <name>CU_DeclareMap</name>
        <qualifiedname>castor::CU_DeclareMap</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        </param>
        <param>
          <type>uint64_t</type>
        </param>
        <param>
          <type>UInt64Str</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="172" column="1" declfile="CastorUtils/Config/ConfigModule.hpp" declline="172" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a07d096a1be89a50a8616027b598e1c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMap</definition>
        <argsstring>(String, bool, BoolStr)</argsstring>
        <name>CU_DeclareMap</name>
        <qualifiedname>castor::CU_DeclareMap</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>BoolStr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="173" column="1" declfile="CastorUtils/Config/ConfigModule.hpp" declline="173" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa09755ede02b1abcd6b478f981d941bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMap</definition>
        <argsstring>(String, String, StrStr)</argsstring>
        <name>CU_DeclareMap</name>
        <qualifiedname>castor::CU_DeclareMap</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        </param>
        <param>
          <type>StrStr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="174" column="1" declfile="CastorUtils/Config/ConfigModule.hpp" declline="174" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a661dff212d9b2425b9f9e997fb8107a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareSet</definition>
        <argsstring>(String, Str)</argsstring>
        <name>CU_DeclareSet</name>
        <qualifiedname>castor::CU_DeclareSet</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        </param>
        <param>
          <type>Str</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="175" column="1" declfile="CastorUtils/Config/ConfigModule.hpp" declline="175" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aba8a0864432a0a373ccef220e9ab590a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareMap</definition>
        <argsstring>(uint32_t, String, StrUInt32)</argsstring>
        <name>CU_DeclareMap</name>
        <qualifiedname>castor::CU_DeclareMap</qualifiedname>
        <param>
          <type>uint32_t</type>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        </param>
        <param>
          <type>StrUInt32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="176" column="1" declfile="CastorUtils/Config/ConfigModule.hpp" declline="176" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad7f30330ae6e293036e7c11299ec7ad4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
        </templateparamlist>
        <type>std::basic_stringstream&lt; CharT &gt;</type>
        <definition>std::basic_stringstream&lt; CharT &gt; castor::makeStringStreamT</definition>
        <argsstring>()</argsstring>
        <name>makeStringStreamT</name>
        <qualifiedname>castor::makeStringStreamT</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Un std::stringstream utilisant une locale C. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="184" column="32" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="184" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af41ea5b34edb8c4103f57937867ea4d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1ae7002b6add23b6f33bfde31351b5e8c9" kindref="member">StringStream</ref></type>
        <definition>StringStream castor::makeStringStream</definition>
        <argsstring>()</argsstring>
        <name>makeStringStream</name>
        <qualifiedname>castor::makeStringStream</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Un std::stringstream utilisant une locale C. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="197" column="21" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="197" bodyend="200"/>
        <referencedby refid="d4/ddb/a08183_1ac2c906e2a0bc035bfc901295e45fa52b" compoundref="d1/db0/a01928" startline="48" endline="61">castor::ConnectionT&lt; MySignalT &gt;::ConnectionT</referencedby>
        <referencedby refid="d4/d9c/a03231_1a8828d359b7a61ea2b657d5aada2dd87b" compoundref="d4/de0/a11669" startline="84" endline="103">castor3d::BinaryWriterBase&lt; TWritten &gt;::doWriteHeader</referencedby>
        <referencedby refid="d2/d96/a08355_1ada321c02ff8fd2e8084701084961b3f2" compoundref="d0/dce/a01946" startline="37" endline="49">castor::Exception::Exception</referencedby>
        <referencedby refid="d8/da3/a08255_1a3f6cbb3c0ad8d6136141c4c089f7f479" compoundref="dd/d19/a01922" startline="624" endline="631">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::reportAdded</referencedby>
        <referencedby refid="d8/da3/a08255_1aa1689ccd9a406fe8dfe9ff473d226b5e" compoundref="dd/d19/a01922" startline="615" endline="622">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::reportCreation</referencedby>
        <referencedby refid="d8/da3/a08255_1aa24d9472022aa0f450529b07d9b7f743" compoundref="dd/d19/a01922" startline="633" endline="640">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::reportDuplicate</referencedby>
        <referencedby refid="d8/da3/a08255_1a9c25c01ca8f76ad4a25088101572200d" compoundref="dd/d19/a01922" startline="642" endline="647">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::reportNull</referencedby>
        <referencedby refid="d8/da3/a08255_1a6537032eaeeadaffea633743e3218e53" compoundref="dd/d19/a01922" startline="649" endline="656">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::reportUnknown</referencedby>
        <referencedby refid="d2/df4/a08275_1a5136cd1e55e53e66d851b0db40dcdacd" compoundref="de/da9/a01934" startline="53" endline="66">castor::TSConnectionT&lt; SignalT &gt;::TSConnectionT</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab063f33ab8c390c2522ef198128a0d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>CU_API String castor::makeString</definition>
        <argsstring>(MbStringView const &amp;in)</argsstring>
        <name>makeString</name>
        <qualifiedname>castor::makeString</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a23b979cd0649684711c624066876c890" kindref="member">MbStringView</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="202" column="15" declfile="CastorUtils/Config/ConfigModule.hpp" declline="202" declcolumn="15"/>
        <referencedby refid="d9/dba/a02278_1a89ee8e4edb4c883ef7c66b8dc60cc430" compoundref="d3/d5e/a00275" startline="393" endline="404">castor3d::getEnumMapT</referencedby>
        <referencedby refid="d7/d44/a09387_1a94604a7fecda56ec2dc96a71afb62ffc" compoundref="d7/db7/a02198" startline="145" endline="148">castor::DynamicLibrary::getFunction</referencedby>
        <referencedby refid="d7/d44/a09387_1aedc2b6b4e2ee1af69de155aa1eb82d4f" compoundref="d7/db7/a02198" startline="93" endline="96">castor::DynamicLibrary::getFunction</referencedby>
        <referencedby refid="d7/d44/a09387_1ab9afed02bb8a6953060162dac097d6ad" compoundref="d7/db7/a02198" startline="110" endline="113">castor::DynamicLibrary::getFunction</referencedby>
        <referencedby refid="d7/d44/a09387_1adf586f02dfe6b7673d6516b871fe6d65" compoundref="d7/db7/a02198" startline="162" endline="165">castor::DynamicLibrary::getFunction</referencedby>
        <referencedby refid="d5/d4e/a06559_1a3659fd9eef3e0280efd695e86e1f8d55" compoundref="dd/d9e/a01226" startline="344" endline="347">castor3d::RenderSystem::getRendererType</referencedby>
        <referencedby refid="d2/dd2/a02279_1a5c70f57e5b7db4beedde211d11027e11" compoundref="d5/d12/a01799" startline="225" endline="228">makeString</referencedby>
        <referencedby refid="d2/dd2/a02279_1a53f26a7cb52353880bbb73d03acf5dc5" compoundref="d5/d12/a01799" startline="240" endline="243">makeString</referencedby>
        <referencedby refid="d2/dd2/a02279_1aba469b84d749e671b0181d1ae2748c43" compoundref="d5/d12/a01799" startline="210" endline="213">makeString</referencedby>
        <referencedby refid="d2/dd2/a02279_1aba5e6f721601b35f849317c875ec96b7" compoundref="d5/d12/a01799" startline="235" endline="238">makeString</referencedby>
        <referencedby refid="d2/dd2/a02279_1a32904c4bce6b0f5f9fa6abf61e7f0628" compoundref="d5/d12/a01799" startline="250" endline="253">makeString</referencedby>
        <referencedby refid="d2/dd2/a02279_1a6b6e87f6310fe46aa98a4b97d34a11d3" compoundref="d5/d12/a01799" startline="220" endline="223">makeString</referencedby>
        <referencedby refid="d2/dd2/a02279_1af57b8719a6d30f1ccb3a4d25d0c68f9b" compoundref="d5/d12/a01799" startline="230" endline="233">makeString</referencedby>
        <referencedby refid="d2/dd2/a02279_1a6a6bae6782b3132246c0f1d9282acf22" compoundref="d5/d12/a01799" startline="245" endline="248">makeString</referencedby>
        <referencedby refid="d2/dd2/a02279_1a29a96cf750f6ed609491ab8c73f1e8fc" compoundref="d5/d12/a01799" startline="215" endline="218">makeString</referencedby>
        <referencedby refid="da/dc7/a03407_1ab3e16eea9051bc679aff2782279aafea" compoundref="db/ddf/a00164" startline="179" endline="199">castor3d::ChunkParser&lt; castor::Path &gt;::parse</referencedby>
        <referencedby refid="d5/dff/a03403_1acf5c3a4513e23e175339295361d35119" compoundref="db/ddf/a00164" startline="134" endline="154">castor3d::ChunkParser&lt; castor::String &gt;::parse</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8ea0aae8dd058beae8b5eccf7239a536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>CU_API String castor::makeString</definition>
        <argsstring>(WStringView const &amp;in)</argsstring>
        <name>makeString</name>
        <qualifiedname>castor::makeString</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aafdc86d433d684fbc82a6ee3e2958521" kindref="member">WStringView</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="203" column="15" declfile="CastorUtils/Config/ConfigModule.hpp" declline="203" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac2c11263e76b7f6ea60868e6e49af57a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>CU_API String castor::makeString</definition>
        <argsstring>(U32StringView const &amp;in)</argsstring>
        <name>makeString</name>
        <qualifiedname>castor::makeString</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aa72b13919cde38f6ffb00426fc64c7e5" kindref="member">U32StringView</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="204" column="15" declfile="CastorUtils/Config/ConfigModule.hpp" declline="204" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab0fb14b20a64ca391cfd363dfdf2ea78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref></type>
        <definition>CU_API MbString castor::toUtf8</definition>
        <argsstring>(WStringView in)</argsstring>
        <name>toUtf8</name>
        <qualifiedname>castor::toUtf8</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aafdc86d433d684fbc82a6ee3e2958521" kindref="member">WStringView</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="206" column="17" declfile="CastorUtils/Config/ConfigModule.hpp" declline="206" declcolumn="17"/>
        <referencedby refid="d2/d96/a08355_1ada321c02ff8fd2e8084701084961b3f2" compoundref="d0/dce/a01946" startline="37" endline="49">castor::Exception::Exception</referencedby>
        <referencedby refid="d9/d93/a09063_1a4f61e72052a859380db649389aad8a2e" compoundref="d8/dd8/a02108" startline="172" endline="175">castor::LoggerInstance::lockedLogDebug</referencedby>
        <referencedby refid="d9/d93/a09063_1aaf5ef58330171a8b586b895eeb18a00a" compoundref="d8/dd8/a02108" startline="185" endline="188">castor::LoggerInstance::lockedLogDebugNoLF</referencedby>
        <referencedby refid="d9/d93/a09063_1a36031590962ad449dd5c58e87622eb1e" compoundref="d8/dd8/a02108" startline="424" endline="427">castor::LoggerInstance::lockedLogError</referencedby>
        <referencedby refid="d9/d93/a09063_1a4941cbe1ad639a27e1464d97db9d170c" compoundref="d8/dd8/a02108" startline="437" endline="440">castor::LoggerInstance::lockedLogErrorNoLF</referencedby>
        <referencedby refid="d9/d93/a09063_1abfda8e88f9747430ef211ea58372accf" compoundref="d8/dd8/a02108" startline="256" endline="259">castor::LoggerInstance::lockedLogInfo</referencedby>
        <referencedby refid="d9/d93/a09063_1a1e4f1be0886c313ebe007e464bc2464b" compoundref="d8/dd8/a02108" startline="269" endline="272">castor::LoggerInstance::lockedLogInfoNoLF</referencedby>
        <referencedby refid="d9/d93/a09063_1af1210bf21788ee77ae5c77f616311be0" compoundref="d8/dd8/a02108" startline="88" endline="91">castor::LoggerInstance::lockedLogTrace</referencedby>
        <referencedby refid="d9/d93/a09063_1a8dc180a32872562f42b9a8010094238d" compoundref="d8/dd8/a02108" startline="101" endline="104">castor::LoggerInstance::lockedLogTraceNoLF</referencedby>
        <referencedby refid="d9/d93/a09063_1ad2eba85b04653b5a41f94c146ab2ebee" compoundref="d8/dd8/a02108" startline="340" endline="343">castor::LoggerInstance::lockedLogWarning</referencedby>
        <referencedby refid="d9/d93/a09063_1a141485a04ce428b4dedef91330e23c70" compoundref="d8/dd8/a02108" startline="353" endline="356">castor::LoggerInstance::lockedLogWarningNoLF</referencedby>
        <referencedby refid="df/d8e/a09047_1ab5f29877f7cae162e792be01f0789eef" compoundref="db/d95/a11696" startline="213" endline="216">castor::Logger::logDebug</referencedby>
        <referencedby refid="df/d8e/a09047_1a750f8a3dc91c26d6b7e1c01d42fff4f6" compoundref="db/d95/a11696" startline="239" endline="242">castor::Logger::logDebug</referencedby>
        <referencedby refid="df/d8e/a09047_1a71e27ebc4c834d82e0718ddca6d808ae" compoundref="db/d95/a11696" startline="226" endline="229">castor::Logger::logDebug</referencedby>
        <referencedby refid="df/d8e/a09047_1a9b963549d58bf76031c1c0ce171f8967" compoundref="db/d95/a11696" startline="270" endline="273">castor::Logger::logDebugNoNL</referencedby>
        <referencedby refid="df/d8e/a09047_1a4eb31251832abdef46ef2a681741ade1" compoundref="db/d95/a11696" startline="300" endline="303">castor::Logger::logDebugNoNL</referencedby>
        <referencedby refid="df/d8e/a09047_1ab722e669b32d644b3fa7f4342261d57d" compoundref="db/d95/a11696" startline="285" endline="288">castor::Logger::logDebugNoNL</referencedby>
        <referencedby refid="df/d8e/a09047_1af493a086fabca14d709f89dfe199673e" compoundref="db/d95/a11696" startline="567" endline="570">castor::Logger::logError</referencedby>
        <referencedby refid="df/d8e/a09047_1a3d74d0f524b04646dc8182fedaed84d8" compoundref="db/d95/a11696" startline="593" endline="596">castor::Logger::logError</referencedby>
        <referencedby refid="df/d8e/a09047_1ac2285bdab81b1f26700a6987c3100c52" compoundref="db/d95/a11696" startline="580" endline="583">castor::Logger::logError</referencedby>
        <referencedby refid="df/d8e/a09047_1a01dc1db48b6f59c280d27b56a3b2666b" compoundref="db/d95/a11696" startline="624" endline="627">castor::Logger::logErrorNoNL</referencedby>
        <referencedby refid="df/d8e/a09047_1a24af4357acf3fd129c46e50700025647" compoundref="db/d95/a11696" startline="654" endline="657">castor::Logger::logErrorNoNL</referencedby>
        <referencedby refid="df/d8e/a09047_1a692d2e18a22ea75915707b6a27881fb9" compoundref="db/d95/a11696" startline="639" endline="642">castor::Logger::logErrorNoNL</referencedby>
        <referencedby refid="df/d8e/a09047_1ab496fa67503a4290ad327832e688de36" compoundref="db/d95/a11696" startline="331" endline="334">castor::Logger::logInfo</referencedby>
        <referencedby refid="df/d8e/a09047_1a0b43022d6d11f38abc4ca2b48398a4d7" compoundref="db/d95/a11696" startline="357" endline="360">castor::Logger::logInfo</referencedby>
        <referencedby refid="df/d8e/a09047_1a78c5fa79f8adc8a8e3404f8606cecccb" compoundref="db/d95/a11696" startline="344" endline="347">castor::Logger::logInfo</referencedby>
        <referencedby refid="df/d8e/a09047_1a595910a0d9b487d3013034af8c229832" compoundref="db/d95/a11696" startline="388" endline="391">castor::Logger::logInfoNoNL</referencedby>
        <referencedby refid="df/d8e/a09047_1aded05f0321cd05b868679f15365d0af4" compoundref="db/d95/a11696" startline="418" endline="421">castor::Logger::logInfoNoNL</referencedby>
        <referencedby refid="df/d8e/a09047_1a5a12f475ebd0836b679c02779ce0c028" compoundref="db/d95/a11696" startline="403" endline="406">castor::Logger::logInfoNoNL</referencedby>
        <referencedby refid="df/d8e/a09047_1accf03005e247066d11f462dd371e8246" compoundref="db/d95/a11696" startline="95" endline="98">castor::Logger::logTrace</referencedby>
        <referencedby refid="df/d8e/a09047_1a3dd4ae484579d07411219d7f505e2fed" compoundref="db/d95/a11696" startline="121" endline="124">castor::Logger::logTrace</referencedby>
        <referencedby refid="df/d8e/a09047_1a29aca281d00d346c12796b7d5ec94ca1" compoundref="db/d95/a11696" startline="108" endline="111">castor::Logger::logTrace</referencedby>
        <referencedby refid="df/d8e/a09047_1ac7ba84cd702382daa71d3ede5e24e49e" compoundref="db/d95/a11696" startline="152" endline="155">castor::Logger::logTraceNoNL</referencedby>
        <referencedby refid="df/d8e/a09047_1a072a3ffc0ef70176babcf9c724cb2c3f" compoundref="db/d95/a11696" startline="182" endline="185">castor::Logger::logTraceNoNL</referencedby>
        <referencedby refid="df/d8e/a09047_1ad4045e046377d84ac4968b9178cd7fd7" compoundref="db/d95/a11696" startline="167" endline="170">castor::Logger::logTraceNoNL</referencedby>
        <referencedby refid="df/d8e/a09047_1ae7a8fcd4352a929636a874ca73510ab7" compoundref="db/d95/a11696" startline="449" endline="452">castor::Logger::logWarning</referencedby>
        <referencedby refid="df/d8e/a09047_1aad13cba10825e6d9577f88fa6c058c1a" compoundref="db/d95/a11696" startline="475" endline="478">castor::Logger::logWarning</referencedby>
        <referencedby refid="df/d8e/a09047_1af6a83879602186f863a41854a3ff43b1" compoundref="db/d95/a11696" startline="462" endline="465">castor::Logger::logWarning</referencedby>
        <referencedby refid="df/d8e/a09047_1a55da2735e9c815168f3fda3f1b9c0f8b" compoundref="db/d95/a11696" startline="506" endline="509">castor::Logger::logWarningNoNL</referencedby>
        <referencedby refid="df/d8e/a09047_1aa10c78d71227796b50af5d2d037683b2" compoundref="db/d95/a11696" startline="536" endline="539">castor::Logger::logWarningNoNL</referencedby>
        <referencedby refid="df/d8e/a09047_1a076fe39a9a83c2424261a33c49ac7935" compoundref="db/d95/a11696" startline="521" endline="524">castor::Logger::logWarningNoNL</referencedby>
        <referencedby refid="d9/dba/a02278_1ab38a36cb595455bec441d4c01541fe8f" compoundref="de/ddd/a00653" startline="373" endline="387">castor3d::makeImage</referencedby>
        <referencedby refid="d9/dba/a02278_1a57a721bc9f3bb5b1e7fae8e2dc683e02" compoundref="d7/db6/a01556" startline="141" endline="155">castor3d::makeShaderState</referencedby>
        <referencedby refid="db/db0/a09059_1a76ccb11d2d15480aca726307e956c44f" compoundref="db/d7a/a02105" startline="81" endline="84">castor::LoggerImpl::printMessage</referencedby>
        <referencedby refid="d9/d93/a09063_1af8c57bc4b8bfeb532f32493316e157a1" compoundref="d8/dd8/a02108" startline="512" endline="518">castor::LoggerInstance::pushMessage</referencedby>
        <referencedby refid="d2/dd2/a02279_1a4dc392a979a87264c2ff83d770d67e92" compoundref="d5/d12/a01799" startline="285" endline="288">toUtf8</referencedby>
        <referencedby refid="d2/dd2/a02279_1a7b5b92a99bb6417bc6f7997d7d3b256b" compoundref="d5/d12/a01799" startline="280" endline="283">toUtf8</referencedby>
        <referencedby refid="d2/dd2/a02279_1afe2a6de69a131aa9bd93ac5c37d39c3a" compoundref="d5/d12/a01799" startline="275" endline="278">toUtf8</referencedby>
        <referencedby refid="d3/d65/a03423_1afdeae129e73ddd2c7980afdd4441dba0" compoundref="dc/de6/a00167" startline="192" endline="210">castor3d::ChunkWriter&lt; castor::Path &gt;::write</referencedby>
        <referencedby refid="d1/d42/a03419_1a3f0c739cc3dd42610e348f722ee20506" compoundref="dc/de6/a00167" startline="147" endline="165">castor3d::ChunkWriter&lt; castor::String &gt;::write</referencedby>
        <referencedby refid="d7/db0/a03467_1a8b48c93732068d6b794d9c8905b27666" compoundref="d3/db1/a00200" startline="30" endline="37">castor3d::InstantUploadDataT&lt; UploaderT &gt;::~InstantUploadDataT</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1a57d213a4f6afcbe52835745da0a04c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d2/dd2/a02279_1ae5b1e9a2409f0870782a59af6208c267" kindref="member">WString</ref></type>
        <definition>CU_API WString castor::toSystemWide</definition>
        <argsstring>(MbStringView in)</argsstring>
        <name>toSystemWide</name>
        <qualifiedname>castor::toSystemWide</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a23b979cd0649684711c624066876c890" kindref="member">MbStringView</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="207" column="16" declfile="CastorUtils/Config/ConfigModule.hpp" declline="207" declcolumn="16"/>
        <referencedby refid="d2/dd2/a02279_1a2bf7ccc638ed67b884db529e9e15c0e0" compoundref="d5/d12/a01799" startline="300" endline="303">toSystemWide</referencedby>
        <referencedby refid="d2/dd2/a02279_1a301fba00a463663bf676cd2298da22f2" compoundref="d5/d12/a01799" startline="295" endline="298">toSystemWide</referencedby>
        <referencedby refid="d2/dd2/a02279_1a864b2e584211d8e867545d2b20b586a1" compoundref="d5/d12/a01799" startline="290" endline="293">toSystemWide</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6146d41e5d196acc21a9061561e968d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d2/dd2/a02279_1a711230db9a0d01b63d4a842b71cf1f95" kindref="member">U32String</ref></type>
        <definition>CU_API U32String castor::toUtf8U32String</definition>
        <argsstring>(StringView in)</argsstring>
        <name>toUtf8U32String</name>
        <qualifiedname>castor::toUtf8U32String</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a7fc5aca9eb8d35e69abfe9df07e365e3" kindref="member">StringView</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="208" column="18" declfile="CastorUtils/Config/ConfigModule.hpp" declline="208" declcolumn="18"/>
        <referencedby refid="d2/dd2/a02279_1a4c245eebb4e956ee7eda93c7ec2a8d2c" compoundref="d5/d12/a01799" startline="325" endline="328">toUtf8U32String</referencedby>
        <referencedby refid="d2/dd2/a02279_1a0209532708188fcbdb8fcd48506cc64e" compoundref="d5/d12/a01799" startline="330" endline="333">toUtf8U32String</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aba469b84d749e671b0181d1ae2748c43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>String castor::makeString</definition>
        <argsstring>(MbString const &amp;in)</argsstring>
        <name>makeString</name>
        <qualifiedname>castor::makeString</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="210" column="15" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="210" bodyend="213"/>
        <references refid="d2/dd2/a02279_1ab063f33ab8c390c2522ef198128a0d77">makeString</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a29a96cf750f6ed609491ab8c73f1e8fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>String castor::makeString</definition>
        <argsstring>(WString const &amp;in)</argsstring>
        <name>makeString</name>
        <qualifiedname>castor::makeString</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ae5b1e9a2409f0870782a59af6208c267" kindref="member">WString</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="215" column="15" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="215" bodyend="218"/>
        <references refid="d2/dd2/a02279_1ab063f33ab8c390c2522ef198128a0d77">makeString</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6b6e87f6310fe46aa98a4b97d34a11d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>String castor::makeString</definition>
        <argsstring>(U32String const &amp;in)</argsstring>
        <name>makeString</name>
        <qualifiedname>castor::makeString</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a711230db9a0d01b63d4a842b71cf1f95" kindref="member">U32String</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="220" column="15" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="220" bodyend="223"/>
        <references refid="d2/dd2/a02279_1ab063f33ab8c390c2522ef198128a0d77">makeString</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5c70f57e5b7db4beedde211d11027e11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>String castor::makeString</definition>
        <argsstring>(mbchar const *in)</argsstring>
        <name>makeString</name>
        <qualifiedname>castor::makeString</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a4a12ceb3990ad6174c0bf74cd6bdf9fc" kindref="member">mbchar</ref> const *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="225" column="15" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="225" bodyend="228"/>
        <references refid="d2/dd2/a02279_1ab063f33ab8c390c2522ef198128a0d77">makeString</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af57b8719a6d30f1ccb3a4d25d0c68f9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>String castor::makeString</definition>
        <argsstring>(wchar const *in)</argsstring>
        <name>makeString</name>
        <qualifiedname>castor::makeString</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1afda6ed6bdd14be9135b3827cf81f7ce2" kindref="member">wchar</ref> const *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="230" column="15" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="230" bodyend="233"/>
        <references refid="d2/dd2/a02279_1ab063f33ab8c390c2522ef198128a0d77">makeString</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aba5e6f721601b35f849317c875ec96b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>String castor::makeString</definition>
        <argsstring>(u32char const *in)</argsstring>
        <name>makeString</name>
        <qualifiedname>castor::makeString</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a17d8877464f26e03b4bdec4ee0ba0518" kindref="member">u32char</ref> const *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="235" column="15" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="235" bodyend="238"/>
        <references refid="d2/dd2/a02279_1ab063f33ab8c390c2522ef198128a0d77">makeString</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a53f26a7cb52353880bbb73d03acf5dc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>String castor::makeString</definition>
        <argsstring>(mbchar const *in, size_t length)</argsstring>
        <name>makeString</name>
        <qualifiedname>castor::makeString</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a4a12ceb3990ad6174c0bf74cd6bdf9fc" kindref="member">mbchar</ref> const *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="240" column="15" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="240" bodyend="243"/>
        <references refid="d2/dd2/a02279_1ab063f33ab8c390c2522ef198128a0d77">makeString</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6a6bae6782b3132246c0f1d9282acf22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>String castor::makeString</definition>
        <argsstring>(wchar const *in, size_t length)</argsstring>
        <name>makeString</name>
        <qualifiedname>castor::makeString</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1afda6ed6bdd14be9135b3827cf81f7ce2" kindref="member">wchar</ref> const *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="245" column="15" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="245" bodyend="248"/>
        <references refid="d2/dd2/a02279_1ab063f33ab8c390c2522ef198128a0d77">makeString</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a32904c4bce6b0f5f9fa6abf61e7f0628" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>String castor::makeString</definition>
        <argsstring>(u32char const *in, size_t length)</argsstring>
        <name>makeString</name>
        <qualifiedname>castor::makeString</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a17d8877464f26e03b4bdec4ee0ba0518" kindref="member">u32char</ref> const *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="250" column="15" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="250" bodyend="253"/>
        <references refid="d2/dd2/a02279_1ab063f33ab8c390c2522ef198128a0d77">makeString</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4e680db8e57a225debb28b67e9377290" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref></type>
        <definition>MbString castor::toUtf8</definition>
        <argsstring>(MbStringView in)</argsstring>
        <name>toUtf8</name>
        <qualifiedname>castor::toUtf8</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a23b979cd0649684711c624066876c890" kindref="member">MbStringView</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="255" column="17" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1add818399737e8da2e7a28a976e3287a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref></type>
        <definition>MbString castor::toUtf8</definition>
        <argsstring>(MbString const &amp;in)</argsstring>
        <name>toUtf8</name>
        <qualifiedname>castor::toUtf8</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="260" column="17" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="260" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a66f36fe851fae954f057a1484e765aec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref></type>
        <definition>MbString castor::toUtf8</definition>
        <argsstring>(mbchar const *in)</argsstring>
        <name>toUtf8</name>
        <qualifiedname>castor::toUtf8</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a4a12ceb3990ad6174c0bf74cd6bdf9fc" kindref="member">mbchar</ref> const *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="265" column="17" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8729846f1bbd0a6f8ebd72460b9b0d97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref></type>
        <definition>MbString castor::toUtf8</definition>
        <argsstring>(mbchar const *in, size_t length)</argsstring>
        <name>toUtf8</name>
        <qualifiedname>castor::toUtf8</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a4a12ceb3990ad6174c0bf74cd6bdf9fc" kindref="member">mbchar</ref> const *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="270" column="17" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afe2a6de69a131aa9bd93ac5c37d39c3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref></type>
        <definition>MbString castor::toUtf8</definition>
        <argsstring>(WString const &amp;in)</argsstring>
        <name>toUtf8</name>
        <qualifiedname>castor::toUtf8</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ae5b1e9a2409f0870782a59af6208c267" kindref="member">WString</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="275" column="17" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="275" bodyend="278"/>
        <references refid="d2/dd2/a02279_1ab0fb14b20a64ca391cfd363dfdf2ea78">toUtf8</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7b5b92a99bb6417bc6f7997d7d3b256b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref></type>
        <definition>MbString castor::toUtf8</definition>
        <argsstring>(wchar const *in, size_t length)</argsstring>
        <name>toUtf8</name>
        <qualifiedname>castor::toUtf8</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1afda6ed6bdd14be9135b3827cf81f7ce2" kindref="member">wchar</ref> const *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="280" column="17" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="280" bodyend="283"/>
        <references refid="d2/dd2/a02279_1ab0fb14b20a64ca391cfd363dfdf2ea78">toUtf8</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4dc392a979a87264c2ff83d770d67e92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref></type>
        <definition>MbString castor::toUtf8</definition>
        <argsstring>(wchar const *in)</argsstring>
        <name>toUtf8</name>
        <qualifiedname>castor::toUtf8</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1afda6ed6bdd14be9135b3827cf81f7ce2" kindref="member">wchar</ref> const *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="285" column="17" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="285" bodyend="288"/>
        <references refid="d2/dd2/a02279_1ab0fb14b20a64ca391cfd363dfdf2ea78">toUtf8</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a864b2e584211d8e867545d2b20b586a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1ae5b1e9a2409f0870782a59af6208c267" kindref="member">WString</ref></type>
        <definition>WString castor::toSystemWide</definition>
        <argsstring>(MbString const &amp;in)</argsstring>
        <name>toSystemWide</name>
        <qualifiedname>castor::toSystemWide</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a8f0458d7b9dee3b76b26a5441606f0c6" kindref="member">MbString</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="290" column="16" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="290" bodyend="293"/>
        <references refid="d2/dd2/a02279_1a1a57d213a4f6afcbe52835745da0a04c">toSystemWide</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a301fba00a463663bf676cd2298da22f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1ae5b1e9a2409f0870782a59af6208c267" kindref="member">WString</ref></type>
        <definition>WString castor::toSystemWide</definition>
        <argsstring>(mbchar const *in, size_t length)</argsstring>
        <name>toSystemWide</name>
        <qualifiedname>castor::toSystemWide</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a4a12ceb3990ad6174c0bf74cd6bdf9fc" kindref="member">mbchar</ref> const *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="295" column="16" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="295" bodyend="298"/>
        <references refid="d2/dd2/a02279_1a1a57d213a4f6afcbe52835745da0a04c">toSystemWide</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2bf7ccc638ed67b884db529e9e15c0e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1ae5b1e9a2409f0870782a59af6208c267" kindref="member">WString</ref></type>
        <definition>WString castor::toSystemWide</definition>
        <argsstring>(mbchar const *in)</argsstring>
        <name>toSystemWide</name>
        <qualifiedname>castor::toSystemWide</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a4a12ceb3990ad6174c0bf74cd6bdf9fc" kindref="member">mbchar</ref> const *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="300" column="16" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="300" bodyend="303"/>
        <references refid="d2/dd2/a02279_1a1a57d213a4f6afcbe52835745da0a04c">toSystemWide</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa4ad66cac57aacd4f6d8811d35ad99bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1ae5b1e9a2409f0870782a59af6208c267" kindref="member">WString</ref></type>
        <definition>WString castor::toSystemWide</definition>
        <argsstring>(WStringView in)</argsstring>
        <name>toSystemWide</name>
        <qualifiedname>castor::toSystemWide</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aafdc86d433d684fbc82a6ee3e2958521" kindref="member">WStringView</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="305" column="16" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="305" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a134a903af450d5243aca946437bd79bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1ae5b1e9a2409f0870782a59af6208c267" kindref="member">WString</ref></type>
        <definition>WString castor::toSystemWide</definition>
        <argsstring>(WString const &amp;in)</argsstring>
        <name>toSystemWide</name>
        <qualifiedname>castor::toSystemWide</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ae5b1e9a2409f0870782a59af6208c267" kindref="member">WString</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="310" column="16" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a94f3061f76fc8fdcf529017f4ec9fab7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1ae5b1e9a2409f0870782a59af6208c267" kindref="member">WString</ref></type>
        <definition>WString castor::toSystemWide</definition>
        <argsstring>(wchar const *in)</argsstring>
        <name>toSystemWide</name>
        <qualifiedname>castor::toSystemWide</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1afda6ed6bdd14be9135b3827cf81f7ce2" kindref="member">wchar</ref> const *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="315" column="16" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad3b052068052891dc264170c3e078a02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1ae5b1e9a2409f0870782a59af6208c267" kindref="member">WString</ref></type>
        <definition>WString castor::toSystemWide</definition>
        <argsstring>(wchar const *in, size_t length)</argsstring>
        <name>toSystemWide</name>
        <qualifiedname>castor::toSystemWide</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1afda6ed6bdd14be9135b3827cf81f7ce2" kindref="member">wchar</ref> const *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="320" column="16" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4c245eebb4e956ee7eda93c7ec2a8d2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1a711230db9a0d01b63d4a842b71cf1f95" kindref="member">U32String</ref></type>
        <definition>U32String castor::toUtf8U32String</definition>
        <argsstring>(String const &amp;in)</argsstring>
        <name>toUtf8U32String</name>
        <qualifiedname>castor::toUtf8U32String</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="325" column="18" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="325" bodyend="328"/>
        <references refid="d2/dd2/a02279_1a6146d41e5d196acc21a9061561e968d0">toUtf8U32String</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0209532708188fcbdb8fcd48506cc64e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1a711230db9a0d01b63d4a842b71cf1f95" kindref="member">U32String</ref></type>
        <definition>U32String castor::toUtf8U32String</definition>
        <argsstring>(xchar const *in, size_t length)</argsstring>
        <name>toUtf8U32String</name>
        <qualifiedname>castor::toUtf8U32String</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a98169622bc976df3189194c2b35fbf60" kindref="member">xchar</ref> const *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/ConfigModule.hpp" line="330" column="18" bodyfile="CastorUtils/Config/ConfigModule.hpp" bodystart="330" bodyend="333"/>
        <references refid="d2/dd2/a02279_1a6146d41e5d196acc21a9061561e968d0">toUtf8U32String</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a58f3178234ce83e643568e48a0ed6a3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Lockable</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a388fd75dcd12a3eb9749946a99143d02" kindref="member">UniqueLock</ref>&lt; Lockable &gt;</type>
        <definition>UniqueLock&lt; Lockable &gt; castor::makeUniqueLock</definition>
        <argsstring>(Lockable &amp;lockable)</argsstring>
        <name>makeUniqueLock</name>
        <qualifiedname>castor::makeUniqueLock</qualifiedname>
        <param>
          <type>Lockable &amp;</type>
          <declname>lockable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/MultiThreadConfig.hpp" line="26" column="12" bodyfile="CastorUtils/Config/MultiThreadConfig.hpp" bodystart="26" bodyend="29"/>
        <referencedby refid="d8/da3/a08255_1ae42bd6b7da6f50fdef84f04a84172313" compoundref="dd/d19/a01922" startline="165" endline="173">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::add</referencedby>
        <referencedby refid="d8/da3/a08255_1af4b3aa2cae901fb81e67007a49f01c89" compoundref="dd/d19/a01922" startline="264" endline="270">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::add</referencedby>
        <referencedby refid="d8/da3/a08255_1a7b9ac51df57e111ec2af31f89a97cbac" compoundref="dd/d19/a01922" startline="70" endline="74">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::cleanup</referencedby>
        <referencedby refid="d8/da3/a08255_1a5400b3eabcf62af7df977a20e643418d" compoundref="dd/d19/a01922" startline="81" endline="85">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::clear</referencedby>
        <referencedby refid="de/d87/a08279_1af6354aa40c0ffa68e28effbd22452bdf" compoundref="de/da9/a01934" startline="313" endline="325">castor::TSSignalT&lt; Function &gt;::connect</referencedby>
        <referencedby refid="dc/d17/a03783_1afcc4620692918ecabebe183a086df13e" compoundref="de/d55/a00323" startline="521" endline="533">castor3d::UserInputListener::doAddHandler</referencedby>
        <referencedby refid="dc/d17/a03783_1af943899d0b999059f4c27e152a1cd2ce" compoundref="de/d55/a00323" startline="488" endline="499">castor3d::UserInputListener::doGetHandlers</referencedby>
        <referencedby refid="dc/d17/a03783_1a3b2f2515b1c768ab6c5fa88b8ff0109d" compoundref="de/d55/a00323" startline="506" endline="510">castor3d::UserInputListener::doHasHandlers</referencedby>
        <referencedby refid="dc/d17/a03783_1aa60cd82b80e2e3ad1251efe5a4714645" compoundref="de/d55/a00323" startline="565" endline="569">castor3d::UserInputListener::doRemoveHandler</referencedby>
        <referencedby refid="d4/d72/a09535_1a49e2f48322086eca26d40f01311003c6" compoundref="dc/db6/a02258" startline="136" endline="141">castor::format::BasicIndentBufferManager&lt; char_type, traits &gt;::erase</referencedby>
        <referencedby refid="d0/d6f/a09547_1a8f7f99838ef7c0f844d28740716109df" compoundref="d4/de7/a02270" startline="131" endline="136">castor::format::BasicPrefixBufferManager&lt; prefix_type, char_type, traits &gt;::erase</referencedby>
        <referencedby refid="d8/da3/a08255_1ae2bc50ccc5e4f323a14a1a6f39d3ec14" compoundref="dd/d19/a01922" startline="440" endline="451">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::find</referencedby>
        <referencedby refid="d2/dff/a03675_1a118b33007fd6fe5a272f8537788239da" compoundref="d5/d42/a00269" startline="226" endline="237">castor3d::RenderTargetCache::forEach</referencedby>
        <referencedby refid="d8/da3/a08255_1ade25c114da6605836b4d9618c5236fb0" compoundref="dd/d19/a01922" startline="514" endline="522">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::forEach</referencedby>
        <referencedby refid="d2/dff/a03675_1acbe95a62d428209f6fba60911ea1ff7d" compoundref="d5/d42/a00269" startline="205" endline="216">castor3d::RenderTargetCache::forEach</referencedby>
        <referencedby refid="d8/da3/a08255_1ae84da1b21345a418752dd78b0cf644ae" compoundref="dd/d19/a01922" startline="503" endline="511">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::forEach</referencedby>
        <referencedby refid="d4/d72/a09535_1ae55e1eb90db9b7257f4aa3e0b5f5abcd" compoundref="dc/db6/a02258" startline="113" endline="124">castor::format::BasicIndentBufferManager&lt; char_type, traits &gt;::getBuffer</referencedby>
        <referencedby refid="d0/d6f/a09547_1a41d521ca52d415a7e2ee2e26b68dca02" compoundref="d4/de7/a02270" startline="108" endline="119">castor::format::BasicPrefixBufferManager&lt; prefix_type, char_type, traits &gt;::getBuffer</referencedby>
        <referencedby refid="d8/da3/a08255_1a3a6c437db53c29554a44635674119d3d" compoundref="dd/d19/a01922" startline="530" endline="534">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::getObjectCount</referencedby>
        <referencedby refid="d4/d72/a09535_1a2732332a1ec151f2aced3d200b2c14eb" compoundref="dc/db6/a02258" startline="85" endline="89">castor::format::BasicIndentBufferManager&lt; char_type, traits &gt;::insert</referencedby>
        <referencedby refid="d0/d6f/a09547_1a597fc50618107dd8c1b34f84b02a98a8" compoundref="d4/de7/a02270" startline="80" endline="84">castor::format::BasicPrefixBufferManager&lt; prefix_type, char_type, traits &gt;::insert</referencedby>
        <referencedby refid="d8/da3/a08255_1a4603e9fde607cdf993adf47ba4dd307f" compoundref="dd/d19/a01922" startline="556" endline="560">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::isEmpty</referencedby>
        <referencedby refid="d8/da3/a08255_1a107169e0364711fced26e4d512819a13" compoundref="dd/d19/a01922" startline="481" endline="495">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::mergeInto</referencedby>
        <referencedby refid="d8/d07/a03627_1ac2d02c45ec20d264310c39258cf8ce50" compoundref="d7/d03/a00254" startline="120" endline="139">castor3d::ObjectCacheBaseT&lt; ObjT, KeyT, TraitsT &gt;::mergeInto</referencedby>
        <referencedby refid="de/d87/a08279_1a0a96e2ba4cdbdb59c2cbd002890af17f" compoundref="de/da9/a01934" startline="332" endline="340">castor::TSSignalT&lt; Function &gt;::operator()</referencedby>
        <referencedby refid="de/d87/a08279_1aecbb13860deeffb1d4021bb9ba158151" compoundref="de/da9/a01934" startline="350" endline="358">castor::TSSignalT&lt; Function &gt;::operator()</referencedby>
        <referencedby refid="de/d87/a08279_1af9d0345911c4fc0fcb40800bc1ecf57c" compoundref="de/da9/a01934" startline="265" endline="273">castor::TSSignalT&lt; Function &gt;::operator=</referencedby>
        <referencedby refid="db/d84/a09071_1a7ed139232ed80ff7be075f2d09db1608" compoundref="da/d4a/a02114" startline="61" endline="90">castor::LoggerStreambufT&lt; CharT, TraitsT &gt;::overflow</referencedby>
        <referencedby refid="da/db0/a03747_1a278a37b0923a7b266c684251d37961cb" compoundref="d3/d07/a00305" startline="267" endline="277">castor3d::EventHandler::pushEvent</referencedby>
        <referencedby refid="da/db0/a03747_1afc92e893bf044425b1e80c3113cb3cca" compoundref="d3/d07/a00305" startline="208" endline="218">castor3d::EventHandler::pushEvent</referencedby>
        <referencedby refid="da/db0/a03747_1a16401c9f0cb928edaab9f56c5ebcbc08" compoundref="d3/d07/a00305" startline="150" endline="160">castor3d::EventHandler::pushEvent</referencedby>
        <referencedby refid="d9/d93/a09063_1af8c57bc4b8bfeb532f32493316e157a1" compoundref="d8/dd8/a02108" startline="512" endline="518">castor::LoggerInstance::pushMessage</referencedby>
        <referencedby refid="d8/da3/a08255_1a21d0ef274f434e61b1d0c336a8c7253a" compoundref="dd/d19/a01922" startline="331" endline="343">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::remove</referencedby>
        <referencedby refid="d8/da3/a08255_1a6318e3a64926730b389ee55727eacb3e" compoundref="dd/d19/a01922" startline="376" endline="400">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::rename</referencedby>
        <referencedby refid="d4/d72/a09535_1a5841ac129cdaf0b765d61c5af0f6d512" compoundref="dc/db6/a02258" startline="99" endline="103">castor::format::BasicIndentBufferManager&lt; char_type, traits &gt;::size</referencedby>
        <referencedby refid="d0/d6f/a09547_1adffeb97e05ecd2dae28896b38295f4fa" compoundref="d4/de7/a02270" startline="94" endline="98">castor::format::BasicPrefixBufferManager&lt; prefix_type, char_type, traits &gt;::size</referencedby>
        <referencedby refid="d8/da3/a08255_1ad7c855d1938539d8353d27f31f1b1a6b" compoundref="dd/d19/a01922" startline="213" endline="223">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::tryAdd</referencedby>
        <referencedby refid="d8/da3/a08255_1adfe23feed932e13cb6d29207a1ccc51a" compoundref="dd/d19/a01922" startline="120" endline="128">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::tryAdd</referencedby>
        <referencedby refid="d8/da3/a08255_1a1057aebd572ac71378ea519f7c0288ab" compoundref="dd/d19/a01922" startline="411" endline="415">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::tryFind</referencedby>
        <referencedby refid="d8/da3/a08255_1a5d16d1a42b2ea9518a97d9d8e1408140" compoundref="dd/d19/a01922" startline="300" endline="305">castor::ResourceCacheBaseT&lt; ResT, KeyT, TraitsT &gt;::tryRemove</referencedby>
        <referencedby refid="de/d87/a08279_1a68831e630f024ef26ac4685003acb017" compoundref="de/da9/a01934" startline="257" endline="263">castor::TSSignalT&lt; Function &gt;::TSSignalT</referencedby>
        <referencedby refid="d4/d72/a09535_1a7c48e6a082ef983d55e5c2ccf7a3967a" compoundref="dc/db6/a02258" startline="62" endline="71">castor::format::BasicIndentBufferManager&lt; char_type, traits &gt;::~BasicIndentBufferManager</referencedby>
        <referencedby refid="d0/d6f/a09547_1af76c1aec7a22527bb5b4ebaba0ae57e8" compoundref="d4/de7/a02270" startline="57" endline="66">castor::format::BasicPrefixBufferManager&lt; prefix_type, char_type, traits &gt;::~BasicPrefixBufferManager</referencedby>
        <referencedby refid="da/db0/a03747_1a97065a2d2a9ab4ecffed0f11539c360c" compoundref="d3/d07/a00305" startline="92" endline="96">castor3d::EventHandler::~EventHandler</referencedby>
        <referencedby refid="d2/df4/a08275_1aa917d6fb0b5a2615294c594e08848f9a" compoundref="de/da9/a01934" startline="165" endline="176">castor::TSConnectionT&lt; SignalT &gt;::~TSConnectionT</referencedby>
        <referencedby refid="de/d87/a08279_1aaf43317354146c86c371ead58b1ac619" compoundref="de/da9/a01934" startline="282" endline="302">castor::TSSignalT&lt; Function &gt;::~TSSignalT</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a35629cdc90670bca51fc9eba5e838c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
          <param>
            <type>typename TypeU</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>ParamsT</declname>
            <defname>ParamsT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1ac623881246e92c1d187a3a44b3e011f6" kindref="member">UniquePtr</ref>&lt; TypeT &gt;</type>
        <definition>UniquePtr&lt; TypeT &gt; castor::makeUniqueDerived</definition>
        <argsstring>(ParamsT &amp;&amp;... params)</argsstring>
        <name>makeUniqueDerived</name>
        <qualifiedname>castor::makeUniqueDerived</qualifiedname>
        <param>
          <type>ParamsT &amp;&amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/SmartPtr.hpp" line="41" column="11" bodyfile="CastorUtils/Config/SmartPtr.hpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1acfeb6ac262e84281d68fe421d59268bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>ParamsT</declname>
            <defname>ParamsT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1ac623881246e92c1d187a3a44b3e011f6" kindref="member">UniquePtr</ref>&lt; TypeT &gt;</type>
        <definition>UniquePtr&lt; TypeT &gt; castor::makeUnique</definition>
        <argsstring>(ParamsT &amp;&amp;... params)</argsstring>
        <name>makeUnique</name>
        <qualifiedname>castor::makeUnique</qualifiedname>
        <param>
          <type>ParamsT &amp;&amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/SmartPtr.hpp" line="47" column="11" bodyfile="CastorUtils/Config/SmartPtr.hpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab9fb0c1602c1e474222bddf495a9c974" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeU</type>
          </param>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1ac623881246e92c1d187a3a44b3e011f6" kindref="member">UniquePtr</ref>&lt; TypeU &gt;</type>
        <definition>UniquePtr&lt; TypeU &gt; castor::ptrCast</definition>
        <argsstring>(UniquePtr&lt; TypeT &gt; ptr)</argsstring>
        <name>ptrCast</name>
        <qualifiedname>castor::ptrCast</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ac623881246e92c1d187a3a44b3e011f6" kindref="member">UniquePtr</ref>&lt; TypeT &gt;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/SmartPtr.hpp" line="53" column="11" bodyfile="CastorUtils/Config/SmartPtr.hpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac7a521cab4c1d086d5a840d41e353191" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeU</type>
          </param>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1ac623881246e92c1d187a3a44b3e011f6" kindref="member">UniquePtr</ref>&lt; TypeU &gt;</type>
        <definition>UniquePtr&lt; TypeU &gt; castor::ptrRefCast</definition>
        <argsstring>(UniquePtr&lt; TypeT &gt; &amp;ptr)</argsstring>
        <name>ptrRefCast</name>
        <qualifiedname>castor::ptrRefCast</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ac623881246e92c1d187a3a44b3e011f6" kindref="member">UniquePtr</ref>&lt; TypeT &gt; &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/SmartPtr.hpp" line="59" column="11" bodyfile="CastorUtils/Config/SmartPtr.hpp" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af46c37c6776fd6aece3b6d9eafdd5546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeU</type>
          </param>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a1703e7c907eb1f09166a4dfb4d39985b" kindref="member">RawUniquePtr</ref>&lt; TypeU &gt;</type>
        <definition>RawUniquePtr&lt; TypeU &gt; castor::ptrCast</definition>
        <argsstring>(RawUniquePtr&lt; TypeT &gt; ptr)</argsstring>
        <name>ptrCast</name>
        <qualifiedname>castor::ptrCast</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a1703e7c907eb1f09166a4dfb4d39985b" kindref="member">RawUniquePtr</ref>&lt; TypeT &gt;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/SmartPtr.hpp" line="65" column="14" bodyfile="CastorUtils/Config/SmartPtr.hpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a21928cf4f170ecec93550543c6dd381d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeU</type>
          </param>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a1703e7c907eb1f09166a4dfb4d39985b" kindref="member">RawUniquePtr</ref>&lt; TypeU &gt;</type>
        <definition>RawUniquePtr&lt; TypeU &gt; castor::ptrRefCast</definition>
        <argsstring>(RawUniquePtr&lt; TypeT &gt; &amp;ptr)</argsstring>
        <name>ptrRefCast</name>
        <qualifiedname>castor::ptrRefCast</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a1703e7c907eb1f09166a4dfb4d39985b" kindref="member">RawUniquePtr</ref>&lt; TypeT &gt; &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Config/SmartPtr.hpp" line="71" column="14" bodyfile="CastorUtils/Config/SmartPtr.hpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a241b855bd0377d227c1730911629baa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/d86/a07971" kindref="compound">BinaryFile</ref> &amp;</type>
        <definition>BinaryFile &amp; castor::operator&lt;&lt;</definition>
        <argsstring>(BinaryFile &amp;file, T const &amp;toWrite)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="dc/d86/a07971" kindref="compound">BinaryFile</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>toWrite</declname>
        </param>
        <briefdescription>
<para>Fonction d&apos;écriture dépendant du mode d&apos;ouverture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Le fichier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">toWrite</parametername>
</parameternamelist>
<parameterdescription>
<para>La donnée à écrire dans le fichier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Une référence sur ce fichier </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/BinaryFile.hpp" line="152" column="14" declfile="CastorUtils/Data/BinaryFile.hpp" declline="152" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a133133ba53e24255046611c83cd6f2ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/d86/a07971" kindref="compound">BinaryFile</ref> &amp;</type>
        <definition>BinaryFile &amp; castor::operator&gt;&gt;</definition>
        <argsstring>(BinaryFile &amp;file, T &amp;toRead)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>castor::operator&gt;&gt;</qualifiedname>
        <param>
          <type><ref refid="dc/d86/a07971" kindref="compound">BinaryFile</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>toRead</declname>
        </param>
        <briefdescription>
<para>Fonction de lecture dépendant du mode d&apos;ouverture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Le fichier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">toRead</parametername>
</parameternamelist>
<parameterdescription>
<para>La donnée à lire à partir du fichier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Une référence sur ce fichier </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/BinaryFile.hpp" line="165" column="26" declfile="CastorUtils/Data/BinaryFile.hpp" declline="165" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3a1140cb52b24dd091693b1c95146eea" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isBigEndian</definition>
        <argsstring>() noexcept</argsstring>
        <name>isBigEndian</name>
        <qualifiedname>castor::isBigEndian</qualifiedname>
        <briefdescription>
<para>Détecte si le système courant est big endian. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="19" column="16" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="19" bodyend="22"/>
        <referencedby refid="d2/dd2/a02279_1a0d184ae41d5975c6c14fc8cc48df18fe" compoundref="d2/d45/a01826" startline="414" endline="429">bigEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a547f175c03da584bbcc49e7f6e4f4013" compoundref="d2/d45/a01826" startline="439" endline="456">bigEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1add97d0a02fa4f84214d94adce553304e" compoundref="d2/d45/a01826" startline="372" endline="382">bigEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a49a3ae83045c03ad117623890299fb1c" compoundref="d2/d45/a01826" startline="392" endline="404">bigEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a69cb2659d6729cb2651ef72d69cad6d8" compoundref="d2/d45/a01826" startline="466" endline="481">bigEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a0e4596003b5027cb4faf7daf3febd1ab" compoundref="d2/d45/a01826" startline="491" endline="508">bigEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ac0cf5e2146e104e8894be5b10788327f" compoundref="d2/d45/a01826" startline="122" endline="137">systemEndianToBigEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a54e460b822ffcf0964269a724df7a7b6" compoundref="d2/d45/a01826" startline="147" endline="164">systemEndianToBigEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a93e72f9c39ce923c9393d4f6df336175" compoundref="d2/d45/a01826" startline="80" endline="90">systemEndianToBigEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ad58701f180fdf6d8fc87eb0948a6fa0b" compoundref="d2/d45/a01826" startline="100" endline="112">systemEndianToBigEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ab4a7ba77cba814168c8a81b26370ff7e" compoundref="d2/d45/a01826" startline="174" endline="189">systemEndianToBigEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ae57ba897bf67e8d944d1bac129d1482e" compoundref="d2/d45/a01826" startline="199" endline="216">systemEndianToBigEndian</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa4e7623135b28fcbdeb6f2d423df6746" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isLittleEndian</definition>
        <argsstring>() noexcept</argsstring>
        <name>isLittleEndian</name>
        <qualifiedname>castor::isLittleEndian</qualifiedname>
        <briefdescription>
<para>Détecte si le système courant est little endian. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="29" column="16" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="29" bodyend="32"/>
        <referencedby refid="d9/dba/a02278_1a0ba2350e966f08f0eec4044fb456c598" compoundref="d6/d7d/a00161" startline="1340" endline="1361">castor3d::chunkEndianToSystemEndian</referencedby>
        <referencedby refid="dd/de1/a03223_1a2fc203ef8ed960c1a23b0bb8bed3bdaa" compoundref="df/dc8/a00122" startline="169" endline="172">castor3d::BinaryParserBase&lt; TParsed &gt;::doIsLittleEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a423745cbe221958e708733caef7628ff" compoundref="d2/d45/a01826" startline="560" endline="575">littleEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ae43298a8041aeff0dda0e7e1001de0eb" compoundref="d2/d45/a01826" startline="585" endline="602">littleEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ae21f89dfd2feafe41ec98e132f9b5d9f" compoundref="d2/d45/a01826" startline="518" endline="528">littleEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a2152b811d74de8f62369f62ed2995029" compoundref="d2/d45/a01826" startline="538" endline="550">littleEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a90e916507e696bd93a200c94110958ea" compoundref="d2/d45/a01826" startline="612" endline="627">littleEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ae9e015a793e5ed70ecbd0f3b25591d5e" compoundref="d2/d45/a01826" startline="637" endline="654">littleEndianToSystemEndian</referencedby>
        <referencedby refid="d9/dba/a02278_1ac8fd79a65bf3d510536e2f77797a5df7" compoundref="d6/d7d/a00161" startline="1315" endline="1337">castor3d::prepareChunkDataT</referencedby>
        <referencedby refid="d2/dd2/a02279_1adee39e32672cf37d66d46ed2f9f2ea88" compoundref="d2/d45/a01826" startline="268" endline="283">systemEndianToLittleEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1aabc86afcfc7ad13fa8c773f03ef3ff87" compoundref="d2/d45/a01826" startline="293" endline="310">systemEndianToLittleEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a192cd4b3e742a0e1f059c9edb4f63f1f" compoundref="d2/d45/a01826" startline="226" endline="236">systemEndianToLittleEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a50871386c7d4679ca8d126622cb2c6a7" compoundref="d2/d45/a01826" startline="246" endline="258">systemEndianToLittleEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a6a6ec649b211de12f8945624e1f29933" compoundref="d2/d45/a01826" startline="320" endline="335">systemEndianToLittleEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ab3cacbf0e52675c7dfcf46aec7b8a083" compoundref="d2/d45/a01826" startline="345" endline="362">systemEndianToLittleEndian</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T &amp;</type>
        <definition>constexpr T &amp; castor::switchEndianness</definition>
        <argsstring>(T &amp;value) noexcept</argsstring>
        <name>switchEndianness</name>
        <qualifiedname>castor::switchEndianness</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Change le boutisme du paramètre. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="42" column="14" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="42" bodyend="55"/>
        <referencedby refid="d2/dd2/a02279_1a0d184ae41d5975c6c14fc8cc48df18fe" compoundref="d2/d45/a01826" startline="414" endline="429">bigEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a547f175c03da584bbcc49e7f6e4f4013" compoundref="d2/d45/a01826" startline="439" endline="456">bigEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1add97d0a02fa4f84214d94adce553304e" compoundref="d2/d45/a01826" startline="372" endline="382">bigEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a49a3ae83045c03ad117623890299fb1c" compoundref="d2/d45/a01826" startline="392" endline="404">bigEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a69cb2659d6729cb2651ef72d69cad6d8" compoundref="d2/d45/a01826" startline="466" endline="481">bigEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a0e4596003b5027cb4faf7daf3febd1ab" compoundref="d2/d45/a01826" startline="491" endline="508">bigEndianToSystemEndian</referencedby>
        <referencedby refid="d9/dba/a02278_1a0ba2350e966f08f0eec4044fb456c598" compoundref="d6/d7d/a00161" startline="1340" endline="1361">castor3d::chunkEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a423745cbe221958e708733caef7628ff" compoundref="d2/d45/a01826" startline="560" endline="575">littleEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ae43298a8041aeff0dda0e7e1001de0eb" compoundref="d2/d45/a01826" startline="585" endline="602">littleEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ae21f89dfd2feafe41ec98e132f9b5d9f" compoundref="d2/d45/a01826" startline="518" endline="528">littleEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a2152b811d74de8f62369f62ed2995029" compoundref="d2/d45/a01826" startline="538" endline="550">littleEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a90e916507e696bd93a200c94110958ea" compoundref="d2/d45/a01826" startline="612" endline="627">littleEndianToSystemEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ae9e015a793e5ed70ecbd0f3b25591d5e" compoundref="d2/d45/a01826" startline="637" endline="654">littleEndianToSystemEndian</referencedby>
        <referencedby refid="d9/dba/a02278_1a443ec91dcec1ae4cbdbf27d54b9ca4fa" compoundref="d6/d7d/a00161" startline="1048" endline="1054">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a4fc68de12338fd3a4ca4362246f502ba" compoundref="d6/d7d/a00161" startline="1127" endline="1130">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a8c20990a4663fb276e147bb3b1bbaa74" compoundref="d6/d7d/a00161" startline="1096" endline="1102">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a87e7a551793e1998870e8b6ba1bb3a4b" compoundref="d6/d7d/a00161" startline="1080" endline="1086">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a7f0063a8a28d970183adc8aac48992bd" compoundref="d6/d7d/a00161" startline="1112" endline="1118">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a57304a0182373e71acbbcb1a49086f76" compoundref="d6/d7d/a00161" startline="1154" endline="1160">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a6c9799addf4313489625161731a1c8eb" compoundref="d6/d7d/a00161" startline="1139" endline="1145">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1adec052c5846a087dbf0d4dc2672b8f45" compoundref="d6/d7d/a00161" startline="1064" endline="1070">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1ac8d3bbf632e2c6081a47ff432aab51df" compoundref="d6/d7d/a00161" startline="1032" endline="1038">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a430f3de9071e7d03358bb1b39d07c2b8" compoundref="d0/dc2/a00104" startline="225" endline="228">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a64d22c03869c8db8496ef7e16733777b" compoundref="d6/d7d/a00161" startline="1007" endline="1010">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a4bf10f2f11fde3269c70845bbc572fbf" compoundref="d6/d7d/a00161" startline="1258" endline="1263">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a06caf74173997883bedfa6c3ff807c12" compoundref="d6/d7d/a00161" startline="995" endline="998">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a7f70d15ea4a68c85c548cd5552619d97" compoundref="d6/d7d/a00161" startline="923" endline="926">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a19419ebed1810e7293e390e5ec3c2d9b" compoundref="d6/d7d/a00161" startline="947" endline="950">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1aa25c32cc9e2d91e7b7d6287917c04524" compoundref="d6/d7d/a00161" startline="971" endline="974">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a58ff625ab28b77d7933ef9517c1b632c" compoundref="d6/d7d/a00161" startline="1216" endline="1231">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1aaae8a1f030b081e1f156530f10e17b4b" compoundref="d6/d7d/a00161" startline="1193" endline="1207">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a1281cbf080321b1041acc691028f9d97" compoundref="d6/d7d/a00161" startline="1272" endline="1276">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1aa728469bd8e826b18eb6c1d6e8913bf3" compoundref="d6/d7d/a00161" startline="1019" endline="1022">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a241973c9a831e044ed17e61d46d1c4b7" compoundref="d6/d7d/a00161" startline="1170" endline="1184">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a690e921dba7f5c14fee703d89de7565c" compoundref="d6/d7d/a00161" startline="1240" endline="1249">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a41332c78f59210d8b68f9eb33e202c6c" compoundref="d6/d7d/a00161" startline="935" endline="938">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1ab8a87dce63a0ebba4c5f454eea27e7a5" compoundref="d6/d7d/a00161" startline="959" endline="962">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a83d5b33dc01843598fc318d243ea8136" compoundref="d6/d7d/a00161" startline="983" endline="986">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d9/dba/a02278_1a770ba5e8e6c80ebb02e90284327877d0" compoundref="d6/d7d/a00161" startline="1285" endline="1303">castor3d::prepareChunkData</referencedby>
        <referencedby refid="d2/dd2/a02279_1a19e109447afe72b8a1ad068cadba3627" compoundref="d2/d45/a01826" startline="65" endline="70">switchEndianness</referencedby>
        <referencedby refid="d2/dd2/a02279_1ac0cf5e2146e104e8894be5b10788327f" compoundref="d2/d45/a01826" startline="122" endline="137">systemEndianToBigEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a54e460b822ffcf0964269a724df7a7b6" compoundref="d2/d45/a01826" startline="147" endline="164">systemEndianToBigEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a93e72f9c39ce923c9393d4f6df336175" compoundref="d2/d45/a01826" startline="80" endline="90">systemEndianToBigEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ad58701f180fdf6d8fc87eb0948a6fa0b" compoundref="d2/d45/a01826" startline="100" endline="112">systemEndianToBigEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ab4a7ba77cba814168c8a81b26370ff7e" compoundref="d2/d45/a01826" startline="174" endline="189">systemEndianToBigEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ae57ba897bf67e8d944d1bac129d1482e" compoundref="d2/d45/a01826" startline="199" endline="216">systemEndianToBigEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1adee39e32672cf37d66d46ed2f9f2ea88" compoundref="d2/d45/a01826" startline="268" endline="283">systemEndianToLittleEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1aabc86afcfc7ad13fa8c773f03ef3ff87" compoundref="d2/d45/a01826" startline="293" endline="310">systemEndianToLittleEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a192cd4b3e742a0e1f059c9edb4f63f1f" compoundref="d2/d45/a01826" startline="226" endline="236">systemEndianToLittleEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a50871386c7d4679ca8d126622cb2c6a7" compoundref="d2/d45/a01826" startline="246" endline="258">systemEndianToLittleEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1a6a6ec649b211de12f8945624e1f29933" compoundref="d2/d45/a01826" startline="320" endline="335">systemEndianToLittleEndian</referencedby>
        <referencedby refid="d2/dd2/a02279_1ab3cacbf0e52675c7dfcf46aec7b8a083" compoundref="d2/d45/a01826" startline="345" endline="362">systemEndianToLittleEndian</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a19e109447afe72b8a1ad068cadba3627" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T castor::switchEndianness</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>switchEndianness</name>
        <qualifiedname>castor::switchEndianness</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Change le boutisme du paramètre. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="65" column="13" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="65" bodyend="70"/>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a93e72f9c39ce923c9393d4f6df336175" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T &amp;</type>
        <definition>constexpr T &amp; castor::systemEndianToBigEndian</definition>
        <argsstring>(T &amp;value) noexcept</argsstring>
        <name>systemEndianToBigEndian</name>
        <qualifiedname>castor::systemEndianToBigEndian</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en big endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="80" column="14" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="80" bodyend="90"/>
        <references refid="d2/dd2/a02279_1a3a1140cb52b24dd091693b1c95146eea" compoundref="d2/d45/a01826" startline="19" endline="22">isBigEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad58701f180fdf6d8fc87eb0948a6fa0b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T castor::systemEndianToBigEndian</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>systemEndianToBigEndian</name>
        <qualifiedname>castor::systemEndianToBigEndian</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en big endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="100" column="13" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="100" bodyend="112"/>
        <references refid="d2/dd2/a02279_1a3a1140cb52b24dd091693b1c95146eea" compoundref="d2/d45/a01826" startline="19" endline="22">isBigEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac0cf5e2146e104e8894be5b10788327f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt; &amp;</type>
        <definition>constexpr Array&lt; T, N &gt; &amp; castor::systemEndianToBigEndian</definition>
        <argsstring>(Array&lt; T, N &gt; &amp;value) noexcept</argsstring>
        <name>systemEndianToBigEndian</name>
        <qualifiedname>castor::systemEndianToBigEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en big endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="122" column="18" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="122" bodyend="137"/>
        <references refid="d2/dd2/a02279_1a3a1140cb52b24dd091693b1c95146eea" compoundref="d2/d45/a01826" startline="19" endline="22">isBigEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a54e460b822ffcf0964269a724df7a7b6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt;</type>
        <definition>constexpr Array&lt; T, N &gt; castor::systemEndianToBigEndian</definition>
        <argsstring>(Array&lt; T, N &gt; const &amp;value)</argsstring>
        <name>systemEndianToBigEndian</name>
        <qualifiedname>castor::systemEndianToBigEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en big endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="147" column="17" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="147" bodyend="164"/>
        <references refid="d2/dd2/a02279_1a3a1140cb52b24dd091693b1c95146eea" compoundref="d2/d45/a01826" startline="19" endline="22">isBigEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab4a7ba77cba814168c8a81b26370ff7e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>constexpr Vector&lt; T &gt; &amp; castor::systemEndianToBigEndian</definition>
        <argsstring>(Vector&lt; T &gt; &amp;value) noexcept</argsstring>
        <name>systemEndianToBigEndian</name>
        <qualifiedname>castor::systemEndianToBigEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en big endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="174" column="19" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="174" bodyend="189"/>
        <references refid="d2/dd2/a02279_1a3a1140cb52b24dd091693b1c95146eea" compoundref="d2/d45/a01826" startline="19" endline="22">isBigEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae57ba897bf67e8d944d1bac129d1482e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt;</type>
        <definition>constexpr Vector&lt; T &gt; castor::systemEndianToBigEndian</definition>
        <argsstring>(Vector&lt; T &gt; const &amp;value)</argsstring>
        <name>systemEndianToBigEndian</name>
        <qualifiedname>castor::systemEndianToBigEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en big endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="199" column="18" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="199" bodyend="216"/>
        <references refid="d2/dd2/a02279_1a3a1140cb52b24dd091693b1c95146eea" compoundref="d2/d45/a01826" startline="19" endline="22">isBigEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a192cd4b3e742a0e1f059c9edb4f63f1f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T &amp;</type>
        <definition>constexpr T &amp; castor::systemEndianToLittleEndian</definition>
        <argsstring>(T &amp;value) noexcept</argsstring>
        <name>systemEndianToLittleEndian</name>
        <qualifiedname>castor::systemEndianToLittleEndian</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en little endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="226" column="14" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="226" bodyend="236"/>
        <references refid="d2/dd2/a02279_1aa4e7623135b28fcbdeb6f2d423df6746" compoundref="d2/d45/a01826" startline="29" endline="32">isLittleEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a50871386c7d4679ca8d126622cb2c6a7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T castor::systemEndianToLittleEndian</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>systemEndianToLittleEndian</name>
        <qualifiedname>castor::systemEndianToLittleEndian</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en little endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="246" column="13" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="246" bodyend="258"/>
        <references refid="d2/dd2/a02279_1aa4e7623135b28fcbdeb6f2d423df6746" compoundref="d2/d45/a01826" startline="29" endline="32">isLittleEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1adee39e32672cf37d66d46ed2f9f2ea88" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt; &amp;</type>
        <definition>constexpr Array&lt; T, N &gt; &amp; castor::systemEndianToLittleEndian</definition>
        <argsstring>(Array&lt; T, N &gt; &amp;value) noexcept</argsstring>
        <name>systemEndianToLittleEndian</name>
        <qualifiedname>castor::systemEndianToLittleEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en little endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="268" column="18" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="268" bodyend="283"/>
        <references refid="d2/dd2/a02279_1aa4e7623135b28fcbdeb6f2d423df6746" compoundref="d2/d45/a01826" startline="29" endline="32">isLittleEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aabc86afcfc7ad13fa8c773f03ef3ff87" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt;</type>
        <definition>constexpr Array&lt; T, N &gt; castor::systemEndianToLittleEndian</definition>
        <argsstring>(Array&lt; T, N &gt; const &amp;value)</argsstring>
        <name>systemEndianToLittleEndian</name>
        <qualifiedname>castor::systemEndianToLittleEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en little endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="293" column="17" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="293" bodyend="310"/>
        <references refid="d2/dd2/a02279_1aa4e7623135b28fcbdeb6f2d423df6746" compoundref="d2/d45/a01826" startline="29" endline="32">isLittleEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6a6ec649b211de12f8945624e1f29933" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; castor::systemEndianToLittleEndian</definition>
        <argsstring>(Vector&lt; T &gt; &amp;value) noexcept</argsstring>
        <name>systemEndianToLittleEndian</name>
        <qualifiedname>castor::systemEndianToLittleEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en little endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="320" column="16" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="320" bodyend="335"/>
        <references refid="d2/dd2/a02279_1aa4e7623135b28fcbdeb6f2d423df6746" compoundref="d2/d45/a01826" startline="29" endline="32">isLittleEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab3cacbf0e52675c7dfcf46aec7b8a083" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; castor::systemEndianToLittleEndian</definition>
        <argsstring>(Vector&lt; T &gt; const &amp;value)</argsstring>
        <name>systemEndianToLittleEndian</name>
        <qualifiedname>castor::systemEndianToLittleEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en little endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="345" column="15" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="345" bodyend="362"/>
        <references refid="d2/dd2/a02279_1aa4e7623135b28fcbdeb6f2d423df6746" compoundref="d2/d45/a01826" startline="29" endline="32">isLittleEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1add97d0a02fa4f84214d94adce553304e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T &amp;</type>
        <definition>constexpr T &amp; castor::bigEndianToSystemEndian</definition>
        <argsstring>(T &amp;value) noexcept</argsstring>
        <name>bigEndianToSystemEndian</name>
        <qualifiedname>castor::bigEndianToSystemEndian</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée de big endian à l&apos;endianness du système si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="372" column="14" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="372" bodyend="382"/>
        <references refid="d2/dd2/a02279_1a3a1140cb52b24dd091693b1c95146eea" compoundref="d2/d45/a01826" startline="19" endline="22">isBigEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a49a3ae83045c03ad117623890299fb1c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T castor::bigEndianToSystemEndian</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>bigEndianToSystemEndian</name>
        <qualifiedname>castor::bigEndianToSystemEndian</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée de big endian à l&apos;endianness du système si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="392" column="13" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="392" bodyend="404"/>
        <references refid="d2/dd2/a02279_1a3a1140cb52b24dd091693b1c95146eea" compoundref="d2/d45/a01826" startline="19" endline="22">isBigEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0d184ae41d5975c6c14fc8cc48df18fe" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt; &amp;</type>
        <definition>constexpr Array&lt; T, N &gt; &amp; castor::bigEndianToSystemEndian</definition>
        <argsstring>(Array&lt; T, N &gt; &amp;value) noexcept</argsstring>
        <name>bigEndianToSystemEndian</name>
        <qualifiedname>castor::bigEndianToSystemEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en big endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="414" column="18" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="414" bodyend="429"/>
        <references refid="d2/dd2/a02279_1a3a1140cb52b24dd091693b1c95146eea" compoundref="d2/d45/a01826" startline="19" endline="22">isBigEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a547f175c03da584bbcc49e7f6e4f4013" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt;</type>
        <definition>constexpr Array&lt; T, N &gt; castor::bigEndianToSystemEndian</definition>
        <argsstring>(Array&lt; T, N &gt; const &amp;value)</argsstring>
        <name>bigEndianToSystemEndian</name>
        <qualifiedname>castor::bigEndianToSystemEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en big endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="439" column="17" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="439" bodyend="456"/>
        <references refid="d2/dd2/a02279_1a3a1140cb52b24dd091693b1c95146eea" compoundref="d2/d45/a01826" startline="19" endline="22">isBigEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a69cb2659d6729cb2651ef72d69cad6d8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; castor::bigEndianToSystemEndian</definition>
        <argsstring>(Vector&lt; T &gt; &amp;value) noexcept</argsstring>
        <name>bigEndianToSystemEndian</name>
        <qualifiedname>castor::bigEndianToSystemEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en big endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="466" column="16" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="466" bodyend="481"/>
        <references refid="d2/dd2/a02279_1a3a1140cb52b24dd091693b1c95146eea" compoundref="d2/d45/a01826" startline="19" endline="22">isBigEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0e4596003b5027cb4faf7daf3febd1ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; castor::bigEndianToSystemEndian</definition>
        <argsstring>(Vector&lt; T &gt; const &amp;value)</argsstring>
        <name>bigEndianToSystemEndian</name>
        <qualifiedname>castor::bigEndianToSystemEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en big endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="491" column="15" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="491" bodyend="508"/>
        <references refid="d2/dd2/a02279_1a3a1140cb52b24dd091693b1c95146eea" compoundref="d2/d45/a01826" startline="19" endline="22">isBigEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae21f89dfd2feafe41ec98e132f9b5d9f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T &amp;</type>
        <definition>constexpr T &amp; castor::littleEndianToSystemEndian</definition>
        <argsstring>(T &amp;value) noexcept</argsstring>
        <name>littleEndianToSystemEndian</name>
        <qualifiedname>castor::littleEndianToSystemEndian</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée de little endian à l&apos;endianness du système si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="518" column="14" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="518" bodyend="528"/>
        <references refid="d2/dd2/a02279_1aa4e7623135b28fcbdeb6f2d423df6746" compoundref="d2/d45/a01826" startline="29" endline="32">isLittleEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2152b811d74de8f62369f62ed2995029" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T castor::littleEndianToSystemEndian</definition>
        <argsstring>(T const &amp;value)</argsstring>
        <name>littleEndianToSystemEndian</name>
        <qualifiedname>castor::littleEndianToSystemEndian</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée de little endian à l&apos;endianness du système si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="538" column="13" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="538" bodyend="550"/>
        <references refid="d2/dd2/a02279_1aa4e7623135b28fcbdeb6f2d423df6746" compoundref="d2/d45/a01826" startline="29" endline="32">isLittleEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a423745cbe221958e708733caef7628ff" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt; &amp;</type>
        <definition>constexpr Array&lt; T, N &gt; &amp; castor::littleEndianToSystemEndian</definition>
        <argsstring>(Array&lt; T, N &gt; &amp;value) noexcept</argsstring>
        <name>littleEndianToSystemEndian</name>
        <qualifiedname>castor::littleEndianToSystemEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en little endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="560" column="18" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="560" bodyend="575"/>
        <references refid="d2/dd2/a02279_1aa4e7623135b28fcbdeb6f2d423df6746" compoundref="d2/d45/a01826" startline="29" endline="32">isLittleEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae43298a8041aeff0dda0e7e1001de0eb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt;</type>
        <definition>constexpr Array&lt; T, N &gt; castor::littleEndianToSystemEndian</definition>
        <argsstring>(Array&lt; T, N &gt; const &amp;value)</argsstring>
        <name>littleEndianToSystemEndian</name>
        <qualifiedname>castor::littleEndianToSystemEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aeece6f8801a7db118a091f586a413edf" kindref="member">Array</ref>&lt; T, N &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en little endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="585" column="17" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="585" bodyend="602"/>
        <references refid="d2/dd2/a02279_1aa4e7623135b28fcbdeb6f2d423df6746" compoundref="d2/d45/a01826" startline="29" endline="32">isLittleEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a90e916507e696bd93a200c94110958ea" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; castor::littleEndianToSystemEndian</definition>
        <argsstring>(Vector&lt; T &gt; &amp;value) noexcept</argsstring>
        <name>littleEndianToSystemEndian</name>
        <qualifiedname>castor::littleEndianToSystemEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en little endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="612" column="16" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="612" bodyend="627"/>
        <references refid="d2/dd2/a02279_1aa4e7623135b28fcbdeb6f2d423df6746" compoundref="d2/d45/a01826" startline="29" endline="32">isLittleEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae9e015a793e5ed70ecbd0f3b25591d5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; castor::littleEndianToSystemEndian</definition>
        <argsstring>(Vector&lt; T &gt; const &amp;value)</argsstring>
        <name>littleEndianToSystemEndian</name>
        <qualifiedname>castor::littleEndianToSystemEndian</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convertit la valeur donnée en little endian si nécessaire. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur à convertir. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Endianness.hpp" line="637" column="15" bodyfile="CastorUtils/Data/Endianness.hpp" bodystart="637" bodyend="654"/>
        <references refid="d2/dd2/a02279_1aa4e7623135b28fcbdeb6f2d423df6746" compoundref="d2/d45/a01826" startline="29" endline="32">isLittleEndian</references>
        <references refid="d2/dd2/a02279_1a90cf51f94dda321c89fc40fa450d0b91" compoundref="d2/d45/a01826" startline="42" endline="55">switchEndianness</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8a9a169c869f8a0c4a082972efd39048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::fileOpen</definition>
        <argsstring>(FILE *&amp;file, std::filesystem::path const &amp;path, char const *mode)</argsstring>
        <name>fileOpen</name>
        <qualifiedname>castor::fileOpen</qualifiedname>
        <param>
          <type>FILE *&amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>std::filesystem::path const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Ouvre un fichier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Reçoit le descripteur du fichier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>Le chemin d&apos;acès au fichier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Le mode d&apos;ouverture </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> en cas de réussite </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/File.hpp" line="34" column="13" declfile="CastorUtils/Data/File.hpp" declline="34" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a131e151da915596858f5bd31792a9a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::fileOpen64</definition>
        <argsstring>(FILE *&amp;file, std::filesystem::path const &amp;path, char const *mode)</argsstring>
        <name>fileOpen64</name>
        <qualifiedname>castor::fileOpen64</qualifiedname>
        <param>
          <type>FILE *&amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>std::filesystem::path const &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Ouvre un fichier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Reçoit le descripteur du fichier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>Le chemin d&apos;acès au fichier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Le mode d&apos;ouverture </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> en cas de réussite </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/File.hpp" line="49" column="13" declfile="CastorUtils/Data/File.hpp" declline="49" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9ed515bf133139941421dbaf183a0892" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::fileSeek</definition>
        <argsstring>(FILE *file, int64_t offset, int origin)</argsstring>
        <name>fileSeek</name>
        <qualifiedname>castor::fileSeek</qualifiedname>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>origin</declname>
        </param>
        <briefdescription>
<para>Déplace le curseur du fichier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Le descripteur du fichier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;indice de déplacement </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">origin</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;origine du déplacement </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> en cas de réussite </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/File.hpp" line="64" column="13" declfile="CastorUtils/Data/File.hpp" declline="64" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac23b31b6977b674781bf4299b657e668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> int64_t</type>
        <definition>CU_API int64_t castor::fileTell</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>fileTell</name>
        <qualifiedname>castor::fileTell</qualifiedname>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Récupère la position du curseur dans un fichier. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Le descripteur du fichier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/File.hpp" line="75" column="16" declfile="CastorUtils/Data/File.hpp" declline="75" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a12c72e512330a2a85e0c2885f9ba2d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d1/de1/a08011" kindref="compound">Path</ref></type>
        <definition>CU_API Path castor::operator/</definition>
        <argsstring>(Path const &amp;lhs, Path const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d1/de1/a08011" kindref="compound">Path</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d1/de1/a08011" kindref="compound">Path</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Concatène 2 chemins. Ajoute le séparateur si besoin est. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Le premier chemin à concaténer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Le second chemin à concaténer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Path.hpp" line="236" column="13" declfile="CastorUtils/Data/Path.hpp" declline="236" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a533a953a18865bb24570dfa8a294a1be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d1/de1/a08011" kindref="compound">Path</ref></type>
        <definition>CU_API Path castor::operator/</definition>
        <argsstring>(Path const &amp;lhs, String const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d1/de1/a08011" kindref="compound">Path</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Concatène une chaîne de caractères à un chemin. Ajoute le séparateur si besoin est. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first path to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>La chaîne de caractères à concaténer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Path.hpp" line="247" column="13" declfile="CastorUtils/Data/Path.hpp" declline="247" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aeaa3fee7bde602b4fe7cecfa102dc7de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d1/de1/a08011" kindref="compound">Path</ref></type>
        <definition>CU_API Path castor::operator/</definition>
        <argsstring>(Path const &amp;lhs, char const *rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d1/de1/a08011" kindref="compound">Path</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Concatène une chaîne de caractères à un chemin. Ajoute le séparateur si besoin est. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first path to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>La chaîne de caractères à concaténer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Path.hpp" line="258" column="13" declfile="CastorUtils/Data/Path.hpp" declline="258" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a42b5c9db28038e79a11438209b0716fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d1/de1/a08011" kindref="compound">Path</ref></type>
        <definition>CU_API Path castor::operator/</definition>
        <argsstring>(Path const &amp;lhs, wchar_t const *rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d1/de1/a08011" kindref="compound">Path</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>wchar_t const *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Concatène une chaîne de caractères à un chemin. Ajoute le séparateur si besoin est. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first path to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>La chaîne de caractères à concaténer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Path.hpp" line="269" column="13" declfile="CastorUtils/Data/Path.hpp" declline="269" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1accc40a55c26c48edb54f59bebae3ee25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d1/de1/a08011" kindref="compound">Path</ref></type>
        <definition>CU_API Path castor::operator/</definition>
        <argsstring>(String const &amp;lhs, Path const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d1/de1/a08011" kindref="compound">Path</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Concatène une chaîne de caractères à un chemin. Ajoute le séparateur si besoin est. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>La chaîne de caractères à concaténer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first path to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Path.hpp" line="280" column="13" declfile="CastorUtils/Data/Path.hpp" declline="280" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a234e4ba9c5d60807b7a11a0945a90746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d1/de1/a08011" kindref="compound">Path</ref></type>
        <definition>CU_API Path castor::operator/</definition>
        <argsstring>(char const *lhs, Path const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type>char const *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d1/de1/a08011" kindref="compound">Path</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Concatène une chaîne de caractères à un chemin. Ajoute le séparateur si besoin est. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>La chaîne de caractères à concaténer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first path to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Path.hpp" line="291" column="13" declfile="CastorUtils/Data/Path.hpp" declline="291" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7e2f68f8778573e22c8efdc95e63b690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d1/de1/a08011" kindref="compound">Path</ref></type>
        <definition>CU_API Path castor::operator/</definition>
        <argsstring>(wchar_t const *lhs, Path const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type>wchar_t const *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d1/de1/a08011" kindref="compound">Path</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Concatène une chaîne de caractères à un chemin. Ajoute le séparateur si besoin est. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>La chaîne de caractères à concaténer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first path to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Path.hpp" line="302" column="13" declfile="CastorUtils/Data/Path.hpp" declline="302" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a05390f6c4733efdafb719edb7ae4b972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> std::filesystem::path</type>
        <definition>CU_API std::filesystem::path castor::makePath</definition>
        <argsstring>(StringView str)</argsstring>
        <name>makePath</name>
        <qualifiedname>castor::makePath</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a7fc5aca9eb8d35e69abfe9df07e365e3" kindref="member">StringView</ref></type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/Path.hpp" line="304" column="30" declfile="CastorUtils/Data/Path.hpp" declline="304" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5bf1543b4317375fc1d6aa7f94214171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/d82/a08075" kindref="compound">TextFile</ref> &amp;</type>
        <definition>TextFile &amp; castor::operator&lt;&lt;</definition>
        <argsstring>(TextFile &amp;file, T const &amp;toWrite)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="dc/d82/a08075" kindref="compound">TextFile</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>toWrite</declname>
        </param>
        <briefdescription>
<para>Fonction d&apos;écriture dépendant du mode d&apos;ouverture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Le fichier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">toWrite</parametername>
</parameternamelist>
<parameterdescription>
<para>La donnée à écrire dans le fichier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Une référence sur ce fichier </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/TextFile.hpp" line="123" column="14" declfile="CastorUtils/Data/TextFile.hpp" declline="123" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6cd6c3b0d1bbb289cf187136a85a590d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/d82/a08075" kindref="compound">TextFile</ref> &amp;</type>
        <definition>TextFile &amp; castor::operator&gt;&gt;</definition>
        <argsstring>(TextFile &amp;file, T &amp;toRead)</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>castor::operator&gt;&gt;</qualifiedname>
        <param>
          <type><ref refid="dc/d82/a08075" kindref="compound">TextFile</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>toRead</declname>
        </param>
        <briefdescription>
<para>Fonction de lecture dépendant du mode d&apos;ouverture. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>Le fichier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">toRead</parametername>
</parameternamelist>
<parameterdescription>
<para>La donnée à lire à partir du fichier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Une référence sur ce fichier </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Data/TextFile.hpp" line="136" column="24" declfile="CastorUtils/Data/TextFile.hpp" declline="136" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a67a96e62a32cb4f2576c4f680bdcbc46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IterT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(ArrayView&lt; IterT &gt; const &amp;lhs, ArrayView&lt; IterT &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d4/dcc/a08151" kindref="compound">ArrayView</ref>&lt; IterT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/dcc/a08151" kindref="compound">ArrayView</ref>&lt; IterT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ArrayView.hpp" line="151" column="6" bodyfile="CastorUtils/Design/ArrayView.hpp" bodystart="151" bodyend="166"/>
        <referencedby refid="d2/dd2/a02279_1a8aeb2bdca873c064de8205585f75f4c1" compoundref="d9/dd5/a01886" startline="203" endline="206">operator!=</referencedby>
        <referencedby refid="d2/dd2/a02279_1a69be01bcfea5dfdb69cf6d7c46d2bb4c" compoundref="d9/dd5/a01886" startline="191" endline="194">operator!=</referencedby>
        <referencedby refid="d2/dd2/a02279_1a25d9ccacb363b779d31ecff956d7c9ba" compoundref="d4/d0d/a01904" startline="212" endline="216">operator!=</referencedby>
        <referencedby refid="d2/dd2/a02279_1a81fe40c35fcc431ca05a1f77437a0466" compoundref="d4/d0d/a01904" startline="198" endline="202">operator!=</referencedby>
        <referencedby refid="d2/dd2/a02279_1a6be6e7d65eab747b1f9c62ebb1b2eb44" compoundref="d9/dd5/a01886" startline="197" endline="200">operator!=</referencedby>
        <referencedby refid="d2/dd2/a02279_1a00dcd13247bf6daa75a077b3f5bd8257" compoundref="d4/d0d/a01904" startline="205" endline="209">operator!=</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aeadc9f93fa6ced302c1475b5b09606e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IterT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(ArrayView&lt; IterT &gt; const &amp;lhs, ArrayView&lt; IterT &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d4/dcc/a08151" kindref="compound">ArrayView</ref>&lt; IterT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/dcc/a08151" kindref="compound">ArrayView</ref>&lt; IterT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ArrayView.hpp" line="169" column="6" bodyfile="CastorUtils/Design/ArrayView.hpp" bodystart="169" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae0a3e7eea924d39ca155a1fb041d37df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IterT</type>
          </param>
          <param>
            <type>typename ValueT</type>
            <defval>typename IteratorTraits&lt; IterT &gt;::value_type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="d4/dcc/a08151" kindref="compound">ArrayView</ref>&lt; ValueT &gt;</type>
        <definition>ArrayView&lt; ValueT &gt; castor::makeArrayView</definition>
        <argsstring>(IterT begin, IterT end)</argsstring>
        <name>makeArrayView</name>
        <qualifiedname>castor::makeArrayView</qualifiedname>
        <param>
          <type>IterT</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>IterT</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ArrayView.hpp" line="187" column="11" bodyfile="CastorUtils/Design/ArrayView.hpp" bodystart="187" bodyend="193"/>
        <referencedby refid="df/d51/a05835_1ae665e5cdab0076b84e00b9dc8b1129cd" compoundref="d3/d8a/a00899" startline="329" endline="332">castor3d::TextWord::chars</referencedby>
        <referencedby refid="d8/d08/a05843_1acb79048831c6d6625b7bda8f66b8d19d" compoundref="d3/d8a/a00899" startline="401" endline="404">castor3d::TextLine::chars</referencedby>
        <referencedby refid="d6/d3e/a08939_1ac2e22f1ba45001a00d3d434e34f2917e" compoundref="d8/db2/a11726" startline="282" endline="287">castor::Image::getBuffer</referencedby>
        <referencedby refid="d6/d3e/a08939_1ad7c966947eaffdb1f5885782243efb65" compoundref="d8/db2/a11726" startline="289" endline="294">castor::Image::getBuffer</referencedby>
        <referencedby refid="d7/d76/a03451_1aab6c41b3e6bd874a2eea4fe95d769f68" compoundref="d9/dd0/a00191" startline="161" endline="166">castor3d::GpuBufferOffsetT&lt; DataT &gt;::getData</referencedby>
        <referencedby refid="d8/d07/a05847_1a7ef11f605e874ca7b22b8f59bbcff5e4" compoundref="d3/d8a/a00899" startline="431" endline="434">castor3d::OverlayLines::lines</referencedby>
        <referencedby refid="d8/d07/a05847_1a198a180c968cb814d28cf3f133b14326" compoundref="d3/d8a/a00899" startline="426" endline="429">castor3d::OverlayLines::lines</referencedby>
        <referencedby refid="d2/dd2/a02279_1ad36a423cefa09e0aa175d1d49053dbef" compoundref="d9/d7d/a01880" startline="202" endline="205">makeArrayView</referencedby>
        <referencedby refid="d2/dd2/a02279_1a7a69d331088d1d8023f38947a5464f99" compoundref="d9/d7d/a01880" startline="208" endline="211">makeArrayView</referencedby>
        <referencedby refid="d2/dd2/a02279_1ae9badb789e8e0d23d2cf3e130b40b597" compoundref="d9/d7d/a01880" startline="214" endline="217">makeArrayView</referencedby>
        <referencedby refid="dd/d49/a05839_1a4af9e4b663226aa442129883d9a43ac8" compoundref="d3/d8a/a00899" startline="358" endline="361">castor3d::OverlayWords::words</referencedby>
        <referencedby refid="dd/d49/a05839_1a98f32fb640c5e8ad8e854cb7137a6cc0" compoundref="d3/d8a/a00899" startline="353" endline="356">castor3d::OverlayWords::words</referencedby>
        <referencedby refid="d8/d08/a05843_1a61cc1e40b530e9aef9631421dde7f73d" compoundref="d3/d8a/a00899" startline="396" endline="399">castor3d::TextLine::words</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af1043df0993f36dcd9c434eeb8a4ab26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/dcc/a08151" kindref="compound">ArrayView</ref>&lt; ValueT &gt;</type>
        <definition>ArrayView&lt; ValueT &gt; castor::makeArrayView</definition>
        <argsstring>(ValueT *begin, ValueT *end)</argsstring>
        <name>makeArrayView</name>
        <qualifiedname>castor::makeArrayView</qualifiedname>
        <param>
          <type>ValueT *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>ValueT *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ArrayView.hpp" line="196" column="11" bodyfile="CastorUtils/Design/ArrayView.hpp" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad36a423cefa09e0aa175d1d49053dbef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IterT</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto castor::makeArrayView</definition>
        <argsstring>(IterT begin, uint32_t size)</argsstring>
        <name>makeArrayView</name>
        <qualifiedname>castor::makeArrayView</qualifiedname>
        <param>
          <type>IterT</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ArrayView.hpp" line="202" column="6" bodyfile="CastorUtils/Design/ArrayView.hpp" bodystart="202" bodyend="205"/>
        <references refid="d2/dd2/a02279_1ae0a3e7eea924d39ca155a1fb041d37df" compoundref="d9/d7d/a01880" startline="187" endline="193">makeArrayView</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7a69d331088d1d8023f38947a5464f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IterT</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto castor::makeArrayView</definition>
        <argsstring>(IterT begin, uint64_t size)</argsstring>
        <name>makeArrayView</name>
        <qualifiedname>castor::makeArrayView</qualifiedname>
        <param>
          <type>IterT</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ArrayView.hpp" line="208" column="6" bodyfile="CastorUtils/Design/ArrayView.hpp" bodystart="208" bodyend="211"/>
        <references refid="d2/dd2/a02279_1ae0a3e7eea924d39ca155a1fb041d37df" compoundref="d9/d7d/a01880" startline="187" endline="193">makeArrayView</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae9badb789e8e0d23d2cf3e130b40b597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto castor::makeArrayView</definition>
        <argsstring>(ValueT(&amp;buffer)[N])</argsstring>
        <name>makeArrayView</name>
        <qualifiedname>castor::makeArrayView</qualifiedname>
        <param>
          <type>ValueT(&amp;)</type>
          <declname>buffer</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ArrayView.hpp" line="214" column="6" bodyfile="CastorUtils/Design/ArrayView.hpp" bodystart="214" bodyend="217"/>
        <references refid="d2/dd2/a02279_1ae0a3e7eea924d39ca155a1fb041d37df" compoundref="d9/d7d/a01880" startline="187" endline="193">makeArrayView</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7d94d68cb1f0c315b07085ae40f31878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareArrayView</definition>
        <argsstring>(byte, Byte)</argsstring>
        <name>CU_DeclareArrayView</name>
        <qualifiedname>castor::CU_DeclareArrayView</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aca8563dfbb381d26a3914193c17100b2" kindref="member">byte</ref></type>
        </param>
        <param>
          <type>Byte</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ArrayView.hpp" line="219" column="1" declfile="CastorUtils/Design/ArrayView.hpp" declline="219" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1ee2816faf211884e7d33161c6bc58fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareArrayView</definition>
        <argsstring>(s32, Int32)</argsstring>
        <name>CU_DeclareArrayView</name>
        <qualifiedname>castor::CU_DeclareArrayView</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a56b4fefdc51947c070b45d9ee02694f2" kindref="member">s32</ref></type>
        </param>
        <param>
          <type>Int32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ArrayView.hpp" line="220" column="1" declfile="CastorUtils/Design/ArrayView.hpp" declline="220" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a75d5d628fc2ab414e434b2404c943aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareArrayView</definition>
        <argsstring>(u32, UInt32)</argsstring>
        <name>CU_DeclareArrayView</name>
        <qualifiedname>castor::CU_DeclareArrayView</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a03cc011a86d6f847862db4cb35f25c65" kindref="member">u32</ref></type>
        </param>
        <param>
          <type>UInt32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ArrayView.hpp" line="221" column="1" declfile="CastorUtils/Design/ArrayView.hpp" declline="221" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4cc3a18c1f05c7622b0eb4d01258dcfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareArrayView</definition>
        <argsstring>(byte const, ConstByte)</argsstring>
        <name>CU_DeclareArrayView</name>
        <qualifiedname>castor::CU_DeclareArrayView</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1aca8563dfbb381d26a3914193c17100b2" kindref="member">byte</ref> const</type>
        </param>
        <param>
          <type>ConstByte</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ArrayView.hpp" line="222" column="1" declfile="CastorUtils/Design/ArrayView.hpp" declline="222" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a51e28cdfb42c35448236223adf4f1c5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareArrayView</definition>
        <argsstring>(s32 const, ConstInt32)</argsstring>
        <name>CU_DeclareArrayView</name>
        <qualifiedname>castor::CU_DeclareArrayView</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a56b4fefdc51947c070b45d9ee02694f2" kindref="member">s32</ref> const</type>
        </param>
        <param>
          <type>ConstInt32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ArrayView.hpp" line="223" column="1" declfile="CastorUtils/Design/ArrayView.hpp" declline="223" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a04b7ec116ae49634f7104adf08a468d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>castor::CU_DeclareArrayView</definition>
        <argsstring>(u32 const, ConstUInt32)</argsstring>
        <name>CU_DeclareArrayView</name>
        <qualifiedname>castor::CU_DeclareArrayView</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a03cc011a86d6f847862db4cb35f25c65" kindref="member">u32</ref> const</type>
        </param>
        <param>
          <type>ConstUInt32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ArrayView.hpp" line="224" column="1" declfile="CastorUtils/Design/ArrayView.hpp" declline="224" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a83753f0501828c03cdf51f697334f74a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InitFunc</type>
          </param>
          <param>
            <type>typename CleanFunc</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d23/a08155" kindref="compound">BlockGuard</ref>&lt; CleanFunc &gt;</type>
        <definition>BlockGuard&lt; CleanFunc &gt; castor::makeBlockGuard</definition>
        <argsstring>(InitFunc init, CleanFunc clean)</argsstring>
        <name>makeBlockGuard</name>
        <qualifiedname>castor::makeBlockGuard</qualifiedname>
        <param>
          <type>InitFunc</type>
          <declname>init</declname>
        </param>
        <param>
          <type>CleanFunc</type>
          <declname>clean</declname>
        </param>
        <briefdescription>
<para>fonction d&apos;aide à la construction d&apos;un <ref refid="d7/d23/a08155" kindref="compound">BlockGuard</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;action effectuée à la construction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clean</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;action effectuée lors de la destruction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La garde. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/BlockGuard.hpp" line="70" column="12" bodyfile="CastorUtils/Design/BlockGuard.hpp" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2bbcfc3e6b76603092837adb234cf358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CleanFunc</type>
          </param>
        </templateparamlist>
        <type><ref refid="d7/d23/a08155" kindref="compound">BlockGuard</ref>&lt; CleanFunc &gt;</type>
        <definition>BlockGuard&lt; CleanFunc &gt; castor::makeBlockGuard</definition>
        <argsstring>(CleanFunc clean)</argsstring>
        <name>makeBlockGuard</name>
        <qualifiedname>castor::makeBlockGuard</qualifiedname>
        <param>
          <type>CleanFunc</type>
          <declname>clean</declname>
        </param>
        <briefdescription>
<para>fonction d&apos;aide à la construction d&apos;un <ref refid="d7/d23/a08155" kindref="compound">BlockGuard</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">clean</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;action effectuée lors de la destruction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La garde. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/BlockGuard.hpp" line="85" column="12" bodyfile="CastorUtils/Design/BlockGuard.hpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae59b40ca8e745ca5486203d8bb7fb2e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename ControlT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(ChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;lhs, ValueT const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d2/def/a08159" kindref="compound">ChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ValueT const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ChangeTracked.hpp" line="173" column="6" bodyfile="CastorUtils/Design/ChangeTracked.hpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1ebac91ff07b3362774251ba1f50f479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename ControlT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(ValueT const &amp;lhs, ChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type>ValueT const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/def/a08159" kindref="compound">ChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ChangeTracked.hpp" line="179" column="6" bodyfile="CastorUtils/Design/ChangeTracked.hpp" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a26336b7413066a635ef481a0bc3b3cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename ControlT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(ChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;lhs, ChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d2/def/a08159" kindref="compound">ChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/def/a08159" kindref="compound">ChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ChangeTracked.hpp" line="185" column="6" bodyfile="CastorUtils/Design/ChangeTracked.hpp" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a69be01bcfea5dfdb69cf6d7c46d2bb4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename ControlT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(ChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;lhs, ValueT const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d2/def/a08159" kindref="compound">ChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ValueT const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ChangeTracked.hpp" line="191" column="6" bodyfile="CastorUtils/Design/ChangeTracked.hpp" bodystart="191" bodyend="194"/>
        <references refid="d2/dd2/a02279_1a67a96e62a32cb4f2576c4f680bdcbc46" compoundref="d9/d7d/a01880" startline="151" endline="166">operator==</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6be6e7d65eab747b1f9c62ebb1b2eb44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename ControlT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(ValueT const &amp;lhs, ChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type>ValueT const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/def/a08159" kindref="compound">ChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ChangeTracked.hpp" line="197" column="6" bodyfile="CastorUtils/Design/ChangeTracked.hpp" bodystart="197" bodyend="200"/>
        <references refid="d2/dd2/a02279_1a67a96e62a32cb4f2576c4f680bdcbc46" compoundref="d9/d7d/a01880" startline="151" endline="166">operator==</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8aeb2bdca873c064de8205585f75f4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename ControlT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(ChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;lhs, ChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d2/def/a08159" kindref="compound">ChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/def/a08159" kindref="compound">ChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ChangeTracked.hpp" line="203" column="6" bodyfile="CastorUtils/Design/ChangeTracked.hpp" bodystart="203" bodyend="206"/>
        <references refid="d2/dd2/a02279_1a67a96e62a32cb4f2576c4f680bdcbc46" compoundref="d9/d7d/a01880" startline="151" endline="166">operator==</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a25538b5f1b8fc8e77e60d8149f095e2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ControlT</type>
          </param>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/def/a08159" kindref="compound">ChangeTrackedT</ref>&lt; ValueT, ControlT &gt;</type>
        <definition>ChangeTrackedT&lt; ValueT, ControlT &gt; castor::makeChangeTrackedT</definition>
        <argsstring>(ValueT const &amp;value)</argsstring>
        <name>makeChangeTrackedT</name>
        <qualifiedname>castor::makeChangeTrackedT</qualifiedname>
        <param>
          <type>ValueT const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ChangeTracked.hpp" line="209" column="16" bodyfile="CastorUtils/Design/ChangeTracked.hpp" bodystart="209" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a73d90e0be3a78ea22533459a68001314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1ae9d3fa7fcdf1d831572a45f9c1f131a9" kindref="member">ChangeTracked</ref>&lt; ValueT &gt;</type>
        <definition>ChangeTracked&lt; ValueT &gt; castor::makeChangeTracked</definition>
        <argsstring>(ValueT const &amp;value)</argsstring>
        <name>makeChangeTracked</name>
        <qualifiedname>castor::makeChangeTracked</qualifiedname>
        <param>
          <type>ValueT const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ChangeTracked.hpp" line="215" column="15" bodyfile="CastorUtils/Design/ChangeTracked.hpp" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aebe9c8619780ed08d87b43ba81430811" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagTypeT</type>
          </param>
          <param>
            <type>typename IteratorTraitsT</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::operator==</definition>
        <argsstring>(FlagIterator&lt; FlagTypeT, IteratorTraitsT &gt; const &amp;lhs, FlagIterator&lt; FlagTypeT, IteratorTraitsT &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d4/dfd/a08203" kindref="compound">FlagIterator</ref>&lt; FlagTypeT, IteratorTraitsT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/dfd/a08203" kindref="compound">FlagIterator</ref>&lt; FlagTypeT, IteratorTraitsT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="110" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="110" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3304c7856daf5ede40bdcef63fe18e0e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagTypeT</type>
          </param>
          <param>
            <type>typename IteratorTraitsT</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::operator!=</definition>
        <argsstring>(FlagIterator&lt; FlagTypeT, IteratorTraitsT &gt; const &amp;lhs, FlagIterator&lt; FlagTypeT, IteratorTraitsT &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d4/dfd/a08203" kindref="compound">FlagIterator</ref>&lt; FlagTypeT, IteratorTraitsT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/dfd/a08203" kindref="compound">FlagIterator</ref>&lt; FlagTypeT, IteratorTraitsT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="118" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="118" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a286e49c694cef3e8cd60372eede62046" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::hasAll</definition>
        <argsstring>(T const &amp;value, U const &amp;rhs) noexcept</argsstring>
        <name>hasAll</name>
        <qualifiedname>castor::hasAll</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les indicateurs recherchés. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si flags contient n&apos;importe lequel de rhs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="422" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="422" bodyend="427"/>
        <referencedby refid="d2/dd2/a02279_1a8d68e983598980529d1fb917c64371d2" compoundref="d5/d99/a01901" startline="487" endline="491">hasAll</referencedby>
        <referencedby refid="d2/dd2/a02279_1a4567f2311258f8c9d4e4ad11c3f8cd6b" compoundref="d5/d99/a01901" startline="471" endline="475">hasAll</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af12e231ba796de02fa3fd865b85d515d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::hasAll</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;value, FlagType const &amp;rhs) noexcept</argsstring>
        <name>hasAll</name>
        <qualifiedname>castor::hasAll</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>FlagType const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les indicateurs recherchés. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si flags contient n&apos;importe lequel de rhs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="439" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="439" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5aaccb634e1d5ffb13df3de2a2137bbd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::hasAll</definition>
        <argsstring>(FlagType const &amp;value, FlagCombination&lt; FlagType &gt; const &amp;rhs) noexcept</argsstring>
        <name>hasAll</name>
        <qualifiedname>castor::hasAll</qualifiedname>
        <param>
          <type>FlagType const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les indicateurs recherchés. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si flags contient n&apos;importe lequel de rhs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="455" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="455" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4567f2311258f8c9d4e4ad11c3f8cd6b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::hasAll</definition>
        <argsstring>(typename FlagCombination&lt; FlagType &gt;::BaseType const &amp;value, FlagCombination&lt; FlagType &gt; const &amp;rhs) noexcept</argsstring>
        <name>hasAll</name>
        <qualifiedname>castor::hasAll</qualifiedname>
        <param>
          <type>typename <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;::BaseType const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les indicateurs recherchés. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si flags contient n&apos;importe lequel de rhs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="471" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="471" bodyend="475"/>
        <references refid="d2/dd2/a02279_1a286e49c694cef3e8cd60372eede62046" compoundref="d5/d99/a01901" startline="422" endline="427">hasAll</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8d68e983598980529d1fb917c64371d2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::hasAll</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;value, typename FlagCombination&lt; FlagType &gt;::BaseType const &amp;rhs) noexcept</argsstring>
        <name>hasAll</name>
        <qualifiedname>castor::hasAll</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;::BaseType const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les indicateurs recherchés. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si flags contient n&apos;importe lequel de rhs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="487" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="487" bodyend="491"/>
        <references refid="d2/dd2/a02279_1a286e49c694cef3e8cd60372eede62046" compoundref="d5/d99/a01901" startline="422" endline="427">hasAll</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6acabbce35d20f25ca048eeb4c795777" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::hasAll</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;value, FlagCombination&lt; FlagType &gt; const &amp;rhs) noexcept</argsstring>
        <name>hasAll</name>
        <qualifiedname>castor::hasAll</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les indicateurs recherchés. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si flags contient n&apos;importe lequel de rhs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="503" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="503" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2e4a904d2d72dfb619729cbfed7cc4f5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::hasAny</definition>
        <argsstring>(T const &amp;value, U const &amp;rhs) noexcept</argsstring>
        <name>hasAny</name>
        <qualifiedname>castor::hasAny</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les indicateurs recherchés. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si flags contient n&apos;importe lequel de rhs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="519" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="519" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aca9923f58ab1255b44957130276648d0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::hasAny</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;value, FlagType const &amp;rhs) noexcept</argsstring>
        <name>hasAny</name>
        <qualifiedname>castor::hasAny</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>FlagType const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les indicateurs recherchés. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si flags contient n&apos;importe lequel de rhs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="536" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="536" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a96b8800133bb41e4734a3b4e5192c784" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::hasAny</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;value, Type const &amp;rhs) noexcept</argsstring>
        <name>hasAny</name>
        <qualifiedname>castor::hasAny</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Type const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les indicateurs recherchés. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si flags contient n&apos;importe lequel de rhs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="552" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="552" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac4504cea81f7a8a2c409023692fad772" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::checkFlag</definition>
        <argsstring>(T const &amp;value, U const &amp;flag) noexcept</argsstring>
        <name>checkFlag</name>
        <qualifiedname>castor::checkFlag</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>U const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;indicateur recherché. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si flags contient flag. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="570" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="570" bodyend="575"/>
        <referencedby refid="d1/da3/a03835_1a17f3bb684566f8c93abc0c289411e474" compoundref="db/ddc/a00353" startline="74" endline="77">castor3d::ProgressCtrl::hasTitle</referencedby>
        <referencedby refid="d6/dee/a03795_1ae6d193e17e11347c6cf378f6f19d5ed7" compoundref="dc/d50/a00332" startline="265" endline="268">castor3d::Control::isAlwaysOnTop</referencedby>
        <referencedby refid="d1/da3/a03835_1a8ddf40c5029350e3f85d8b795d8bd9ad" compoundref="db/ddc/a00353" startline="69" endline="72">castor3d::ProgressCtrl::isBottomToTop</referencedby>
        <referencedby refid="d1/db8/a03847_1a202829f04a8497d6d457c0e514411b42" compoundref="d4/def/a00359" startline="96" endline="99">castor3d::ScrollBarCtrl::isHorizontal</referencedby>
        <referencedby refid="d1/da3/a03835_1adf262960457046e6e117d81c42528427" compoundref="db/ddc/a00353" startline="54" endline="57">castor3d::ProgressCtrl::isLeftToRight</referencedby>
        <referencedby refid="d6/dee/a03795_1aecf9cd988ccd639e7ecbbd1947f887ff" compoundref="dc/d50/a00332" startline="272" endline="275">castor3d::Control::isMovable</referencedby>
        <referencedby refid="d8/d73/a03799_1adba23f7b86fdfd05b62982ce016e2b37" compoundref="df/d91/a00335" startline="78" endline="81">castor3d::EditCtrl::isMultiLine</referencedby>
        <referencedby refid="d6/dee/a03795_1afbb584204c8a58b4312bda40a028199d" compoundref="dc/d50/a00332" startline="279" endline="282">castor3d::Control::isResizable</referencedby>
        <referencedby refid="d1/da3/a03835_1a37d97e303cdf33a032e7f489044d04ee" compoundref="db/ddc/a00353" startline="59" endline="62">castor3d::ProgressCtrl::isRightToLeft</referencedby>
        <referencedby refid="d1/da3/a03835_1a1209a9b9b9facc612b090a0477442335" compoundref="db/ddc/a00353" startline="64" endline="67">castor3d::ProgressCtrl::isTopToBottom</referencedby>
        <referencedby refid="d1/db8/a03847_1a772195399666bebe35b4338120a0b22a" compoundref="d4/def/a00359" startline="91" endline="94">castor3d::ScrollBarCtrl::isVertical</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4c42b6fdfc1f70b895977f8d9f3bebce" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::checkFlag</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;value, FlagType const &amp;flag) noexcept</argsstring>
        <name>checkFlag</name>
        <qualifiedname>castor::checkFlag</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>FlagType const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;indicateur recherché. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si flags contient flag. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="587" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="587" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a67521e6a9d4c42ccd0c30239060a486e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool castor::checkFlag</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;value, Type const &amp;flag) noexcept</argsstring>
        <name>checkFlag</name>
        <qualifiedname>castor::checkFlag</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Type const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;indicateur recherché. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si flags contient flag. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="604" column="16" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="604" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1adcc7aab861cd7b3f9b3b4b9f5e04d990" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; &amp;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; &amp; castor::addFlag</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; &amp;value, FlagType const &amp;flag) noexcept</argsstring>
        <name>addFlag</name>
        <qualifiedname>castor::addFlag</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>FlagType const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Ajoute un indicateur à la valeur donnée. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;indicateur à ajouter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="624" column="28" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="625" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1c47aef634e7cec2aa49a7c1626581e1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; &amp;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; &amp; castor::addFlags</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; &amp;value, FlagCombination&lt; FlagType &gt; const &amp;flags) noexcept</argsstring>
        <name>addFlags</name>
        <qualifiedname>castor::addFlags</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Ajoute une combinaison d&apos;indicateurs à la valeur donnée. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>La combinaison d&apos;indicateurs à ajouter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="644" column="28" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="645" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9d8aa7848febf2e6d47766e4c146cddb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; &amp;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; &amp; castor::remFlags</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; &amp;value, FlagCombination&lt; FlagType &gt; const &amp;flags) noexcept</argsstring>
        <name>remFlags</name>
        <qualifiedname>castor::remFlags</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Enlève une combinaison d&apos;indicateurs de la valeur donnée. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Les indicateurs à enlever. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="664" column="28" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="665" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad4616d0a644e70828f635667dc6e62d9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; &amp;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; &amp; castor::remFlag</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; &amp;value, FlagType const &amp;flag) noexcept</argsstring>
        <name>remFlag</name>
        <qualifiedname>castor::remFlag</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>FlagType const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Enlève un indicateur de la valeur donnée. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;indicateur à enlever. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="685" column="28" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="686" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad2d7337c6173db15b8075ab9fec6904b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; castor::addFlag</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;value, FlagType const &amp;flag) noexcept</argsstring>
        <name>addFlag</name>
        <qualifiedname>castor::addFlag</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>FlagType const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Ajoute un indicateur à la valeur donnée. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;indicateur à ajouter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La nouvelle valeur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="706" column="27" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="707" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aec4e4b1be9b55757434864748d9896f1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FlagType</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt;</type>
        <definition>constexpr FlagCombination&lt; FlagType &gt; castor::remFlag</definition>
        <argsstring>(FlagCombination&lt; FlagType &gt; const &amp;value, FlagType const &amp;flag) noexcept</argsstring>
        <name>remFlag</name>
        <qualifiedname>castor::remFlag</qualifiedname>
        <param>
          <type><ref refid="dd/dbb/a08207" kindref="compound">FlagCombination</ref>&lt; FlagType &gt; const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>FlagType const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Enlève un indicateur de la valeur donnée. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flag</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;indicateur à enlever. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La nouvelle valeur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/FlagCombination.hpp" line="725" column="27" bodyfile="CastorUtils/Design/FlagCombination.hpp" bodystart="726" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8238779fa4a81ae3273d33abba2d7827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename ControlT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(GroupChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;lhs, ValueT const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d2/d4c/a08211" kindref="compound">GroupChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ValueT const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/GroupChangeTracked.hpp" line="177" column="6" bodyfile="CastorUtils/Design/GroupChangeTracked.hpp" bodystart="177" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8e67a84bda5153fff926e61b949fe36e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename ControlT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(ValueT const &amp;lhs, GroupChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type>ValueT const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/d4c/a08211" kindref="compound">GroupChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/GroupChangeTracked.hpp" line="184" column="6" bodyfile="CastorUtils/Design/GroupChangeTracked.hpp" bodystart="184" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a48a8c5045df7722919bc54539fa3c85a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename ControlT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(GroupChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;lhs, GroupChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d2/d4c/a08211" kindref="compound">GroupChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/d4c/a08211" kindref="compound">GroupChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/GroupChangeTracked.hpp" line="191" column="6" bodyfile="CastorUtils/Design/GroupChangeTracked.hpp" bodystart="191" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a81fe40c35fcc431ca05a1f77437a0466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename ControlT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(GroupChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;lhs, ValueT const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d2/d4c/a08211" kindref="compound">GroupChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ValueT const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/GroupChangeTracked.hpp" line="198" column="6" bodyfile="CastorUtils/Design/GroupChangeTracked.hpp" bodystart="198" bodyend="202"/>
        <references refid="d2/dd2/a02279_1a67a96e62a32cb4f2576c4f680bdcbc46" compoundref="d9/d7d/a01880" startline="151" endline="166">operator==</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a00dcd13247bf6daa75a077b3f5bd8257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename ControlT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(ValueT const &amp;lhs, GroupChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type>ValueT const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/d4c/a08211" kindref="compound">GroupChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/GroupChangeTracked.hpp" line="205" column="6" bodyfile="CastorUtils/Design/GroupChangeTracked.hpp" bodystart="205" bodyend="209"/>
        <references refid="d2/dd2/a02279_1a67a96e62a32cb4f2576c4f680bdcbc46" compoundref="d9/d7d/a01880" startline="151" endline="166">operator==</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a25d9ccacb363b779d31ecff956d7c9ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename ControlT</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(GroupChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;lhs, GroupChangeTrackedT&lt; ValueT, ControlT &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d2/d4c/a08211" kindref="compound">GroupChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/d4c/a08211" kindref="compound">GroupChangeTrackedT</ref>&lt; ValueT, ControlT &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/GroupChangeTracked.hpp" line="212" column="6" bodyfile="CastorUtils/Design/GroupChangeTracked.hpp" bodystart="212" bodyend="216"/>
        <references refid="d2/dd2/a02279_1a67a96e62a32cb4f2576c4f680bdcbc46" compoundref="d9/d7d/a01880" startline="151" endline="166">operator==</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a640c5dbf000b42db3a949c8311372bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueT</type>
          </param>
          <param>
            <type>typename ControlT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/d4c/a08211" kindref="compound">GroupChangeTrackedT</ref>&lt; ValueT, ControlT &gt;</type>
        <definition>GroupChangeTrackedT&lt; ValueT, ControlT &gt; castor::makeGroupChangeTracked</definition>
        <argsstring>(ControlT &amp;dirty, ValueT const &amp;value)</argsstring>
        <name>makeGroupChangeTracked</name>
        <qualifiedname>castor::makeGroupChangeTracked</qualifiedname>
        <param>
          <type>ControlT &amp;</type>
          <declname>dirty</declname>
        </param>
        <param>
          <type>ValueT const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/GroupChangeTracked.hpp" line="219" column="21" bodyfile="CastorUtils/Design/GroupChangeTracked.hpp" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a07bac2eb95d8d70df1772e7c89486ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ResT</type>
          </param>
          <param>
            <type>typename KeyT</type>
          </param>
          <param>
            <type>typename TraitsT</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>ParametersT</declname>
            <defname>ParametersT</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1acf9c83aa8a2c9341a6d69295fe8a53dd" kindref="member">ResourceCachePtrT</ref>&lt; ResT, KeyT, TraitsT &gt;</type>
        <definition>ResourceCachePtrT&lt; ResT, KeyT, TraitsT &gt; castor::makeCache</definition>
        <argsstring>(ParametersT &amp;&amp;... parameters)</argsstring>
        <name>makeCache</name>
        <qualifiedname>castor::makeCache</qualifiedname>
        <param>
          <type>ParametersT &amp;&amp;...</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Crée un cache. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Les paramètres de construction du cache. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ResourceCache.hpp" line="77" column="19" bodyfile="CastorUtils/Design/ResourceCache.hpp" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a430693a15600ae35210184212fdee77a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScopeExitFuncType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/ded/a08271" kindref="compound">ScopeGuard</ref>&lt; ScopeExitFuncType &gt;</type>
        <definition>ScopeGuard&lt; ScopeExitFuncType &gt; castor::makeScopeGuard</definition>
        <argsstring>(ScopeExitFuncType const &amp;function)</argsstring>
        <name>makeScopeGuard</name>
        <qualifiedname>castor::makeScopeGuard</qualifiedname>
        <param>
          <type>ScopeExitFuncType const &amp;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
<para>Fonction d&apos;aide à la création d&apos;un <ref refid="d2/ded/a08271" kindref="compound">ScopeGuard</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">function</parametername>
</parameternamelist>
<parameterdescription>
<para>La fonction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le <ref refid="d2/ded/a08271" kindref="compound">ScopeGuard</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Design/ScopeGuard.hpp" line="90" column="12" bodyfile="CastorUtils/Design/ScopeGuard.hpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a171bfb74536d2ad75c187fb418fe32a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::cuLogError</definition>
        <argsstring>(char const *const description)</argsstring>
        <name>cuLogError</name>
        <qualifiedname>castor::cuLogError</qualifiedname>
        <param>
          <type>char const *const</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Exception/Assertion.hpp" line="13" column="13" declfile="CastorUtils/Exception/Assertion.hpp" declline="13" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8c366158a28c72fd2c7c6a303adcf431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::cuFailure</definition>
        <argsstring>(char const *const description)</argsstring>
        <name>cuFailure</name>
        <qualifiedname>castor::cuFailure</qualifiedname>
        <param>
          <type>char const *const</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Exception/Assertion.hpp" line="14" column="13" declfile="CastorUtils/Exception/Assertion.hpp" declline="14" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aca60c51a22b7cf9a4b3f2927a01cda24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ContextT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1a27a5fadabd88829c1fb75daab222a523" kindref="member">ContextDeleterPtr</ref></type>
        <definition>ContextDeleterPtr castor::makeContextDeleter</definition>
        <argsstring>()</argsstring>
        <name>makeContextDeleter</name>
        <qualifiedname>castor::makeContextDeleter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/FileParserContext.hpp" line="40" column="19" bodyfile="CastorUtils/FileParser/FileParserContext.hpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5aca8935b52c18baa10566e04c9e99b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ParameterType</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1ae025149db64e1fa986a71e2460c50263" kindref="member">ParserParameterBaseSPtr</ref></type>
        <definition>ParserParameterBaseSPtr castor::makeParameter</definition>
        <argsstring>()</argsstring>
        <name>makeParameter</name>
        <qualifiedname>castor::makeParameter</qualifiedname>
        <briefdescription>
<para>Crée un paramètre du type donné. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Le paramètre créé. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="460" column="25" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="460" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a762e9bb402b27cd49434b6a737215982" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ParameterType</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1ae025149db64e1fa986a71e2460c50263" kindref="member">ParserParameterBaseSPtr</ref></type>
        <definition>ParserParameterBaseSPtr castor::makeDefaultedParameter</definition>
        <argsstring>(ParserParameterValueType&lt; Type &gt; defaultValue, Params &amp;&amp;... params)</argsstring>
        <name>makeDefaultedParameter</name>
        <qualifiedname>castor::makeDefaultedParameter</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a0cfae048124eacb762a5f80847f7e57e" kindref="member">ParserParameterValueType</ref>&lt; Type &gt;</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>Params &amp;&amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Crée un paramètre du type donné. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Le paramètre créé. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="473" column="25" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="473" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afd4d14caac8140e77291d001daae6275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ParameterType</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1ae025149db64e1fa986a71e2460c50263" kindref="member">ParserParameterBaseSPtr</ref></type>
        <definition>ParserParameterBaseSPtr castor::makeParameter</definition>
        <argsstring>(Range&lt; T &gt; const &amp;range)</argsstring>
        <name>makeParameter</name>
        <qualifiedname>castor::makeParameter</qualifiedname>
        <param>
          <type><ref refid="d9/da8/a09207" kindref="compound">Range</ref>&lt; T &gt; const &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Crée un paramètre du type donné. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Le paramètre créé. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="488" column="25" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="488" bodyend="506"/>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222afb0a96d3d1a0e6fab85b4b99b193d204">eDouble</references>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a9b9526f83cc144a1ee8dfa49d1c45863">eFloat</references>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a3845503e40242d6618309692c516108f">eInt16</references>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222ad923bf3d9fc434789d3c3a7e2d3d3a2a">eInt32</references>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a3dca4388aeecb9a75bc1f3334f0c7a9e">eInt64</references>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a738e931fc7cbf7c75e7a12f9ae4fb2b6">eInt8</references>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a2f6409156266f1b5592ee6f7f481bec8">eLongDouble</references>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a8f0eb3e5aaf01e9329d226723aacbfc1">eUInt16</references>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a0fdef21bbeab2c5de5749662bda11d15">eUInt32</references>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222ab419b95c1a7e21d02e5a63a2fff2f636">eUInt64</references>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a74afcf4af3070fd0511ea915d3b9cd92">eUInt8</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9281781d7e1bf9e03d855140f20446a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ParameterType</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1ae025149db64e1fa986a71e2460c50263" kindref="member">ParserParameterBaseSPtr</ref></type>
        <definition>ParserParameterBaseSPtr castor::makeParameter</definition>
        <argsstring>(StringView name, UInt32StrMap const &amp;values)</argsstring>
        <name>makeParameter</name>
        <qualifiedname>castor::makeParameter</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a7fc5aca9eb8d35e69abfe9df07e365e3" kindref="member">StringView</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type>UInt32StrMap const &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Crée un paramètre du type donné. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Le nom du type de paramètre. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs utilisées pour valider la valeur récupérée. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le paramètre créé. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="520" column="25" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="520" bodyend="526"/>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222af562b3a1475186e72ab460ab5fdb8977">eBitwiseOred32BitsCheckedText</references>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a70c5250c584262dcb9afc9171feaad71">eCheckedText</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2911bd652ecfde3564cd0c50c0054171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ParameterType</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1ae025149db64e1fa986a71e2460c50263" kindref="member">ParserParameterBaseSPtr</ref></type>
        <definition>ParserParameterBaseSPtr castor::makeParameter</definition>
        <argsstring>(StringView name, UInt64StrMap const &amp;values)</argsstring>
        <name>makeParameter</name>
        <qualifiedname>castor::makeParameter</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a7fc5aca9eb8d35e69abfe9df07e365e3" kindref="member">StringView</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type>UInt64StrMap const &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Crée un paramètre du type donné. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Le nom du type de paramètre. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs utilisées pour valider la valeur récupérée. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le paramètre créé. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="540" column="25" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="540" bodyend="546"/>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a5800fa8fcf052b2dcef27ca1a66b9c54">eBitwiseOred64BitsCheckedText</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad52fa34f2b7a84e05aca948d251dac0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ParameterType</type>
            <declname>Type</declname>
            <defname>Type</defname>
          </param>
          <param>
            <type>typename EnumType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/dd2/a02279_1ae025149db64e1fa986a71e2460c50263" kindref="member">ParserParameterBaseSPtr</ref></type>
        <definition>ParserParameterBaseSPtr castor::makeParameter</definition>
        <argsstring>()</argsstring>
        <name>makeParameter</name>
        <qualifiedname>castor::makeParameter</qualifiedname>
        <briefdescription>
<para>Crée un paramètre du type donné. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Le paramètre créé. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameter.hpp" line="556" column="25" bodyfile="CastorUtils/FileParser/ParserParameter.hpp" bodystart="556" bodyend="562"/>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222af562b3a1475186e72ab460ab5fdb8977">eBitwiseOred32BitsCheckedText</references>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a5800fa8fcf052b2dcef27ca1a66b9c54">eBitwiseOred64BitsCheckedText</references>
        <references refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222a70c5250c584262dcb9afc9171feaad71">eCheckedText</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ace9a20f6b3480454eb1b9a1c4b5f955e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, bool &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="110" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="110" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2d13e9e81d9460bbe5c4e76e30f7a101" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, int8_t &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>int8_t &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="112" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="112" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aec4c9c7a744fa20b7a56298f94b1a919" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, uint8_t &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>uint8_t &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="114" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="114" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a918754ee73e2bc19733d24781a36cad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, int16_t &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>int16_t &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="116" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="116" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afaadb055c3c3e2f316aaa789edb08232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, uint16_t &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>uint16_t &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="118" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="118" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac8c0d6d043d534aa129482d0fe4b4e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, int32_t &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>int32_t &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="120" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="120" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1abe5cb9b0055dc7e02eeb3bf239654970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, uint32_t &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="122" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="122" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6f2c1b180abc00c5b2403202cd64f75a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, int64_t &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>int64_t &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="124" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="124" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a672c88fa98fb0ec26a32c25af3d3fe03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, uint64_t &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>uint64_t &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="126" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="126" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9bf438cb9efdff026766019cb15640b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, float &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="128" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="128" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa0ca7c5d2264de2ec7f08d41d12f61ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, double &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="130" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="130" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a12d71fa747fd7e48f456c1ef54f25005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, long double &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>long double &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="132" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="132" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1adbab8f563af27e33411f9f8a2097989a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, String &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="134" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="134" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad7e90d62f09095b67ef315baa240693d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Path &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="d1/de1/a08011" kindref="compound">Path</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="136" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="136" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3fc57957024aafffa4ae20c4430e3c0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, PixelFormat &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="138" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="138" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a919e469cd16e6f35e0485bdc9c6db2c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Point2i &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Point2i &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="140" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="140" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac57df19e6efe3ce3ef126bc1cb7dfeba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Point3i &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Point3i &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="142" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="142" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa0ec040c89abb466077abf5e930eb618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Point4i &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Point4i &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="144" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="144" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a468b098202747ebc3aeb61be71e6a15f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Point2ui &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Point2ui &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="146" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="146" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1abcfbbba4669c3a2ef835dd7411b9f627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Point3ui &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Point3ui &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="148" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="148" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af0968f5bfff8a70e10d8b567441c9670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Point4ui &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Point4ui &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="150" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="150" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aecc3e2045c6bfa64cb3238a571536d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Point2f &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Point2f &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="152" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="152" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4fa308db46e6d0ce0eeb9cf816d020fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Point3f &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Point3f &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="154" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="154" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0e49cc8c16456d44a991d749da88e039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Point4f &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Point4f &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="156" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="156" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afc0c60c935700bc4868360957f946734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Point2d &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Point2d &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="158" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="158" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6efe420fb16f2891ff0014fb68d037b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Point3d &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Point3d &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="160" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="160" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ada32ba9e243888ee94b6694345173386" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Point4d &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type>Point4d &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="162" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="162" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6e7333731c2f6d5c2af65800e1d495da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Size &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="d4/dd6/a09023" kindref="compound">Size</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="164" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="164" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a828d8934993544f6dee2782e9bc8609c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Position &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="df/dba/a08999" kindref="compound">Position</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="166" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="166" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3a2e9103c3e8d8df22dc3ee2e2992a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, Rectangle &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="d4/da5/a09011" kindref="compound">Rectangle</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="168" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="168" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9a3082baae4e4a71d90c226e0f0da60c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, RgbColour &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a4425e82836c5b73c4c0276ceeca8d663" kindref="member">RgbColour</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="170" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="170" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4f441ebc87ad78204a73cb85de8c0905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, RgbaColour &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a0248f41072abe76e8ae264325ea85a18" kindref="member">RgbaColour</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="172" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="172" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad288017f8565beec69715c33554ca058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, HdrRgbColour &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1ae6e51493f47ee99a48e6bc37c45ab9b9" kindref="member">HdrRgbColour</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="174" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="174" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7e1fa61ceb44eb7178692740bbd1e6b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getParameterValue</definition>
        <argsstring>(ParserParameterBase const &amp;parameter, HdrRgbaColour &amp;value)</argsstring>
        <name>getParameterValue</name>
        <qualifiedname>castor::getParameterValue</qualifiedname>
        <param>
          <type><ref refid="de/d2b/a08447" kindref="compound">ParserParameterBase</ref> const &amp;</type>
          <declname>parameter</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1abef501abd8305434e8c297a85c67b5ea" kindref="member">HdrRgbaColour</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterBase.hpp" line="176" column="13" declfile="CastorUtils/FileParser/ParserParameterBase.hpp" declline="176" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2bfb6f2dc6590330c82ef5cd79c74bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d2/dd2/a02279_1a7fc5aca9eb8d35e69abfe9df07e365e3" kindref="member">StringView</ref></type>
        <definition>CU_API StringView castor::getTypeName</definition>
        <argsstring>(ParameterType type)</argsstring>
        <name>getTypeName</name>
        <qualifiedname>castor::getTypeName</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a64114a56af07e11adb6eb2f3f816d222" kindref="member">ParameterType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Récupère le nom du type de paramètre donné. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>Le type de paramètre. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/FileParser/ParserParameterHelpers.hpp" line="962" column="19" declfile="CastorUtils/FileParser/ParserParameterHelpers.hpp" declline="962" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aebd63daa3c44dc10fa7ebfa37658bdc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(BoundingBox const &amp;lhs, BoundingBox const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d6/d51/a08727" kindref="compound">BoundingBox</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d6/d51/a08727" kindref="compound">BoundingBox</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/BoundingBox.hpp" line="132" column="13" bodyfile="CastorUtils/Graphics/BoundingBox.hpp" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afde5fa0bf95f3ee21d40dba18c44a32a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(BoundingBox const &amp;lhs, BoundingBox const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d6/d51/a08727" kindref="compound">BoundingBox</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d6/d51/a08727" kindref="compound">BoundingBox</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/BoundingBox.hpp" line="139" column="13" bodyfile="CastorUtils/Graphics/BoundingBox.hpp" bodystart="139" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1acffa1b767b0a8fcabfd295b8f6ac6222" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(BoundingSphere const &amp;lhs, BoundingSphere const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="dd/d6f/a08735" kindref="compound">BoundingSphere</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dd/d6f/a08735" kindref="compound">BoundingSphere</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/BoundingSphere.hpp" line="95" column="13" bodyfile="CastorUtils/Graphics/BoundingSphere.hpp" bodystart="95" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ada709d4172abb3eb09491f9e6f7b8380" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(BoundingSphere const &amp;lhs, BoundingSphere const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="dd/d6f/a08735" kindref="compound">BoundingSphere</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dd/d6f/a08735" kindref="compound">BoundingSphere</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/BoundingSphere.hpp" line="102" column="13" bodyfile="CastorUtils/Graphics/BoundingSphere.hpp" bodystart="102" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3c32c1c5422f5c3b81fb9196e8df302f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::operator==</definition>
        <argsstring>(ColourComponent const &amp;lhs, ColourComponent const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;égalité </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à comparer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ColourComponent.hpp" line="538" column="13" declfile="CastorUtils/Graphics/ColourComponent.hpp" declline="538" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab513408c7857aed49635992097023822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::operator!=</definition>
        <argsstring>(ColourComponent const &amp;lhs, ColourComponent const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de différence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à comparer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ColourComponent.hpp" line="547" column="13" declfile="CastorUtils/Graphics/ColourComponent.hpp" declline="547" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aed43096926f327729e25cf7b8290b189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::operator+</definition>
        <argsstring>(ColourComponent const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;affectation par addition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à ajouter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs + rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ColourComponent.hpp" line="559" column="7" bodyfile="CastorUtils/Graphics/ColourComponent.hpp" bodystart="559" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a173d58ef626feab65a6e3c3d9122a4ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::operator-</definition>
        <argsstring>(ColourComponent const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;affectation par soustraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à soustraire </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs - rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ColourComponent.hpp" line="578" column="7" bodyfile="CastorUtils/Graphics/ColourComponent.hpp" bodystart="578" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad615908e6edbb8d5a826b15c707e27df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::operator/</definition>
        <argsstring>(ColourComponent const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;affectation par division. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à diviser </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs / rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ColourComponent.hpp" line="597" column="7" bodyfile="CastorUtils/Graphics/ColourComponent.hpp" bodystart="597" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad1ef9b89eab77fdb83bb2dcd45c626b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::operator*</definition>
        <argsstring>(ColourComponent const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;affectation par multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à multiplier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs * rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ColourComponent.hpp" line="616" column="7" bodyfile="CastorUtils/Graphics/ColourComponent.hpp" bodystart="616" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2aa52dd99e58ae6528c7cf169f3fc5e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> float</type>
        <definition>CU_API float castor::operator+</definition>
        <argsstring>(ColourComponent const &amp;lhs, ColourComponent const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;addition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à ajouter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs + rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ColourComponent.hpp" line="634" column="14" declfile="CastorUtils/Graphics/ColourComponent.hpp" declline="634" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3e86f5bb7f801d11f168f3b8e47cf90f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> float</type>
        <definition>CU_API float castor::operator-</definition>
        <argsstring>(ColourComponent const &amp;lhs, ColourComponent const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de soustraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à soustraire </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs - rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ColourComponent.hpp" line="645" column="14" declfile="CastorUtils/Graphics/ColourComponent.hpp" declline="645" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad7466ab43ed37d0ae60ea7fc21ec1439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> float</type>
        <definition>CU_API float castor::operator*</definition>
        <argsstring>(ColourComponent const &amp;lhs, ColourComponent const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à multiplier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs * rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ColourComponent.hpp" line="656" column="14" declfile="CastorUtils/Graphics/ColourComponent.hpp" declline="656" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a38031473a3bc32a08e64fa042222849c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> float</type>
        <definition>CU_API float castor::operator/</definition>
        <argsstring>(ColourComponent const &amp;lhs, ColourComponent const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de division. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à diviser </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs / rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ColourComponent.hpp" line="667" column="14" declfile="CastorUtils/Graphics/ColourComponent.hpp" declline="667" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a208aefc0dc11f0e27ec53d2c32a13639" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(Glyph const &amp;lhs, Glyph const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d0/db3/a08783" kindref="compound">Glyph</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d0/db3/a08783" kindref="compound">Glyph</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de comparaison d&apos;égalité. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs à comparer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Glyph.hpp" line="127" column="13" bodyfile="CastorUtils/Graphics/Glyph.hpp" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a12584f82ee9a872b93808238c18fbb68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(Glyph const &amp;lhs, Glyph const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d0/db3/a08783" kindref="compound">Glyph</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d0/db3/a08783" kindref="compound">Glyph</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de comparaison de différence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs à comparer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Glyph.hpp" line="139" column="13" bodyfile="CastorUtils/Graphics/Glyph.hpp" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4ad761828452d424224657d4b8441ab5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::operator&lt;</definition>
        <argsstring>(Glyph const &amp;lhs, Glyph const &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>castor::operator&lt;</qualifiedname>
        <param>
          <type><ref refid="d0/db3/a08783" kindref="compound">Glyph</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d0/db3/a08783" kindref="compound">Glyph</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de comparaison inférieur. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs à comparer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Glyph.hpp" line="151" column="8" bodyfile="CastorUtils/Graphics/Glyph.hpp" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa13a21822dd510f88b7bc49ed3531451" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::operator&gt;</definition>
        <argsstring>(Glyph const &amp;lhs, Glyph const &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>castor::operator&gt;</qualifiedname>
        <param>
          <type><ref refid="d0/db3/a08783" kindref="compound">Glyph</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d0/db3/a08783" kindref="compound">Glyph</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de comparaison supérieur. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs à comparer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Glyph.hpp" line="163" column="13" bodyfile="CastorUtils/Graphics/Glyph.hpp" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a406b2bb84bb6b6e4669f7c3f3ea5bd6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::operator&lt;=</definition>
        <argsstring>(Glyph const &amp;lhs, Glyph const &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>castor::operator&lt;=</qualifiedname>
        <param>
          <type><ref refid="d0/db3/a08783" kindref="compound">Glyph</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d0/db3/a08783" kindref="compound">Glyph</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de comparaison inférieur ou égal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs à comparer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Glyph.hpp" line="175" column="8" bodyfile="CastorUtils/Graphics/Glyph.hpp" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8324df18028c0b3c1f0a23082b1f6a73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::operator&gt;=</definition>
        <argsstring>(Glyph const &amp;lhs, Glyph const &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>castor::operator&gt;=</qualifiedname>
        <param>
          <type><ref refid="d0/db3/a08783" kindref="compound">Glyph</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d0/db3/a08783" kindref="compound">Glyph</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de comparaison supérieur ou égal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs à comparer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Glyph.hpp" line="187" column="13" bodyfile="CastorUtils/Graphics/Glyph.hpp" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6f15d3542eaa97bbcede04d354830b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::operator==</definition>
        <argsstring>(HdrColourComponent const &amp;lhs, HdrColourComponent const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;égalité </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à comparer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/HdrColourComponent.hpp" line="495" column="13" declfile="CastorUtils/Graphics/HdrColourComponent.hpp" declline="495" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2641e7a3f7b4b70d6e90180eeb0f109c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::operator!=</definition>
        <argsstring>(HdrColourComponent const &amp;lhs, HdrColourComponent const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de différence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à comparer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/HdrColourComponent.hpp" line="504" column="13" declfile="CastorUtils/Graphics/HdrColourComponent.hpp" declline="504" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6c40c02bee50414c2eeb47fd7774dc43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::operator+</definition>
        <argsstring>(HdrColourComponent const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;affectation par addition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à ajouter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs + rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/HdrColourComponent.hpp" line="516" column="7" bodyfile="CastorUtils/Graphics/HdrColourComponent.hpp" bodystart="516" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad53e878c28610608ea6018d674496d6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::operator-</definition>
        <argsstring>(HdrColourComponent const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;affectation par soustraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à soustraire </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs - rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/HdrColourComponent.hpp" line="535" column="7" bodyfile="CastorUtils/Graphics/HdrColourComponent.hpp" bodystart="535" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3b5b7d1746047c4927c2406eab31d752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::operator/</definition>
        <argsstring>(HdrColourComponent const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;affectation par division. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à diviser </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs / rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/HdrColourComponent.hpp" line="554" column="7" bodyfile="CastorUtils/Graphics/HdrColourComponent.hpp" bodystart="554" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a85541c43158274fcaa47427011adcdde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::operator*</definition>
        <argsstring>(HdrColourComponent const &amp;lhs, T const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;affectation par multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à multiplier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs * rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/HdrColourComponent.hpp" line="573" column="7" bodyfile="CastorUtils/Graphics/HdrColourComponent.hpp" bodystart="573" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa8a6fa016bc76d1baf2ef7058e1afa57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> float</type>
        <definition>CU_API float castor::operator+</definition>
        <argsstring>(HdrColourComponent const &amp;lhs, HdrColourComponent const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;addition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à ajouter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs + rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/HdrColourComponent.hpp" line="591" column="14" declfile="CastorUtils/Graphics/HdrColourComponent.hpp" declline="591" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3e6f8913af8426400db7a189d27a0d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> float</type>
        <definition>CU_API float castor::operator-</definition>
        <argsstring>(HdrColourComponent const &amp;lhs, HdrColourComponent const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de soustraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à soustraire </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs - rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/HdrColourComponent.hpp" line="602" column="14" declfile="CastorUtils/Graphics/HdrColourComponent.hpp" declline="602" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab848d002fc8f0ccc4d6f0f55b8240e1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> float</type>
        <definition>CU_API float castor::operator*</definition>
        <argsstring>(HdrColourComponent const &amp;lhs, HdrColourComponent const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à multiplier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs * rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/HdrColourComponent.hpp" line="613" column="14" declfile="CastorUtils/Graphics/HdrColourComponent.hpp" declline="613" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac7b1808d5088a7d0e41028b565a6b42c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> float</type>
        <definition>CU_API float castor::operator/</definition>
        <argsstring>(HdrColourComponent const &amp;lhs, HdrColourComponent const &amp;rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="de/d4d/a08935" kindref="compound">HdrColourComponent</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de division. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à diviser </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs / rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/HdrColourComponent.hpp" line="624" column="14" declfile="CastorUtils/Graphics/HdrColourComponent.hpp" declline="624" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0fe1754548a49d68d4f4e78204663e9d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::convertToNormalMap</definition>
        <argsstring>(float strength, Image &amp;image) noexcept</argsstring>
        <name>convertToNormalMap</name>
        <qualifiedname>castor::convertToNormalMap</qualifiedname>
        <param>
          <type>float</type>
          <declname>strength</declname>
        </param>
        <param>
          <type><ref refid="d6/d3e/a08939" kindref="compound">Image</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/HeightMapToNormalMap.hpp" line="11" column="13" declfile="CastorUtils/Graphics/HeightMapToNormalMap.hpp" declline="11" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa0d94c5bb4f20c1d9a6b6274de7e6d79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1af1a3c7e291fc2daee94189dc6c349a99" kindref="member">ImageLayout::DeviceSize</ref></type>
        <definition>ImageLayout::DeviceSize castor::getSliceSize</definition>
        <argsstring>(ImageLayout const &amp;layout)</argsstring>
        <name>getSliceSize</name>
        <qualifiedname>castor::getSliceSize</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="223" column="32" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="223" bodyend="226"/>
        <references refid="d5/d6e/a08955_1aed82bb4d5ef65528f8e2958d6f9a1210">castor::ImageLayout::sliceSize</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac9e8c4ae1a600124a5f35c5be6373f1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1af1a3c7e291fc2daee94189dc6c349a99" kindref="member">ImageLayout::DeviceSize</ref></type>
        <definition>ImageLayout::DeviceSize castor::getSliceMipSize</definition>
        <argsstring>(ImageLayout const &amp;layout, uint32_t level)</argsstring>
        <name>getSliceMipSize</name>
        <qualifiedname>castor::getSliceMipSize</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="228" column="32" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="228" bodyend="232"/>
        <references refid="d5/d6e/a08955_1aeeaa15c89964a63592988574c6574f11">castor::ImageLayout::sliceMipSize</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1abc2788522efc399fa5609b36f46176e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1af1a3c7e291fc2daee94189dc6c349a99" kindref="member">ImageLayout::DeviceSize</ref></type>
        <definition>ImageLayout::DeviceSize castor::getLayerSize</definition>
        <argsstring>(ImageLayout const &amp;layout)</argsstring>
        <name>getLayerSize</name>
        <qualifiedname>castor::getLayerSize</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="234" column="32" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="234" bodyend="237"/>
        <references refid="d5/d6e/a08955_1a69db422d4c3656f19889b72492a4cf2f" compoundref="df/d52/a02027" startline="153" endline="156">castor::ImageLayout::layerSize</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a73ef76598c879aab2e0c5afdc28ec1a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1af1a3c7e291fc2daee94189dc6c349a99" kindref="member">ImageLayout::DeviceSize</ref></type>
        <definition>ImageLayout::DeviceSize castor::getLayerMipSize</definition>
        <argsstring>(ImageLayout const &amp;layout, uint32_t level)</argsstring>
        <name>getLayerMipSize</name>
        <qualifiedname>castor::getLayerMipSize</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="239" column="32" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="239" bodyend="243"/>
        <references refid="d5/d6e/a08955_1afee2d833a31fcb074f62b02d3bafb974" compoundref="df/d52/a02027" startline="158" endline="161">castor::ImageLayout::layerMipSize</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7e659f1bf0b6205d362a73060b07ee35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1af1a3c7e291fc2daee94189dc6c349a99" kindref="member">ImageLayout::DeviceSize</ref></type>
        <definition>ImageLayout::DeviceSize castor::getSliceOffset</definition>
        <argsstring>(ImageLayout const &amp;layout, uint32_t index)</argsstring>
        <name>getSliceOffset</name>
        <qualifiedname>castor::getSliceOffset</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="245" column="32" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="245" bodyend="249"/>
        <references refid="d5/d6e/a08955_1a10834e4841717c1569148c98e02c08f5">castor::ImageLayout::sliceOffset</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2dab883cc8d36041de75caef265afe00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1af1a3c7e291fc2daee94189dc6c349a99" kindref="member">ImageLayout::DeviceSize</ref></type>
        <definition>ImageLayout::DeviceSize castor::getSliceMipOffset</definition>
        <argsstring>(ImageLayout const &amp;layout, uint32_t index, uint32_t level)</argsstring>
        <name>getSliceMipOffset</name>
        <qualifiedname>castor::getSliceMipOffset</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="251" column="32" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="251" bodyend="256"/>
        <references refid="d5/d6e/a08955_1ac98035e5a690579e61691f0520c385dd">castor::ImageLayout::sliceMipOffset</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0ef3c728a32b30d2f3b325b343cc1870" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1af1a3c7e291fc2daee94189dc6c349a99" kindref="member">ImageLayout::DeviceSize</ref></type>
        <definition>ImageLayout::DeviceSize castor::getLayerOffset</definition>
        <argsstring>(ImageLayout const &amp;layout, uint32_t index)</argsstring>
        <name>getLayerOffset</name>
        <qualifiedname>castor::getLayerOffset</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="258" column="32" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="258" bodyend="262"/>
        <references refid="d5/d6e/a08955_1aa9aa9c18bbaf361620bab0a8812fec69" compoundref="df/d52/a02027" startline="163" endline="166">castor::ImageLayout::layerOffset</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a53ddff8eb3ab1536bee78d2a1ca08538" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1af1a3c7e291fc2daee94189dc6c349a99" kindref="member">ImageLayout::DeviceSize</ref></type>
        <definition>ImageLayout::DeviceSize castor::getLayerMipOffset</definition>
        <argsstring>(ImageLayout const &amp;layout, uint32_t index, uint32_t level)</argsstring>
        <name>getLayerMipOffset</name>
        <qualifiedname>castor::getLayerMipOffset</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="264" column="32" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="264" bodyend="269"/>
        <references refid="d5/d6e/a08955_1a730d72b3e9f1e462e98d3f152e4b5bfb" compoundref="df/d52/a02027" startline="168" endline="172">castor::ImageLayout::layerMipOffset</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afd95c6aa18eaa5e18cc4295704c05722" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1a5a7b41e3ac6db006ea4b7efb4de98613" kindref="member">ImageLayout::Buffer</ref></type>
        <definition>ImageLayout::Buffer castor::getBuffer</definition>
        <argsstring>(ImageLayout const &amp;layout, PxBufferBase &amp;buffer)</argsstring>
        <name>getBuffer</name>
        <qualifiedname>castor::getBuffer</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="271" column="28" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="271" bodyend="275"/>
        <references refid="d5/d6e/a08955_1af1b2c4738e3b18bd36b90455d63b74e8">castor::ImageLayout::buffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aaab9ecf9ba281913553e3cff80aaa565" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1ac161cb8db198568600b0080fe54d5dfc" kindref="member">ImageLayout::ConstBuffer</ref></type>
        <definition>ImageLayout::ConstBuffer castor::getBuffer</definition>
        <argsstring>(ImageLayout const &amp;layout, PxBufferBase const &amp;buffer)</argsstring>
        <name>getBuffer</name>
        <qualifiedname>castor::getBuffer</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> const &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="277" column="33" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="277" bodyend="281"/>
        <references refid="d5/d6e/a08955_1af1b2c4738e3b18bd36b90455d63b74e8">castor::ImageLayout::buffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9e50e9a9f91e2b39c949b87c5fc5708e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1a5a7b41e3ac6db006ea4b7efb4de98613" kindref="member">ImageLayout::Buffer</ref></type>
        <definition>ImageLayout::Buffer castor::getLayerBuffer</definition>
        <argsstring>(ImageLayout const &amp;layout, PxBufferBase &amp;buffer, uint32_t index)</argsstring>
        <name>getLayerBuffer</name>
        <qualifiedname>castor::getLayerBuffer</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="283" column="28" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="283" bodyend="288"/>
        <references refid="d5/d6e/a08955_1a0734f25a076401ad9cc5bc72afa72c4c" compoundref="df/d52/a02027" startline="174" endline="178">castor::ImageLayout::layerBuffer</references>
        <referencedby refid="d6/d3e/a08939_1abfe3e3617009f361d36322e01e512eaf" compoundref="d8/db2/a11726" startline="296" endline="300">castor::Image::getBuffer</referencedby>
        <referencedby refid="d6/d3e/a08939_1a13423eca41bfe21f8cbe02e8777294d4" compoundref="d8/db2/a11726" startline="302" endline="307">castor::Image::getBuffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a53ad359a330e350507fe9ed0a9c182b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1a5a7b41e3ac6db006ea4b7efb4de98613" kindref="member">ImageLayout::Buffer</ref></type>
        <definition>ImageLayout::Buffer castor::getLayerMipBuffer</definition>
        <argsstring>(ImageLayout const &amp;layout, PxBufferBase &amp;buffer, uint32_t index, uint32_t level)</argsstring>
        <name>getLayerMipBuffer</name>
        <qualifiedname>castor::getLayerMipBuffer</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="290" column="28" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="290" bodyend="296"/>
        <references refid="d5/d6e/a08955_1a4c4b4eacbdf4a67193a4d3ecc2d914e0" compoundref="df/d52/a02027" startline="180" endline="185">castor::ImageLayout::layerMipBuffer</references>
        <referencedby refid="d6/d3e/a08939_1ac6028f643d5681ccc96b54a5a996240d" compoundref="d8/db2/a11726" startline="309" endline="314">castor::Image::getBuffer</referencedby>
        <referencedby refid="d6/d3e/a08939_1a734d8e7426a7f9ab0a188604de547f9c" compoundref="d8/db2/a11726" startline="316" endline="322">castor::Image::getBuffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1acdeb87024d7be0442b664e8bf76e375f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1ac161cb8db198568600b0080fe54d5dfc" kindref="member">ImageLayout::ConstBuffer</ref></type>
        <definition>ImageLayout::ConstBuffer castor::getLayerBuffer</definition>
        <argsstring>(ImageLayout const &amp;layout, PxBufferBase const &amp;buffer, uint32_t index)</argsstring>
        <name>getLayerBuffer</name>
        <qualifiedname>castor::getLayerBuffer</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> const &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="298" column="33" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="298" bodyend="303"/>
        <references refid="d5/d6e/a08955_1a0734f25a076401ad9cc5bc72afa72c4c" compoundref="df/d52/a02027" startline="174" endline="178">castor::ImageLayout::layerBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a23449a1c1a04f6b565d740c50828bbcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1ac161cb8db198568600b0080fe54d5dfc" kindref="member">ImageLayout::ConstBuffer</ref></type>
        <definition>ImageLayout::ConstBuffer castor::getLayerMipBuffer</definition>
        <argsstring>(ImageLayout const &amp;layout, PxBufferBase const &amp;buffer, uint32_t index, uint32_t level)</argsstring>
        <name>getLayerMipBuffer</name>
        <qualifiedname>castor::getLayerMipBuffer</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> const &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="305" column="33" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="305" bodyend="311"/>
        <references refid="d5/d6e/a08955_1a4c4b4eacbdf4a67193a4d3ecc2d914e0" compoundref="df/d52/a02027" startline="180" endline="185">castor::ImageLayout::layerMipBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a58befdb6854455daf5194a6167457447" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::hasLayerBuffer</definition>
        <argsstring>(ImageLayout const &amp;layout, PxBufferBase const &amp;buffer, uint32_t index)</argsstring>
        <name>hasLayerBuffer</name>
        <qualifiedname>castor::hasLayerBuffer</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> const &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="313" column="13" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="313" bodyend="318"/>
        <references refid="d5/d6e/a08955_1a883000a295f4679f38209c03394ab29c" compoundref="df/d52/a02027" startline="200" endline="204">castor::ImageLayout::hasLayerBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af9c1bf11f43eb6799b29db4935509397" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::hasLayerMipBuffer</definition>
        <argsstring>(ImageLayout const &amp;layout, PxBufferBase const &amp;buffer, uint32_t index, uint32_t level)</argsstring>
        <name>hasLayerMipBuffer</name>
        <qualifiedname>castor::hasLayerMipBuffer</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> const &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="320" column="13" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="320" bodyend="326"/>
        <references refid="d5/d6e/a08955_1a78218d99fbaecefe10b5239f244f22d7" compoundref="df/d52/a02027" startline="206" endline="211">castor::ImageLayout::hasLayerMipBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a94bd28a97ae7e154fe72334ec64aa4c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1a5a7b41e3ac6db006ea4b7efb4de98613" kindref="member">ImageLayout::Buffer</ref></type>
        <definition>ImageLayout::Buffer castor::getSliceBuffer</definition>
        <argsstring>(ImageLayout const &amp;layout, PxBufferBase &amp;buffer, uint32_t index)</argsstring>
        <name>getSliceBuffer</name>
        <qualifiedname>castor::getSliceBuffer</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="328" column="28" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="328" bodyend="333"/>
        <references refid="d5/d6e/a08955_1ac98e43b350aa2e3d640e77964e7ccb49">castor::ImageLayout::sliceBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a235f1ba77928962922cd89104c5c2c05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1a5a7b41e3ac6db006ea4b7efb4de98613" kindref="member">ImageLayout::Buffer</ref></type>
        <definition>ImageLayout::Buffer castor::getSliceMipBuffer</definition>
        <argsstring>(ImageLayout const &amp;layout, PxBufferBase &amp;buffer, uint32_t index, uint32_t level)</argsstring>
        <name>getSliceMipBuffer</name>
        <qualifiedname>castor::getSliceMipBuffer</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="335" column="28" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="335" bodyend="341"/>
        <references refid="d5/d6e/a08955_1aa1a3102a42d400f710d092e8226df2aa">castor::ImageLayout::sliceMipBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a08b68d29867469f4d7710e50a4d15e47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1ac161cb8db198568600b0080fe54d5dfc" kindref="member">ImageLayout::ConstBuffer</ref></type>
        <definition>ImageLayout::ConstBuffer castor::getSliceBuffer</definition>
        <argsstring>(ImageLayout const &amp;layout, PxBufferBase const &amp;buffer, uint32_t index)</argsstring>
        <name>getSliceBuffer</name>
        <qualifiedname>castor::getSliceBuffer</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> const &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="343" column="33" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="343" bodyend="348"/>
        <references refid="d5/d6e/a08955_1ac98e43b350aa2e3d640e77964e7ccb49">castor::ImageLayout::sliceBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af0f4938b9b1da6e730471b7ebbae3b03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/d6e/a08955_1ac161cb8db198568600b0080fe54d5dfc" kindref="member">ImageLayout::ConstBuffer</ref></type>
        <definition>ImageLayout::ConstBuffer castor::getSliceMipBuffer</definition>
        <argsstring>(ImageLayout const &amp;layout, PxBufferBase const &amp;buffer, uint32_t index, uint32_t level)</argsstring>
        <name>getSliceMipBuffer</name>
        <qualifiedname>castor::getSliceMipBuffer</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> const &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="350" column="33" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="350" bodyend="356"/>
        <references refid="d5/d6e/a08955_1aa1a3102a42d400f710d092e8226df2aa">castor::ImageLayout::sliceMipBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a206c66d02d57bc2b8a1a5b0dead8d39a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::hasSliceBuffer</definition>
        <argsstring>(ImageLayout const &amp;layout, PxBufferBase const &amp;buffer, uint32_t index)</argsstring>
        <name>hasSliceBuffer</name>
        <qualifiedname>castor::hasSliceBuffer</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> const &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="358" column="13" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="358" bodyend="363"/>
        <references refid="d5/d6e/a08955_1a4c16cfe50d5dbc4b3268643df4445b9f">castor::ImageLayout::hasSliceBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6e00973fbcf52e02858f1fdcc8d16e68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::hasSliceMipBuffer</definition>
        <argsstring>(ImageLayout const &amp;layout, PxBufferBase const &amp;buffer, uint32_t index, uint32_t level)</argsstring>
        <name>hasSliceMipBuffer</name>
        <qualifiedname>castor::hasSliceMipBuffer</qualifiedname>
        <param>
          <type><ref refid="d5/d6e/a08955" kindref="compound">ImageLayout</ref> const &amp;</type>
          <declname>layout</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> const &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/ImageLayout.hpp" line="365" column="13" bodyfile="CastorUtils/Graphics/ImageLayout.hpp" bodystart="365" bodyend="371"/>
        <references refid="d5/d6e/a08955_1ae35b73740452e8cebd7de05ed0909929">castor::ImageLayout::hasSliceMipBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae80a0127476f7bb2262b5cd9a87dc3bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>FT</declname>
            <defname>FT</defname>
          </param>
          <param>
            <type>PixelFormat</type>
            <declname>FU</declname>
            <defname>FU</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(Pixel&lt; FT &gt; const &amp;lhs, Pixel&lt; FU &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; FT &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; FU &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;égalité </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les pixels à comparer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si les points ont les mêmes dimensions et les mêmes valeurs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Pixel.hpp" line="364" column="6" declfile="CastorUtils/Graphics/Pixel.hpp" declline="364" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1adc460d2e815e5a8b60db83fb84690ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>uint8_t</type>
        <definition>uint8_t castor::getX8U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getX8U</name>
        <qualifiedname>castor::getX8U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="12" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="12" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae197c6f43f1888bb887775effb0e34b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>int8_t</type>
        <definition>int8_t castor::getX8S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getX8S</name>
        <qualifiedname>castor::getX8S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="14" column="8" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="14" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1acf5c3d11e61d1555857176151a080621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>uint16_t</type>
        <definition>uint16_t castor::getX16U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getX16U</name>
        <qualifiedname>castor::getX16U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="16" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="16" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7b2745bf20fef8f2d4aebbbf650456e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>int16_t</type>
        <definition>int16_t castor::getX16S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getX16S</name>
        <qualifiedname>castor::getX16S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="18" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="18" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a80dc580529a9c29ff2b602d1752a5e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>int16_t</type>
        <definition>int16_t castor::getX16F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getX16F</name>
        <qualifiedname>castor::getX16F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="20" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="20" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a19e3a1bc7349855d46f89fd1e3110c43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t castor::getX32U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getX32U</name>
        <qualifiedname>castor::getX32U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="22" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="22" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a226b66b4c16931bf5c4dc9064f6a2e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>int32_t</type>
        <definition>int32_t castor::getX32S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getX32S</name>
        <qualifiedname>castor::getX32S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="24" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="24" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab07afa79cfeb15281cda4d48779827ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::getX32F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getX32F</name>
        <qualifiedname>castor::getX32F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="26" column="7" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="26" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa1cdfa7b0abf8feabfb95e04cc966b01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t castor::getX64U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getX64U</name>
        <qualifiedname>castor::getX64U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="28" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="28" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a06d3ae7958d8f2cc309e56522e07374f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>int64_t</type>
        <definition>int64_t castor::getX64S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getX64S</name>
        <qualifiedname>castor::getX64S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="30" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="30" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4bcf6a61b66b7b832cf2625ce33d2ba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double castor::getX64F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getX64F</name>
        <qualifiedname>castor::getX64F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="32" column="8" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="32" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab1ec245944d0756b2d7e4332e97204aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setX8U</definition>
        <argsstring>(uint8_t *buffer, uint8_t value)</argsstring>
        <name>setX8U</name>
        <qualifiedname>castor::setX8U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="35" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4a15c1ab7c690ec72694a4ec1973e122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setX8S</definition>
        <argsstring>(uint8_t *buffer, int8_t value)</argsstring>
        <name>setX8S</name>
        <qualifiedname>castor::setX8S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="37" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad9e440e08feb5ac3cfcba178eb5be185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setX16U</definition>
        <argsstring>(uint8_t *buffer, uint16_t value)</argsstring>
        <name>setX16U</name>
        <qualifiedname>castor::setX16U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="39" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="39" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a291345360abc12219a9920ec10ac62f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setX16S</definition>
        <argsstring>(uint8_t *buffer, int16_t value)</argsstring>
        <name>setX16S</name>
        <qualifiedname>castor::setX16S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="41" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a236b8675de9089018cfd337cef7876d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setX16F</definition>
        <argsstring>(uint8_t *buffer, int16_t value)</argsstring>
        <name>setX16F</name>
        <qualifiedname>castor::setX16F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="43" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afc33c45bfd5425d09c88272dba7b42c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setX32U</definition>
        <argsstring>(uint8_t *buffer, uint32_t value)</argsstring>
        <name>setX32U</name>
        <qualifiedname>castor::setX32U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="45" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4e8c343023eb9cf031bae44cb4d0d1ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setX32S</definition>
        <argsstring>(uint8_t *buffer, int32_t value)</argsstring>
        <name>setX32S</name>
        <qualifiedname>castor::setX32S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="47" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af41c44cbf2e69bc06674e369677b0c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setX32F</definition>
        <argsstring>(uint8_t *buffer, float value)</argsstring>
        <name>setX32F</name>
        <qualifiedname>castor::setX32F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="49" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a442a16a12787fd2a4be76d8c81d274b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setX64U</definition>
        <argsstring>(uint8_t *buffer, uint64_t value)</argsstring>
        <name>setX64U</name>
        <qualifiedname>castor::setX64U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="51" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afcec66dd9a403ff08b1cd234d3422080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setX64S</definition>
        <argsstring>(uint8_t *buffer, int64_t value)</argsstring>
        <name>setX64S</name>
        <qualifiedname>castor::setX64S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="53" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac43a05ee01ec2755462492d8f6312de1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
          <param>
            <type>PixelComponent</type>
            <declname>PCT</declname>
            <defname>PCT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setX64F</definition>
        <argsstring>(uint8_t *buffer, double value)</argsstring>
        <name>setX64F</name>
        <qualifiedname>castor::setX64F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="55" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2de1549a789df9de676ded829e34ba53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint8_t</type>
        <definition>uint8_t castor::getR8U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getR8U</name>
        <qualifiedname>castor::getR8U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="58" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="58" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a90c9da706e43688ca37a5b1d89e9e121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int8_t</type>
        <definition>int8_t castor::getR8S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getR8S</name>
        <qualifiedname>castor::getR8S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="60" column="8" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="60" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab6f9b66837b0faceb301916edb9135cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint16_t</type>
        <definition>uint16_t castor::getR16U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getR16U</name>
        <qualifiedname>castor::getR16U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="62" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="62" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6be9276666cdd45cee09d9ddf4cb5964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int16_t</type>
        <definition>int16_t castor::getR16S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getR16S</name>
        <qualifiedname>castor::getR16S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="64" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="64" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1129d85068cb77c95f15f5ef3d4b7ed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int16_t</type>
        <definition>int16_t castor::getR16F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getR16F</name>
        <qualifiedname>castor::getR16F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="66" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="66" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4135a73f17943b4639b85dce441ac2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t castor::getR32U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getR32U</name>
        <qualifiedname>castor::getR32U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="68" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="68" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a803a184b6bdb7351f01c4b4ab7ec7f97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int32_t</type>
        <definition>int32_t castor::getR32S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getR32S</name>
        <qualifiedname>castor::getR32S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="70" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="70" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a479d9d490ef9f128b10661172ba17aa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::getR32F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getR32F</name>
        <qualifiedname>castor::getR32F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="72" column="7" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="72" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7ac5cba729d2213c674ec625eea07e59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t castor::getR64U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getR64U</name>
        <qualifiedname>castor::getR64U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="74" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="74" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a92fe1e64a4aad0eb5cecdd4693fc2a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int64_t</type>
        <definition>int64_t castor::getR64S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getR64S</name>
        <qualifiedname>castor::getR64S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="76" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="76" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5f7ac6a03049a3aa3a5f9987e2dede96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double castor::getR64F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getR64F</name>
        <qualifiedname>castor::getR64F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="78" column="8" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="78" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab402e194b2d2a5bedc3d2d270ebf3f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint8_t</type>
        <definition>uint8_t castor::getG8U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getG8U</name>
        <qualifiedname>castor::getG8U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="81" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="81" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8476370ed33cb1624cf68e9a84f3ca67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int8_t</type>
        <definition>int8_t castor::getG8S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getG8S</name>
        <qualifiedname>castor::getG8S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="83" column="8" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="83" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab6bd4ed18be1ec5197ab7d8e8400fbbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint16_t</type>
        <definition>uint16_t castor::getG16U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getG16U</name>
        <qualifiedname>castor::getG16U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="85" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="85" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa5b3ada61944d9c2d956dee8629eb951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int16_t</type>
        <definition>int16_t castor::getG16S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getG16S</name>
        <qualifiedname>castor::getG16S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="87" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="87" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad0c17fc47b12fc6db7aa4ebba451ca43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int16_t</type>
        <definition>int16_t castor::getG16F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getG16F</name>
        <qualifiedname>castor::getG16F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="89" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="89" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a09aaff83945f96aa53b4c8d413ec2589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t castor::getG32U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getG32U</name>
        <qualifiedname>castor::getG32U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="91" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="91" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac83632b2c9ff5028ca227d88cbcc49f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int32_t</type>
        <definition>int32_t castor::getG32S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getG32S</name>
        <qualifiedname>castor::getG32S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="93" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="93" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a97ddfe899e2d183ad619c4e094671711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::getG32F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getG32F</name>
        <qualifiedname>castor::getG32F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="95" column="7" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="95" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a802563ce0c011f5be1ffcf600bafb0d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t castor::getG64U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getG64U</name>
        <qualifiedname>castor::getG64U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="97" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="97" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aff0596cff04b4d86800a37e7d5a115ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int64_t</type>
        <definition>int64_t castor::getG64S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getG64S</name>
        <qualifiedname>castor::getG64S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="99" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="99" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af107fac78562d97bedde01b01d2afa41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double castor::getG64F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getG64F</name>
        <qualifiedname>castor::getG64F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="101" column="8" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="101" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4bb971541783fc400ea3a43a337b4e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint8_t</type>
        <definition>uint8_t castor::getB8U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getB8U</name>
        <qualifiedname>castor::getB8U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="104" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="104" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2b324d30a6005fb13de69ead55fd42cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int8_t</type>
        <definition>int8_t castor::getB8S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getB8S</name>
        <qualifiedname>castor::getB8S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="106" column="8" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="106" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab6b3843a08c539df95e9a512b2affdc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint16_t</type>
        <definition>uint16_t castor::getB16U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getB16U</name>
        <qualifiedname>castor::getB16U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="108" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="108" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1acb6d5d595e76327276af54e986f0a667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int16_t</type>
        <definition>int16_t castor::getB16S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getB16S</name>
        <qualifiedname>castor::getB16S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="110" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="110" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a513eaac0088c908ef2e7924973b5d1f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int16_t</type>
        <definition>int16_t castor::getB16F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getB16F</name>
        <qualifiedname>castor::getB16F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="112" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="112" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4b9148aa4d3b12e8ff6e0721b1cf0821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t castor::getB32U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getB32U</name>
        <qualifiedname>castor::getB32U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="114" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="114" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a58cce211acdf0fc49ed92d1472b62c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int32_t</type>
        <definition>int32_t castor::getB32S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getB32S</name>
        <qualifiedname>castor::getB32S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="116" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="116" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1179828b1697058d3a726a9eeaf99247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::getB32F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getB32F</name>
        <qualifiedname>castor::getB32F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="118" column="7" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="118" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a30cc8d08021ca5f095aeb4f6b5556962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t castor::getB64U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getB64U</name>
        <qualifiedname>castor::getB64U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="120" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="120" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9ab975411dfd2077812487c72773f9a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int64_t</type>
        <definition>int64_t castor::getB64S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getB64S</name>
        <qualifiedname>castor::getB64S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="122" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="122" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab88391cb35788719427b943fa1873b81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double castor::getB64F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getB64F</name>
        <qualifiedname>castor::getB64F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="124" column="8" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="124" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a146583a3adaeab314b0d913177d6e3cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint8_t</type>
        <definition>uint8_t castor::getA8U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getA8U</name>
        <qualifiedname>castor::getA8U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="127" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="127" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3aad118ff844925e138c7eeb4aac4d6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int8_t</type>
        <definition>int8_t castor::getA8S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getA8S</name>
        <qualifiedname>castor::getA8S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="129" column="8" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="129" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a431338df39a193510716ff69a8498a95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint16_t</type>
        <definition>uint16_t castor::getA16U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getA16U</name>
        <qualifiedname>castor::getA16U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="131" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="131" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a06b4fde3abba6c127b994f2bd6a4c2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int16_t</type>
        <definition>int16_t castor::getA16S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getA16S</name>
        <qualifiedname>castor::getA16S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="133" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="133" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad6fcab75e13dec025abb0072830c1c2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int16_t</type>
        <definition>int16_t castor::getA16F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getA16F</name>
        <qualifiedname>castor::getA16F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="135" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="135" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a15d43c02d36276ec3d47eac5f577d381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t castor::getA32U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getA32U</name>
        <qualifiedname>castor::getA32U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="137" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="137" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4ed18968e76cabf42b79bfec0bebe6b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int32_t</type>
        <definition>int32_t castor::getA32S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getA32S</name>
        <qualifiedname>castor::getA32S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="139" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="139" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1abc6bf45e37aff9dc1c5c6aa15a43f5ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::getA32F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getA32F</name>
        <qualifiedname>castor::getA32F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="141" column="7" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="141" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3944289f0f12d695b0bc65acbb007ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t castor::getA64U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getA64U</name>
        <qualifiedname>castor::getA64U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="143" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="143" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae92ef5ac2db375c0fe37771425db44f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>int64_t</type>
        <definition>int64_t castor::getA64S</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getA64S</name>
        <qualifiedname>castor::getA64S</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="145" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="145" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af255c8bc01d614c35e17c0b6b28d9721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double castor::getA64F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getA64F</name>
        <qualifiedname>castor::getA64F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="147" column="8" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="147" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a00fdb9e0e9c1462ef2eaef1c67755ddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint16_t</type>
        <definition>uint16_t castor::getD16U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getD16U</name>
        <qualifiedname>castor::getD16U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="150" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="150" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af75cc2c88e6e8ec82148e4099be93c31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t castor::getD24U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getD24U</name>
        <qualifiedname>castor::getD24U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="152" column="10" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="152" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a94583462cf1c91497b29dbc02d717e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::getD32F</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getD32F</name>
        <qualifiedname>castor::getD32F</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="154" column="7" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="154" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab2c704a1860e984634d576a8b732e6fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>uint8_t</type>
        <definition>uint8_t castor::getS8U</definition>
        <argsstring>(uint8_t const *buffer)</argsstring>
        <name>getS8U</name>
        <qualifiedname>castor::getS8U</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="157" column="9" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="157" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9acb786b4b13fc146b17f37c401fd7b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setR8U</definition>
        <argsstring>(uint8_t *buffer, uint8_t value)</argsstring>
        <name>setR8U</name>
        <qualifiedname>castor::setR8U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="160" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="160" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0c83ae84560ef93749e337a9d08d1d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setR8S</definition>
        <argsstring>(uint8_t *buffer, int8_t value)</argsstring>
        <name>setR8S</name>
        <qualifiedname>castor::setR8S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="162" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="162" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aab0affaf34cbb59c5cab34dfc1a49c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setR16U</definition>
        <argsstring>(uint8_t *buffer, uint16_t value)</argsstring>
        <name>setR16U</name>
        <qualifiedname>castor::setR16U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="164" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="164" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a24a1630ffa7e2b98ebcba522626bfd59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setR16S</definition>
        <argsstring>(uint8_t *buffer, int16_t value)</argsstring>
        <name>setR16S</name>
        <qualifiedname>castor::setR16S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="166" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="166" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae993469132d369f399b2bc27f977657f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setR16F</definition>
        <argsstring>(uint8_t *buffer, int16_t value)</argsstring>
        <name>setR16F</name>
        <qualifiedname>castor::setR16F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="168" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="168" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab7a3441ca186714cfd48fe776bbfbeea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setR32S</definition>
        <argsstring>(uint8_t *buffer, uint32_t value)</argsstring>
        <name>setR32S</name>
        <qualifiedname>castor::setR32S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="170" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="170" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1add99044fdaf51b1cfeaf9cda63c47818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setR32U</definition>
        <argsstring>(uint8_t *buffer, int32_t value)</argsstring>
        <name>setR32U</name>
        <qualifiedname>castor::setR32U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="172" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="172" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a98719334f6c2206d271c601676aa7c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setR32F</definition>
        <argsstring>(uint8_t *buffer, float value)</argsstring>
        <name>setR32F</name>
        <qualifiedname>castor::setR32F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="174" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="174" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4ebec429b2a6f6bbb6e3c9b0f7230746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setR64U</definition>
        <argsstring>(uint8_t *buffer, uint64_t value)</argsstring>
        <name>setR64U</name>
        <qualifiedname>castor::setR64U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="176" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="176" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af64def885786cc7ac920ee6b4f9881ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setR64S</definition>
        <argsstring>(uint8_t *buffer, int64_t value)</argsstring>
        <name>setR64S</name>
        <qualifiedname>castor::setR64S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="178" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="178" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa634c947b7b7698276848519f6370761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setR64F</definition>
        <argsstring>(uint8_t *buffer, double value)</argsstring>
        <name>setR64F</name>
        <qualifiedname>castor::setR64F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="180" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="180" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af91bf167cd6a7eabf13a8491c5515fcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setG8U</definition>
        <argsstring>(uint8_t *buffer, uint8_t value)</argsstring>
        <name>setG8U</name>
        <qualifiedname>castor::setG8U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="183" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="183" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7c8f1351ce1844fff19450e7947f8c65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setG8S</definition>
        <argsstring>(uint8_t *buffer, int8_t value)</argsstring>
        <name>setG8S</name>
        <qualifiedname>castor::setG8S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="185" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="185" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afbbd78cc964ea7df80f0bc47e36e0b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setG16U</definition>
        <argsstring>(uint8_t *buffer, uint16_t value)</argsstring>
        <name>setG16U</name>
        <qualifiedname>castor::setG16U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="187" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="187" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1abdf3ec0a2e8694cb61ed0fc14d65c137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setG16S</definition>
        <argsstring>(uint8_t *buffer, int16_t value)</argsstring>
        <name>setG16S</name>
        <qualifiedname>castor::setG16S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="189" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="189" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a39649c86839e26de6fdbf92f7393c7ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setG16F</definition>
        <argsstring>(uint8_t *buffer, int16_t value)</argsstring>
        <name>setG16F</name>
        <qualifiedname>castor::setG16F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="191" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="191" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0a5ce6ff85bae26396d0142d49e7d158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setG32U</definition>
        <argsstring>(uint8_t *buffer, uint32_t value)</argsstring>
        <name>setG32U</name>
        <qualifiedname>castor::setG32U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="193" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="193" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a484872811751ffa69c29ee0e621d38d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setG32S</definition>
        <argsstring>(uint8_t *buffer, int32_t value)</argsstring>
        <name>setG32S</name>
        <qualifiedname>castor::setG32S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="195" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="195" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad62604a98ec3d9bfb48b1317819b6eb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setG32F</definition>
        <argsstring>(uint8_t *buffer, float value)</argsstring>
        <name>setG32F</name>
        <qualifiedname>castor::setG32F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="197" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="197" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a878a12d93a3cb034320f342d0e962898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setG64U</definition>
        <argsstring>(uint8_t *buffer, uint64_t value)</argsstring>
        <name>setG64U</name>
        <qualifiedname>castor::setG64U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="199" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="199" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a934c295182f5be37b89aa052b24ec952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setG64S</definition>
        <argsstring>(uint8_t *buffer, int64_t value)</argsstring>
        <name>setG64S</name>
        <qualifiedname>castor::setG64S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="201" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="201" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0570d92c490c1263d00553d85ae1df31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setG64F</definition>
        <argsstring>(uint8_t *buffer, double value)</argsstring>
        <name>setG64F</name>
        <qualifiedname>castor::setG64F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="203" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="203" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a101c46857e6259adf0b44eeea1c0ea0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setB8U</definition>
        <argsstring>(uint8_t *buffer, uint8_t value)</argsstring>
        <name>setB8U</name>
        <qualifiedname>castor::setB8U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="206" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="206" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a65d7c480f97c617aaa5c8903506bdd52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setB8S</definition>
        <argsstring>(uint8_t *buffer, int8_t value)</argsstring>
        <name>setB8S</name>
        <qualifiedname>castor::setB8S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="208" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="208" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a076a639e7bcae9808f3320237c796722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setB16U</definition>
        <argsstring>(uint8_t *buffer, uint16_t value)</argsstring>
        <name>setB16U</name>
        <qualifiedname>castor::setB16U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="210" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="210" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a26fed6eb9763fd90a5df7fd8dd9291be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setB16S</definition>
        <argsstring>(uint8_t *buffer, int16_t value)</argsstring>
        <name>setB16S</name>
        <qualifiedname>castor::setB16S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="212" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="212" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a149652173f760d1f64f7ebeb95407132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setB16F</definition>
        <argsstring>(uint8_t *buffer, int16_t value)</argsstring>
        <name>setB16F</name>
        <qualifiedname>castor::setB16F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="214" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="214" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a355d3b1668a4d3f1a7f7aed344073ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setB32U</definition>
        <argsstring>(uint8_t *buffer, uint32_t value)</argsstring>
        <name>setB32U</name>
        <qualifiedname>castor::setB32U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="216" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="216" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3b4db192af4850fc7dc9216c649b81a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setB32S</definition>
        <argsstring>(uint8_t *buffer, int32_t value)</argsstring>
        <name>setB32S</name>
        <qualifiedname>castor::setB32S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="218" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="218" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1adea5404d38993f7ab5d7b9b5af56f7f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setB32F</definition>
        <argsstring>(uint8_t *buffer, float value)</argsstring>
        <name>setB32F</name>
        <qualifiedname>castor::setB32F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="220" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="220" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af12403822490b2b0e83ea3beb6c0469c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setB64U</definition>
        <argsstring>(uint8_t *buffer, uint64_t value)</argsstring>
        <name>setB64U</name>
        <qualifiedname>castor::setB64U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="222" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="222" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac6ebb0cac740763f944cfcdc7458d7e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setB64S</definition>
        <argsstring>(uint8_t *buffer, int64_t value)</argsstring>
        <name>setB64S</name>
        <qualifiedname>castor::setB64S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="224" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="224" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a909fabac1f2ad3bebebac5aff3a3854d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setB64F</definition>
        <argsstring>(uint8_t *buffer, double value)</argsstring>
        <name>setB64F</name>
        <qualifiedname>castor::setB64F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="226" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="226" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3b0ec744cb03c7dfce1e9d1a9f2e70ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setA8U</definition>
        <argsstring>(uint8_t *buffer, uint8_t value)</argsstring>
        <name>setA8U</name>
        <qualifiedname>castor::setA8U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="229" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="229" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5993e8b10e700ebc3041f00a4a998e8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setA8S</definition>
        <argsstring>(uint8_t *buffer, int8_t value)</argsstring>
        <name>setA8S</name>
        <qualifiedname>castor::setA8S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="231" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="231" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae9f43dcc1622e2efc84897844319f06a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setA16U</definition>
        <argsstring>(uint8_t *buffer, uint16_t value)</argsstring>
        <name>setA16U</name>
        <qualifiedname>castor::setA16U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="233" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="233" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5ecebaddc9507e9e52e49ccefd8612da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setA16S</definition>
        <argsstring>(uint8_t *buffer, int16_t value)</argsstring>
        <name>setA16S</name>
        <qualifiedname>castor::setA16S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="235" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="235" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a34cd7895bc77da2abf5c49acc42b93a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setA16F</definition>
        <argsstring>(uint8_t *buffer, int16_t value)</argsstring>
        <name>setA16F</name>
        <qualifiedname>castor::setA16F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="237" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="237" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a49d2aa391f91a03e8387ecabfab68ea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setA32U</definition>
        <argsstring>(uint8_t *buffer, uint32_t value)</argsstring>
        <name>setA32U</name>
        <qualifiedname>castor::setA32U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="239" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="239" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa5d40472c06aeaecc08308c3d315adcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setA32S</definition>
        <argsstring>(uint8_t *buffer, int32_t value)</argsstring>
        <name>setA32S</name>
        <qualifiedname>castor::setA32S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="241" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="241" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9cb5d2058df4a475817c81535a889dbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setA32F</definition>
        <argsstring>(uint8_t *buffer, float value)</argsstring>
        <name>setA32F</name>
        <qualifiedname>castor::setA32F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="243" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="243" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac5bd460ac127491ff6f1b4ab01e75368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setA64U</definition>
        <argsstring>(uint8_t *buffer, uint64_t value)</argsstring>
        <name>setA64U</name>
        <qualifiedname>castor::setA64U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="245" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="245" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a898552a43e359d3efccfd9cdad36b2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setA64S</definition>
        <argsstring>(uint8_t *buffer, int64_t value)</argsstring>
        <name>setA64S</name>
        <qualifiedname>castor::setA64S</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="247" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="247" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a46add0ab319bb27260ebe37b6276b51b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setA64F</definition>
        <argsstring>(uint8_t *buffer, double value)</argsstring>
        <name>setA64F</name>
        <qualifiedname>castor::setA64F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="249" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="249" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af0233128ab78ea0f39839d3a658d6786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setD16U</definition>
        <argsstring>(uint8_t *buffer, uint16_t value)</argsstring>
        <name>setD16U</name>
        <qualifiedname>castor::setD16U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="252" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="252" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5025736d1eb26389e7bb3fb448b24a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setD24U</definition>
        <argsstring>(uint8_t *buffer, uint32_t value)</argsstring>
        <name>setD24U</name>
        <qualifiedname>castor::setD24U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="254" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="254" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a91e3684fd516e311d26403ce71e35494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setD32F</definition>
        <argsstring>(uint8_t *buffer, float value)</argsstring>
        <name>setD32F</name>
        <qualifiedname>castor::setD32F</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="256" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="256" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8e4b175121d70b3937b83c3a4aacdd40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PFT</declname>
            <defname>PFT</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setS8U</definition>
        <argsstring>(uint8_t *buffer, uint8_t value)</argsstring>
        <name>setS8U</name>
        <qualifiedname>castor::setS8U</qualifiedname>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="259" column="6" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="259" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a243aa4822dcb583e55cdb4518c5d2a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::getR32F</definition>
        <argsstring>(Pixel&lt; PF &gt; const &amp;pixel)</argsstring>
        <name>getR32F</name>
        <qualifiedname>castor::getR32F</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; const &amp;</type>
          <declname>pixel</declname>
        </param>
        <briefdescription>
<para>Fonction de récupération de la composante rouge d&apos;un pixel, en flottant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur de la composante </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="272" column="7" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8ca121e4041679395470884c7e461769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setR32F</definition>
        <argsstring>(Pixel&lt; PF &gt; const &amp;pixel, float value)</argsstring>
        <name>setR32F</name>
        <qualifiedname>castor::setR32F</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; const &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Fonction de définition de la composante rouge d&apos;un pixel, en flottant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur de la composante </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="287" column="6" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1abbde0692a5ab6b48f4b78d7c0170b11d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>uint8_t</type>
        <definition>uint8_t castor::getR8U</definition>
        <argsstring>(Pixel&lt; PF &gt; const &amp;pixel)</argsstring>
        <name>getR8U</name>
        <qualifiedname>castor::getR8U</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; const &amp;</type>
          <declname>pixel</declname>
        </param>
        <briefdescription>
<para>Fonction de récupération de la composante rouge d&apos;un pixel, en octet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur de la composante </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="302" column="9" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a104c22d8ca2a563f68eb4bb900b0b1e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setR8U</definition>
        <argsstring>(Pixel&lt; PF &gt; &amp;pixel, uint8_t value)</argsstring>
        <name>setR8U</name>
        <qualifiedname>castor::setR8U</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Fonction de définition de la composante rouge d&apos;un pixel, en octet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur de la composante </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="317" column="6" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="317" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a23aa17e35de06d6301d80b4e29d0f356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::getG32F</definition>
        <argsstring>(Pixel&lt; PF &gt; const &amp;pixel)</argsstring>
        <name>getG32F</name>
        <qualifiedname>castor::getG32F</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; const &amp;</type>
          <declname>pixel</declname>
        </param>
        <briefdescription>
<para>Fonction de récupération de la composante verte d&apos;un pixel, en flottant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur de la composante </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="332" column="7" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="332" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a204ff71d9feac6882cf7e6102f0ffa5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setG32F</definition>
        <argsstring>(Pixel&lt; PF &gt; &amp;pixel, float value)</argsstring>
        <name>setG32F</name>
        <qualifiedname>castor::setG32F</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Fonction de définition de la composante verte d&apos;un pixel, en flottant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur de la composante </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="347" column="6" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="347" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1acb457b6150ee2e446fae667eca2227ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>uint8_t</type>
        <definition>uint8_t castor::getG8U</definition>
        <argsstring>(Pixel&lt; PF &gt; const &amp;pixel)</argsstring>
        <name>getG8U</name>
        <qualifiedname>castor::getG8U</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; const &amp;</type>
          <declname>pixel</declname>
        </param>
        <briefdescription>
<para>Fonction de récupération de la composante verte d&apos;un pixel, en octet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur de la composante </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="362" column="9" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a461e5224780832ebe2cf3ab28646ee31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setG8U</definition>
        <argsstring>(Pixel&lt; PF &gt; &amp;pixel, uint8_t value)</argsstring>
        <name>setG8U</name>
        <qualifiedname>castor::setG8U</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Fonction de définition de la composante verte d&apos;un pixel, en octet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur de la composante </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="377" column="6" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="377" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad6e5e96db13b823e151a54153fa590ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::getB32F</definition>
        <argsstring>(Pixel&lt; PF &gt; const &amp;pixel)</argsstring>
        <name>getB32F</name>
        <qualifiedname>castor::getB32F</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; const &amp;</type>
          <declname>pixel</declname>
        </param>
        <briefdescription>
<para>Fonction de récupération de la composante bleue d&apos;un pixel, en flottant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur de la composante </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="392" column="7" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="392" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2c5775c0bca2a1dcf9abbe8e20be02b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setB32F</definition>
        <argsstring>(Pixel&lt; PF &gt; &amp;pixel, float value)</argsstring>
        <name>setB32F</name>
        <qualifiedname>castor::setB32F</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Fonction de définition de la composante bleue d&apos;un pixel, en flottant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur de la composante </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="407" column="6" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="407" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a72f408d99a5b893a362e956e28132785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>uint8_t</type>
        <definition>uint8_t castor::getB8U</definition>
        <argsstring>(Pixel&lt; PF &gt; const &amp;pixel)</argsstring>
        <name>getB8U</name>
        <qualifiedname>castor::getB8U</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; const &amp;</type>
          <declname>pixel</declname>
        </param>
        <briefdescription>
<para>Fonction de récupération de la composante bleue d&apos;un pixel, en octet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur de la composante </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="422" column="9" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab412c10ae225c17bfdec41a1c3fb72ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setB8U</definition>
        <argsstring>(Pixel&lt; PF &gt; &amp;pixel, uint8_t value)</argsstring>
        <name>setB8U</name>
        <qualifiedname>castor::setB8U</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Fonction de définition de la composante bleue d&apos;un pixel, en octet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur de la composante </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="437" column="6" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="437" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a005a9ca53f8299d53e5cdd0ee957f702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::getA32F</definition>
        <argsstring>(Pixel&lt; PF &gt; const &amp;pixel)</argsstring>
        <name>getA32F</name>
        <qualifiedname>castor::getA32F</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; const &amp;</type>
          <declname>pixel</declname>
        </param>
        <briefdescription>
<para>Fonction de récupération de la composante alpha d&apos;un pixel, en flottant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur de la composante </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="452" column="7" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a533c4505671cf84eb8e5b66a51f60584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setA32F</definition>
        <argsstring>(Pixel&lt; PF &gt; &amp;pixel, float value)</argsstring>
        <name>setA32F</name>
        <qualifiedname>castor::setA32F</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Fonction de définition de la composante alpha d&apos;un pixel, en flottant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur de la composante </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="467" column="6" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="467" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae4995ba8a2539570dbfda422985a706e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>uint8_t</type>
        <definition>uint8_t castor::getA8U</definition>
        <argsstring>(Pixel&lt; PF &gt; const &amp;pixel)</argsstring>
        <name>getA8U</name>
        <qualifiedname>castor::getA8U</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; const &amp;</type>
          <declname>pixel</declname>
        </param>
        <briefdescription>
<para>Fonction de récupération de la composante alpha d&apos;un pixel, en octet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur de la composante </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="482" column="9" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="482" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6b276c2af003928a1c05044eb41904ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setA8U</definition>
        <argsstring>(Pixel&lt; PF &gt; &amp;pixel, uint8_t value)</argsstring>
        <name>setA8U</name>
        <qualifiedname>castor::setA8U</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Fonction de définition de la composante alpha d&apos;un pixel, en octet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur de la composante </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="497" column="6" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="497" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad4295a9cedee02311e16e5f030152dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>float</type>
        <definition>float castor::getD32F</definition>
        <argsstring>(Pixel&lt; PF &gt; const &amp;pixel)</argsstring>
        <name>getD32F</name>
        <qualifiedname>castor::getD32F</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; const &amp;</type>
          <declname>pixel</declname>
        </param>
        <briefdescription>
<para>Fonction de récupération de la composante profondeur d&apos;un pixel, en flottant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur de la composante </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="512" column="7" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="512" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1900dc093a80d7e5ffff84762f78ffcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setD32F</definition>
        <argsstring>(Pixel&lt; PF &gt; &amp;pixel, float value)</argsstring>
        <name>setD32F</name>
        <qualifiedname>castor::setD32F</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Fonction de définition de la composante profondeur d&apos;un pixel, en flottant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur de la composante </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="527" column="6" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="527" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a77fa58b6f9779e1a9477f05b6c33adee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>uint16_t</type>
        <definition>uint16_t castor::getD16U</definition>
        <argsstring>(Pixel&lt; PF &gt; const &amp;pixel)</argsstring>
        <name>getD16U</name>
        <qualifiedname>castor::getD16U</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; const &amp;</type>
          <declname>pixel</declname>
        </param>
        <briefdescription>
<para>Fonction de récupération de la composante profondeur d&apos;un pixel, en uint16_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur de la composante </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="542" column="10" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="542" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab610ef923325f15381e714e24cd77b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setD16U</definition>
        <argsstring>(Pixel&lt; PF &gt; &amp;pixel, uint16_t value)</argsstring>
        <name>setD16U</name>
        <qualifiedname>castor::setD16U</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Fonction de définition de la composante profondeur d&apos;un pixel, en uint16_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur de la composante </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="557" column="6" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="557" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4c4f5464cf51ef77a621e46402cdd3a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t castor::getD24U</definition>
        <argsstring>(Pixel&lt; PF &gt; const &amp;pixel)</argsstring>
        <name>getD24U</name>
        <qualifiedname>castor::getD24U</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; const &amp;</type>
          <declname>pixel</declname>
        </param>
        <briefdescription>
<para>Fonction de récupération de la composante profondeur d&apos;un pixel, en uint32_t, avec 24 bits utiles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur de la composante </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="572" column="10" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="572" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a237dfc3b2d8fd27a3c4cb889c37aeea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setD24U</definition>
        <argsstring>(Pixel&lt; PF &gt; &amp;pixel, uint32_t value)</argsstring>
        <name>setD24U</name>
        <qualifiedname>castor::setD24U</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Fonction de définition de la composante profondeur d&apos;un pixel, en uint32_t, avec 24 bits utiles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur de la composante </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="587" column="6" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="587" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6f64e0caaf356666dc069f49f6bd7bf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>uint8_t</type>
        <definition>uint8_t castor::getS8U</definition>
        <argsstring>(Pixel&lt; PF &gt; const &amp;pixel)</argsstring>
        <name>getS8U</name>
        <qualifiedname>castor::getS8U</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; const &amp;</type>
          <declname>pixel</declname>
        </param>
        <briefdescription>
<para>Fonction de récupération de la composante stencil d&apos;un pixel, en octet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La valeur de la composante </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="602" column="9" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="602" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a91e6b71a3ed1e06c462a44b343991c36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor::setS8U</definition>
        <argsstring>(Pixel&lt; PF &gt; &amp;pixel, uint8_t value)</argsstring>
        <name>setS8U</name>
        <qualifiedname>castor::setS8U</qualifiedname>
        <param>
          <type><ref refid="d6/d41/a08799" kindref="compound">Pixel</ref>&lt; PF &gt; &amp;</type>
          <declname>pixel</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Fonction de définition de la composante stencil d&apos;un pixel, en octet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur de la composante </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="617" column="6" bodyfile="CastorUtils/Graphics/PixelComponents.hpp" bodystart="617" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aba7672b824230a29b3ed77472001528f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1a360ca5dee8612df6f8f5447ba8e6651a" kindref="member">PixelComponents</ref></type>
        <definition>PixelComponents castor::getPixelComponents</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>getPixelComponents</name>
        <qualifiedname>castor::getPixelComponents</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelComponents.hpp" line="622" column="17" declfile="CastorUtils/Graphics/PixelComponents.hpp" declline="622" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6c94774c0043de970ac768764604e566" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d4/d1d/a08807" kindref="compound">ConstPixelIterator</ref>&lt; PF &gt;</type>
        <definition>ConstPixelIterator&lt; PF &gt; castor::operator+</definition>
        <argsstring>(ConstPixelIterator&lt; PF &gt; const &amp;it, size_t offset)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d4/d1d/a08807" kindref="compound">ConstPixelIterator</ref>&lt; PF &gt; const &amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelConstIterator.hpp" line="172" column="27" bodyfile="CastorUtils/Graphics/PixelConstIterator.hpp" bodystart="172" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a752d0ff307e5c5742b160c15fe6ec87b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d4/d1d/a08807" kindref="compound">ConstPixelIterator</ref>&lt; PF &gt;</type>
        <definition>ConstPixelIterator&lt; PF &gt; castor::operator-</definition>
        <argsstring>(ConstPixelIterator&lt; PF &gt; const &amp;it, size_t offset)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d4/d1d/a08807" kindref="compound">ConstPixelIterator</ref>&lt; PF &gt; const &amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelConstIterator.hpp" line="181" column="27" bodyfile="CastorUtils/Graphics/PixelConstIterator.hpp" bodystart="181" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac51a4af62392acc5fab5159df6023435" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d4/d1d/a08807" kindref="compound">ConstPixelIterator</ref>&lt; PF &gt;::difference_type</type>
        <definition>ConstPixelIterator&lt; PF &gt;::difference_type castor::operator-</definition>
        <argsstring>(ConstPixelIterator&lt; PF &gt; const &amp;lhs, ConstPixelIterator&lt; PF &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d4/d1d/a08807" kindref="compound">ConstPixelIterator</ref>&lt; PF &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/d1d/a08807" kindref="compound">ConstPixelIterator</ref>&lt; PF &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelConstIterator.hpp" line="190" column="54" bodyfile="CastorUtils/Graphics/PixelConstIterator.hpp" bodystart="190" bodyend="194"/>
        <references refid="d4/d1d/a08807_1adc948465aee9c5bb3411a9bb73391e20" compoundref="d4/d2e/a02051" startline="134" endline="139">castor::ConstPixelIterator&lt; PF &gt;::diffIt</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae35d5ca408dadca17209ec36f58f0a87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d4/d1d/a08807" kindref="compound">ConstPixelIterator</ref>&lt; PF &gt;::difference_type</type>
        <definition>ConstPixelIterator&lt; PF &gt;::difference_type castor::operator-</definition>
        <argsstring>(PixelIterator&lt; PF &gt; const &amp;lhs, ConstPixelIterator&lt; PF &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d3/d1a/a08811" kindref="compound">PixelIterator</ref>&lt; PF &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/d1d/a08807" kindref="compound">ConstPixelIterator</ref>&lt; PF &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelConstIterator.hpp" line="197" column="54" bodyfile="CastorUtils/Graphics/PixelConstIterator.hpp" bodystart="197" bodyend="201"/>
        <references refid="d4/d1d/a08807_1adc948465aee9c5bb3411a9bb73391e20" compoundref="d4/d2e/a02051" startline="134" endline="139">castor::ConstPixelIterator&lt; PF &gt;::diffIt</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a949c2d4340314a117c2d84185fa278b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d4/d1d/a08807" kindref="compound">ConstPixelIterator</ref>&lt; PF &gt;::difference_type</type>
        <definition>ConstPixelIterator&lt; PF &gt;::difference_type castor::operator-</definition>
        <argsstring>(ConstPixelIterator&lt; PF &gt; const &amp;lhs, PixelIterator&lt; PF &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d4/d1d/a08807" kindref="compound">ConstPixelIterator</ref>&lt; PF &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d3/d1a/a08811" kindref="compound">PixelIterator</ref>&lt; PF &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelConstIterator.hpp" line="204" column="54" bodyfile="CastorUtils/Graphics/PixelConstIterator.hpp" bodystart="204" bodyend="208"/>
        <references refid="d4/d1d/a08807_1adc948465aee9c5bb3411a9bb73391e20" compoundref="d4/d2e/a02051" startline="134" endline="139">castor::ConstPixelIterator&lt; PF &gt;::diffIt</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a93aeb29db63b11f24c557773eeef3a21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::decompressBC1Block</definition>
        <argsstring>(uint8_t const *bitstring, uint8_t *pixelBuffer)</argsstring>
        <name>decompressBC1Block</name>
        <qualifiedname>castor::decompressBC1Block</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>bitstring</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>pixelBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelDefinitions.hpp" line="20" column="6" declfile="CastorUtils/Graphics/PixelDefinitions.hpp" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3cf62c77f88fe890a725dfd75f23d054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::decompressBC3Block</definition>
        <argsstring>(uint8_t const *bitstring, uint8_t *pixelBuffer)</argsstring>
        <name>decompressBC3Block</name>
        <qualifiedname>castor::decompressBC3Block</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>bitstring</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>pixelBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelDefinitions.hpp" line="22" column="6" declfile="CastorUtils/Graphics/PixelDefinitions.hpp" declline="22" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5f6b0eac6a43f1c6f0f922b05e9ebef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool castor::decompressBC5Block</definition>
        <argsstring>(uint8_t const *bitstring, uint8_t *pixelBuffer)</argsstring>
        <name>decompressBC5Block</name>
        <qualifiedname>castor::decompressBC5Block</qualifiedname>
        <param>
          <type>uint8_t const *</type>
          <declname>bitstring</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>pixelBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelDefinitions.hpp" line="24" column="6" declfile="CastorUtils/Graphics/PixelDefinitions.hpp" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9cc308126f25c5592e9678ea18f440eb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr VkDeviceSize</type>
        <definition>constexpr VkDeviceSize castor::getBytesPerPixel</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>getBytesPerPixel</name>
        <qualifiedname>castor::getBytesPerPixel</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Fonction de récuperation de la taille d&apos;un pixel sans templates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de pixels </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelDefinitions.hpp" line="34" column="24" bodyfile="CastorUtils/Graphics/PixelDefinitions.hpp" bodystart="34" bodyend="37"/>
        <referencedby refid="d7/d16/a09479_1aece0aa64744fbe074707f2028c022a95" compoundref="d6/dd2/a02243" startline="27" endline="54">castor::WhiteNoise::generate</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3283ae824c2ab614090e09ee0db4cd05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>CU_API String castor::getFormatName</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>getFormatName</name>
        <qualifiedname>castor::getFormatName</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Fonction de récuperation du nom d&apos;un format de pixel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de pixels </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelDefinitions.hpp" line="46" column="15" declfile="CastorUtils/Graphics/PixelDefinitions.hpp" declline="46" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae7398268c4dffb3e11e5e8c371919227" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t castor::getComponentsCount</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>getComponentsCount</name>
        <qualifiedname>castor::getComponentsCount</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Fonction de récuperation du nombre de composantes d&apos;un format de pixel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de pixels </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="31" column="19" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="31" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a74b08a57ecc87a3f6beeb0973da69f7d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::hasAlpha</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>hasAlpha</name>
        <qualifiedname>castor::hasAlpha</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>false</computeroutput> si le format est depth, stencil ou un format sans alpha. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="38" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="38" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a10756d64258ee72c735f46017e69bb61" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::hasComponent</definition>
        <argsstring>(PixelFormat format, PixelComponent component)</argsstring>
        <name>hasComponent</name>
        <qualifiedname>castor::hasComponent</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a3149a2f8a5237c82d3d286078e9e6e44" kindref="member">PixelComponent</ref></type>
          <declname>component</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de pixels. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">component</parametername>
</parameternamelist>
<parameterdescription>
<para>La composante de pixels. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si le format de pixel donné contient la composante de pixel voulue. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="49" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="49" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aab71d30a8508f466d5e312c71759ee44" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
        <definition>constexpr PixelFormat castor::getSingleComponent</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>getSingleComponent</name>
        <qualifiedname>castor::getSingleComponent</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Le format à composante unique correspondant au format donné. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="57" column="23" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="57" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a142106476a65340f2688872d87a506bd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isInt8</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>isInt8</name>
        <qualifiedname>castor::isInt8</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> si le format donné est un format en int8. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="64" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="64" declcolumn="16"/>
        <referencedby refid="d2/dd2/a02279_1a736e3a2ed3980b9c98676dc9eae9c6b4" compoundref="d2/dea/a02057" startline="65" endline="68">isInt8</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a736e3a2ed3980b9c98676dc9eae9c6b4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isInt8</definition>
        <argsstring>(VkFormat format)</argsstring>
        <name>isInt8</name>
        <qualifiedname>castor::isInt8</qualifiedname>
        <param>
          <type>VkFormat</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="65" column="16" bodyfile="CastorUtils/Graphics/PixelFormat.hpp" bodystart="65" bodyend="68"/>
        <references refid="d2/dd2/a02279_1a142106476a65340f2688872d87a506bd">isInt8</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0abbf6c55bb33b0bf8b4a97ca3a52a63" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isInt16</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>isInt16</name>
        <qualifiedname>castor::isInt16</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> si le format donné est un format en int16. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="75" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="75" declcolumn="16"/>
        <referencedby refid="d2/dd2/a02279_1a757a09454c89a8aa307000bcd2dfbc92" compoundref="d2/dea/a02057" startline="76" endline="79">isInt16</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a757a09454c89a8aa307000bcd2dfbc92" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isInt16</definition>
        <argsstring>(VkFormat format)</argsstring>
        <name>isInt16</name>
        <qualifiedname>castor::isInt16</qualifiedname>
        <param>
          <type>VkFormat</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="76" column="16" bodyfile="CastorUtils/Graphics/PixelFormat.hpp" bodystart="76" bodyend="79"/>
        <references refid="d2/dd2/a02279_1a0abbf6c55bb33b0bf8b4a97ca3a52a63">isInt16</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4a75718b1fd63bbc5448286394d9bd12" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isInt32</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>isInt32</name>
        <qualifiedname>castor::isInt32</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> si le format donné est un format en int32. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="86" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="86" declcolumn="16"/>
        <referencedby refid="d2/dd2/a02279_1abfc42bbb68e4f5cdfe89ba39434a0a15" compoundref="d2/dea/a02057" startline="87" endline="90">isInt32</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1abfc42bbb68e4f5cdfe89ba39434a0a15" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isInt32</definition>
        <argsstring>(VkFormat format)</argsstring>
        <name>isInt32</name>
        <qualifiedname>castor::isInt32</qualifiedname>
        <param>
          <type>VkFormat</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="87" column="16" bodyfile="CastorUtils/Graphics/PixelFormat.hpp" bodystart="87" bodyend="90"/>
        <references refid="d2/dd2/a02279_1a4a75718b1fd63bbc5448286394d9bd12">isInt32</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a66a7ea06450a01b1391545b343872642" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isFloatingPoint</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>isFloatingPoint</name>
        <qualifiedname>castor::isFloatingPoint</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> si le format donné est un format en nombres flottants. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="97" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="97" declcolumn="16"/>
        <referencedby refid="d2/dd2/a02279_1a05759304cdb13f3a3839a1bcd656697d" compoundref="d2/dea/a02057" startline="98" endline="101">isFloatingPoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a05759304cdb13f3a3839a1bcd656697d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isFloatingPoint</definition>
        <argsstring>(VkFormat format)</argsstring>
        <name>isFloatingPoint</name>
        <qualifiedname>castor::isFloatingPoint</qualifiedname>
        <param>
          <type>VkFormat</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="98" column="16" bodyfile="CastorUtils/Graphics/PixelFormat.hpp" bodystart="98" bodyend="101"/>
        <references refid="d2/dd2/a02279_1a66a7ea06450a01b1391545b343872642">isFloatingPoint</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a991c0eceeb4418a8c37a98f04af8623b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isCompressed</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>isCompressed</name>
        <qualifiedname>castor::isCompressed</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>true</computeroutput> si le format donné est un format compressé. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="108" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="108" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8411515a2211eefab974badff39c8a95" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isSRGBFormat</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>isSRGBFormat</name>
        <qualifiedname>castor::isSRGBFormat</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Dit si le format donné est un format SRGB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de pixels </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="117" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="117" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aaf9229eac29a7e803b505bb5611c7b0e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isRGFormat</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>isRGFormat</name>
        <qualifiedname>castor::isRGFormat</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>false</computeroutput> si le format est en RG. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="124" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="124" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a68b40de3160990c2080582181512eb90" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isRGBFormat</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>isRGBFormat</name>
        <qualifiedname>castor::isRGBFormat</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>false</computeroutput> si le format est en RGB. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="131" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="131" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab5a5151e239c2b54ca71f0f9f980c0ee" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isBGRFormat</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>isBGRFormat</name>
        <qualifiedname>castor::isBGRFormat</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>false</computeroutput> si le format est en BGR. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="138" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="138" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a92a0b5b98761e4c9b53affae32c3938d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isRGBAFormat</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>isRGBAFormat</name>
        <qualifiedname>castor::isRGBAFormat</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>false</computeroutput> si le format est en RGBA. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="145" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="145" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a81c862884fb584fdaf82294c89c1e674" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isARGBFormat</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>isARGBFormat</name>
        <qualifiedname>castor::isARGBFormat</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>false</computeroutput> si le format est en ARGB. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="152" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="152" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af4fb9a5c0e531b5cb35817cd9a6be78d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isBGRAFormat</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>isBGRAFormat</name>
        <qualifiedname>castor::isBGRAFormat</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>false</computeroutput> si le format est en BGRA. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="159" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="159" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9505d06d5019c49a3c28b8ef46752504" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isABGRFormat</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>isABGRFormat</name>
        <qualifiedname>castor::isABGRFormat</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>false</computeroutput> si le format est en ABGR. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="166" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="166" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a372d5d23d5ca3ac4c3c9e6379e1970de" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
        <definition>constexpr PixelFormat castor::getSRGBFormat</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>getSRGBFormat</name>
        <qualifiedname>castor::getSRGBFormat</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Le format SRGB correspondant à <computeroutput>format</computeroutput>, <computeroutput>format</computeroutput> si non trouvé. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="173" column="23" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="173" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7ef9c6504e86bb32aea1c9d7ac47c49f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
        <definition>constexpr PixelFormat castor::getNonSRGBFormat</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>getNonSRGBFormat</name>
        <qualifiedname>castor::getNonSRGBFormat</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Le format non SRGB correspondant à <computeroutput>format</computeroutput>, <computeroutput>format</computeroutput> si non trouvé. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="180" column="23" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="180" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a254479e2ac373dd2d7a9a3f6e3b467fa" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool castor::isDepthOrStencilFormat</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>isDepthOrStencilFormat</name>
        <qualifiedname>castor::isDepthOrStencilFormat</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><computeroutput>false</computeroutput> si le format est un format depth et/ou stencil. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="187" column="16" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="187" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa0eec3c9e6277d73d2371c99f32e7da0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
        <definition>constexpr PixelFormat castor::getPFWithoutAlpha</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>getPFWithoutAlpha</name>
        <qualifiedname>castor::getPFWithoutAlpha</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Récupère le format de pixel sans alpha le plus proche de celui donné </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le format de pixels donné si non trouvé </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="198" column="23" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="198" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae8fe6ca5c977ca7b27504b384c2be207" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
        <definition>constexpr PixelFormat castor::getPFWithAlpha</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>getPFWithAlpha</name>
        <qualifiedname>castor::getPFWithAlpha</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
<para>Récupère le format de pixel avec alpha le plus proche de celui donné </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de pixel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le format de pixels donné si non trouvé </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="209" column="23" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="209" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a31510815657e9170e53695163c3f2e03" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t castor::getComponentIndex</definition>
        <argsstring>(PixelComponent component)</argsstring>
        <name>getComponentIndex</name>
        <qualifiedname>castor::getComponentIndex</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a3149a2f8a5237c82d3d286078e9e6e44" kindref="member">PixelComponent</ref></type>
          <declname>component</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>L&apos;index correspondant au PixelComponent donné. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="216" column="20" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="216" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a000d32ef80ccbf372bd51573d48c2da4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t castor::getComponentIndex</definition>
        <argsstring>(PixelComponent component, PixelFormat format)</argsstring>
        <name>getComponentIndex</name>
        <qualifiedname>castor::getComponentIndex</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a3149a2f8a5237c82d3d286078e9e6e44" kindref="member">PixelComponent</ref></type>
          <declname>component</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>L&apos;index correspondant au PixelComponent et au PixelFormat donnés. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="223" column="20" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="223" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1aeceb8b40f0d6d94fa687c790297f6b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="d2/dd2/a02279_1a3149a2f8a5237c82d3d286078e9e6e44" kindref="member">PixelComponent</ref></type>
        <definition>constexpr PixelComponent castor::getIndexComponent</definition>
        <argsstring>(uint32_t index, PixelFormat format)</argsstring>
        <name>getIndexComponent</name>
        <qualifiedname>castor::getIndexComponent</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Le PixelComponent correspondant à l&apos;index et au PixelFormat donnés. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="231" column="26" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="231" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a62411b2e2f56e8df3efb1aab3a9d72e3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr <ref refid="d2/dd2/a02279_1a360ca5dee8612df6f8f5447ba8e6651a" kindref="member">PixelComponents</ref></type>
        <definition>constexpr PixelComponents castor::getComponents</definition>
        <argsstring>(PixelFormat format)</argsstring>
        <name>getComponents</name>
        <qualifiedname>castor::getComponents</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Le PixelComponents correspondant au PixelFormat donné. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="239" column="27" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="239" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a13c33baf1d804b1104fba79fb4028864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
        <definition>CU_API PixelFormat castor::getFormatByName</definition>
        <argsstring>(StringView formatName)</argsstring>
        <name>getFormatByName</name>
        <qualifiedname>castor::getFormatByName</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a7fc5aca9eb8d35e69abfe9df07e365e3" kindref="member">StringView</ref></type>
          <declname>formatName</declname>
        </param>
        <briefdescription>
<para>Fonction de récuperation d&apos;un format de pixel par son nom. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">formatName</parametername>
</parameternamelist>
<parameterdescription>
<para>Le nom du format de pixels </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="249" column="20" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="249" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a10d4ece63337492ff2696a137ddc6289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
        <definition>CU_API PixelFormat castor::getPixelFormat</definition>
        <argsstring>(PixelFormat format, PixelComponents components)</argsstring>
        <name>getPixelFormat</name>
        <qualifiedname>castor::getPixelFormat</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a360ca5dee8612df6f8f5447ba8e6651a" kindref="member">PixelComponents</ref></type>
          <declname>components</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Le format correspondant au format de pixel et aux composantes donnés. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="256" column="20" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="256" declcolumn="20"/>
        <referencedby refid="d6/d3e/a08939_1a2400872daee7da8743aee1a2bdc92d5f" compoundref="d8/db2/a11726" startline="224" endline="233">castor::Image::setPixel</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a42176b2179597d8c9d283d157989c3b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::convertPixel</definition>
        <argsstring>(PixelFormat srcFormat, uint8_t const *&amp;src, PixelFormat dstFormat, uint8_t *&amp;dst)</argsstring>
        <name>convertPixel</name>
        <qualifiedname>castor::convertPixel</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>srcFormat</declname>
        </param>
        <param>
          <type>uint8_t const *&amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>dstFormat</declname>
        </param>
        <param>
          <type>uint8_t *&amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Fonction de conversion sans templates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">srcFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de la source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de la destination </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pixel destination </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="271" column="13" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="271" declcolumn="13"/>
        <referencedby refid="d6/d3e/a08939_1a2400872daee7da8743aee1a2bdc92d5f" compoundref="d8/db2/a11726" startline="224" endline="233">castor::Image::setPixel</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aca1fd11a29f325834e77ea1c01379867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::convertBuffer</definition>
        <argsstring>(Size const &amp;srcDimensions, Size const &amp;dstDimensions, PixelFormat srcFormat, uint8_t const *srcBuffer, uint32_t srcSize, PixelFormat dstFormat, uint8_t *dstBuffer, uint32_t dstSize)</argsstring>
        <name>convertBuffer</name>
        <qualifiedname>castor::convertBuffer</qualifiedname>
        <param>
          <type><ref refid="d4/dd6/a09023" kindref="compound">Size</ref> const &amp;</type>
          <declname>srcDimensions</declname>
        </param>
        <param>
          <type><ref refid="d4/dd6/a09023" kindref="compound">Size</ref> const &amp;</type>
          <declname>dstDimensions</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>srcFormat</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>srcBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcSize</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>dstFormat</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>dstBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dstSize</declname>
        </param>
        <briefdescription>
<para>Fonction de conversion sans templates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">srcDimensions</parametername>
</parameternamelist>
<parameterdescription>
<para>Les dimensions de la source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstDimensions</parametername>
</parameternamelist>
<parameterdescription>
<para>Les dimensions de la destination (utilisé uniquement lors d&apos;une compression par blocs). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de la source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Le buffer source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcSize</parametername>
</parameternamelist>
<parameterdescription>
<para>La taille de la source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de la destination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Le buffer destination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstSize</parametername>
</parameternamelist>
<parameterdescription>
<para>La taille de la destination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="297" column="13" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="297" declcolumn="13"/>
        <referencedby refid="d2/dd2/a02279_1a487fd300c0155f962bd66494f1d030e8" compoundref="d2/dea/a02057" startline="325" endline="341">convertBuffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a487fd300c0155f962bd66494f1d030e8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void castor::convertBuffer</definition>
        <argsstring>(Size const &amp;dimensions, PixelFormat srcFormat, uint8_t const *srcBuffer, uint32_t srcSize, PixelFormat dstFormat, uint8_t *dstBuffer, uint32_t dstSize)</argsstring>
        <name>convertBuffer</name>
        <qualifiedname>castor::convertBuffer</qualifiedname>
        <param>
          <type><ref refid="d4/dd6/a09023" kindref="compound">Size</ref> const &amp;</type>
          <declname>dimensions</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>srcFormat</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>srcBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcSize</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>dstFormat</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>dstBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dstSize</declname>
        </param>
        <briefdescription>
<para>Fonction de conversion sans templates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dimensions</parametername>
</parameternamelist>
<parameterdescription>
<para>Les dimensions de la source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de la source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Le buffer source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcSize</parametername>
</parameternamelist>
<parameterdescription>
<para>La taille de la source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de la destination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Le buffer destination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstSize</parametername>
</parameternamelist>
<parameterdescription>
<para>La taille de la destination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="325" column="20" bodyfile="CastorUtils/Graphics/PixelFormat.hpp" bodystart="325" bodyend="341"/>
        <references refid="d2/dd2/a02279_1aca1fd11a29f325834e77ea1c01379867">convertBuffer</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aeefe675a082f1865fb7ac7862023a061" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::compressBuffer</definition>
        <argsstring>(PxBufferConvertOptions const *options, std::atomic_bool const *interrupt, Size const &amp;srcDimensions, Size const &amp;dstDimensions, PixelFormat srcFormat, uint8_t const *srcBuffer, uint32_t srcSize, PixelFormat dstFormat, uint8_t *dstBuffer, uint32_t dstSize)</argsstring>
        <name>compressBuffer</name>
        <qualifiedname>castor::compressBuffer</qualifiedname>
        <param>
          <type><ref refid="d4/d51/a08983" kindref="compound">PxBufferConvertOptions</ref> const *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::atomic_bool const *</type>
          <declname>interrupt</declname>
        </param>
        <param>
          <type><ref refid="d4/dd6/a09023" kindref="compound">Size</ref> const &amp;</type>
          <declname>srcDimensions</declname>
        </param>
        <param>
          <type><ref refid="d4/dd6/a09023" kindref="compound">Size</ref> const &amp;</type>
          <declname>dstDimensions</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>srcFormat</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>srcBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>srcSize</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7ddacfc1253b707a0048b8425b0f055" kindref="member">PixelFormat</ref></type>
          <declname>dstFormat</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>dstBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dstSize</declname>
        </param>
        <briefdescription>
<para>Fonction de conversion sans templates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>Les options de conversion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">interrupt</parametername>
</parameternamelist>
<parameterdescription>
<para>Dit si la conversion est à interrompre. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcDimensions</parametername>
</parameternamelist>
<parameterdescription>
<para>Les dimensions de la source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstDimensions</parametername>
</parameternamelist>
<parameterdescription>
<para>Les dimensions de la destination (utilisé uniquement lors d&apos;une compression par blocs). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de la source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Le buffer source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcSize</parametername>
</parameternamelist>
<parameterdescription>
<para>La taille de la source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>Le format de la destination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Le buffer destination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstSize</parametername>
</parameternamelist>
<parameterdescription>
<para>La taille de la destination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="368" column="13" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="368" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8a858951e6ee2d7a21dcbece7882dd3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> PxBufferBaseUPtr</type>
        <definition>CU_API PxBufferBaseUPtr castor::decompressBuffer</definition>
        <argsstring>(PxBufferBase const &amp;src)</argsstring>
        <name>decompressBuffer</name>
        <qualifiedname>castor::decompressBuffer</qualifiedname>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Décompresse le tampopn de pixels donné. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Le tampon de pixels compressé. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le tampon de pixels décompressé. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="388" column="25" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="388" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afd4560a861b12df6335519b402c9a656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> PxBufferBaseUPtr</type>
        <definition>CU_API PxBufferBaseUPtr castor::extractComponent</definition>
        <argsstring>(PxBufferBaseRPtr src, PixelComponent component)</argsstring>
        <name>extractComponent</name>
        <qualifiedname>castor::extractComponent</qualifiedname>
        <param>
          <type>PxBufferBaseRPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a3149a2f8a5237c82d3d286078e9e6e44" kindref="member">PixelComponent</ref></type>
          <declname>component</declname>
        </param>
        <briefdescription>
<para>Extrait les valeurs d&apos;une composante de pixel d&apos;un tampon source pour les mettre dans un tampon à part. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Le tampon source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">component</parametername>
</parameternamelist>
<parameterdescription>
<para>La composante à extraire </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le tampon contenant la composante extraite, au format castor::PixelFormat::eR8, <computeroutput>nullptr</computeroutput> si la source n&apos;avait pas la coposante voulue. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="401" column="25" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="401" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5122d61f3237cf31003cf324eda62f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> PxBufferBaseUPtr</type>
        <definition>CU_API PxBufferBaseUPtr castor::extractComponents</definition>
        <argsstring>(PxBufferBaseRPtr src, PixelComponents component)</argsstring>
        <name>extractComponents</name>
        <qualifiedname>castor::extractComponents</qualifiedname>
        <param>
          <type>PxBufferBaseRPtr</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a360ca5dee8612df6f8f5447ba8e6651a" kindref="member">PixelComponents</ref></type>
          <declname>component</declname>
        </param>
        <briefdescription>
<para>Extrait les valeurs d&apos;une composante de pixel d&apos;un tampon source pour les mettre dans un tampon à part. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Le tampon source </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">component</parametername>
</parameternamelist>
<parameterdescription>
<para>La composante à extraire </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le tampon contenant la composante extraite, au format castor::PixelFormat::eR8, <computeroutput>nullptr</computeroutput> si la source n&apos;avait pas la coposante voulue. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="415" column="25" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="415" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1adb7dba382787ad96c5ad83fa9c18d5cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::copyBufferComponents</definition>
        <argsstring>(PixelComponents srcComponents, PixelComponents dstComponents, PxBufferBase const &amp;srcBuffer, PxBufferBase &amp;dstBuffer)</argsstring>
        <name>copyBufferComponents</name>
        <qualifiedname>castor::copyBufferComponents</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a360ca5dee8612df6f8f5447ba8e6651a" kindref="member">PixelComponents</ref></type>
          <declname>srcComponents</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a360ca5dee8612df6f8f5447ba8e6651a" kindref="member">PixelComponents</ref></type>
          <declname>dstComponents</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> const &amp;</type>
          <declname>srcBuffer</declname>
        </param>
        <param>
          <type><ref refid="dd/df9/a08987" kindref="compound">PxBufferBase</ref> &amp;</type>
          <declname>dstBuffer</declname>
        </param>
        <briefdescription>
<para>Copie des composantes de pixel d&apos;un buffer source vers des composantes de pixel d&apos;un buffer destination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">srcComponents</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à lire depuis le buffer source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstComponents</parametername>
</parameternamelist>
<parameterdescription>
<para>Les composantes à écrire dans le buffer destination. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Le buffer source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">dstBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Le buffer destination. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelFormat.hpp" line="431" column="13" declfile="CastorUtils/Graphics/PixelFormat.hpp" declline="431" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a046541f454df1313e5c8415d5dc5859d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d3/d1a/a08811" kindref="compound">PixelIterator</ref>&lt; PF &gt;</type>
        <definition>PixelIterator&lt; PF &gt; castor::operator+</definition>
        <argsstring>(PixelIterator&lt; PF &gt; it, size_t offset)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d3/d1a/a08811" kindref="compound">PixelIterator</ref>&lt; PF &gt;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelIterator.hpp" line="165" column="22" bodyfile="CastorUtils/Graphics/PixelIterator.hpp" bodystart="165" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab1b2f8c53f269af3b89733b0116fba1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d3/d1a/a08811" kindref="compound">PixelIterator</ref>&lt; PF &gt;</type>
        <definition>PixelIterator&lt; PF &gt; castor::operator-</definition>
        <argsstring>(PixelIterator&lt; PF &gt; it, size_t offset)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d3/d1a/a08811" kindref="compound">PixelIterator</ref>&lt; PF &gt;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelIterator.hpp" line="174" column="22" bodyfile="CastorUtils/Graphics/PixelIterator.hpp" bodystart="174" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae4fe8e7c80a690c778ca6bd4bc35fead" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>PixelFormat</type>
            <declname>PF</declname>
            <defname>PF</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d3/d1a/a08811" kindref="compound">PixelIterator</ref>&lt; PF &gt;::difference_type</type>
        <definition>PixelIterator&lt; PF &gt;::difference_type castor::operator-</definition>
        <argsstring>(PixelIterator&lt; PF &gt; const &amp;lhs, PixelIterator&lt; PF &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d3/d1a/a08811" kindref="compound">PixelIterator</ref>&lt; PF &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d3/d1a/a08811" kindref="compound">PixelIterator</ref>&lt; PF &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/PixelIterator.hpp" line="183" column="49" bodyfile="CastorUtils/Graphics/PixelIterator.hpp" bodystart="183" bodyend="187"/>
        <references refid="d3/d1a/a08811_1acbbf3f6e12903ae497cbdd6f43a5f458" compoundref="d5/d8b/a02060" startline="141" endline="146">castor::PixelIterator&lt; PF &gt;::diffIt</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2c2dc8d1c7aef04c79257404ef8ccf44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::operator==</definition>
        <argsstring>(Position const &amp;a, Position const &amp;b)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="df/dba/a08999" kindref="compound">Position</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="df/dba/a08999" kindref="compound">Position</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;égalité </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>Les positions à comparer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si les positions ont les mêmes coordonnées </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Position.hpp" line="169" column="13" declfile="CastorUtils/Graphics/Position.hpp" declline="169" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9264e9d53baf0c8b1279ffe721eb6cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::operator!=</definition>
        <argsstring>(Position const &amp;a, Position const &amp;b)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="df/dba/a08999" kindref="compound">Position</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="df/dba/a08999" kindref="compound">Position</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Opérateur de différence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>Les positions à comparer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>false</computeroutput> si les positions ont les mêmes coordonnées </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Position.hpp" line="180" column="13" declfile="CastorUtils/Graphics/Position.hpp" declline="180" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afaeb36e921aef0e6f9aebcffd40292ef" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>static String castor::getPredefinedName</definition>
        <argsstring>(PredefinedRgbaColour predefined)</argsstring>
        <name>getPredefinedName</name>
        <qualifiedname>castor::getPredefinedName</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926da" kindref="member">PredefinedRgbaColour</ref></type>
          <declname>predefined</declname>
        </param>
        <briefdescription>
<para>Récupère le nom d&apos;une couleur prédéfinie. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">predefined</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur prédéfinie </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le nom de la couleur </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="25" column="22" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="25" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2a561357db9a6cc73e8138c0d31ed49f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1a9618cb07193e57d78cbe93cdb52926da" kindref="member">PredefinedRgbaColour</ref></type>
        <definition>static PredefinedRgbaColour castor::getPredefinedRgba</definition>
        <argsstring>(String const &amp;name)</argsstring>
        <name>getPredefinedRgba</name>
        <qualifiedname>castor::getPredefinedRgba</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Récupère une couleur prédéfinie à partir de son nom. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Le nom de la couleur prédéfinie </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La couleur prédéfinie </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="36" column="36" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="36" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afa9832c4898acc676a6c08ff46f2dcaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(RgbaColourT&lt; ComponentType &gt; const &amp;lhs, RgbaColourT&lt; ComponentType &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;égalité </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les couleurs à comparer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="862" column="13" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="862" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa0db824443f0b58c49c7c8fc3bf94926" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(RgbaColourT&lt; ComponentType &gt; const &amp;lhs, RgbaColourT&lt; ComponentType &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de différence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les couleurs à comparer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="872" column="13" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="872" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2973bea0bfdb15d787103088d9e5aa28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt;</type>
        <definition>RgbaColourT&lt; ComponentType &gt; castor::operator+</definition>
        <argsstring>(RgbaColourT&lt; ComponentType &gt; const &amp;lhs, RgbaColourT&lt; ComponentType &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;addition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les couleurs à ajouter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs + rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="884" column="20" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="884" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0cd2324d5519d83492cfde38e9eaee57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt;</type>
        <definition>RgbaColourT&lt; ComponentType &gt; castor::operator-</definition>
        <argsstring>(RgbaColourT&lt; ComponentType &gt; const &amp;lhs, RgbaColourT&lt; ComponentType &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de soustraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les couleurs à soustraire </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs - rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="896" column="20" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="896" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a127da7b8ba5334118ee1d475fbb01be0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt;</type>
        <definition>RgbaColourT&lt; ComponentType &gt; castor::operator+</definition>
        <argsstring>(RgbaColourT&lt; ComponentType &gt; const &amp;lhs, T rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;addition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs à ajouter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs + rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="908" column="13" bodyfile="CastorUtils/Graphics/RgbaColour.hpp" bodystart="908" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aad0f85ce2ba43779058a08a6d1d414e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt;</type>
        <definition>RgbaColourT&lt; ComponentType &gt; castor::operator-</definition>
        <argsstring>(RgbaColourT&lt; ComponentType &gt; const &amp;lhs, T rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de soustraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs à soustraire </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs - rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="925" column="13" bodyfile="CastorUtils/Graphics/RgbaColour.hpp" bodystart="925" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a470ae1d92f1a9b94b0a30c46f5abd285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt;</type>
        <definition>RgbaColourT&lt; ComponentType &gt; castor::operator*</definition>
        <argsstring>(RgbaColourT&lt; ComponentType &gt; const &amp;lhs, T rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs à multiplier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs * rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="943" column="13" bodyfile="CastorUtils/Graphics/RgbaColour.hpp" bodystart="943" bodyend="948"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9de7e752292d4bab6c2d6b6d2c625c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt;</type>
        <definition>RgbaColourT&lt; ComponentType &gt; castor::operator/</definition>
        <argsstring>(RgbaColourT&lt; ComponentType &gt; const &amp;lhs, T rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de division. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs à diviser </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs / rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="961" column="13" bodyfile="CastorUtils/Graphics/RgbaColour.hpp" bodystart="961" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8310959abdaa75c9658d0b3f7d05fa7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point3ub</type>
        <definition>Point3ub castor::toRGBByte</definition>
        <argsstring>(RgbaColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toRGBByte</name>
        <qualifiedname>castor::toRGBByte</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format RGB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="977" column="17" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="977" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a79694556336504bc65f51e772f848ae5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point3ub</type>
        <definition>Point3ub castor::toBGRByte</definition>
        <argsstring>(RgbaColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toBGRByte</name>
        <qualifiedname>castor::toBGRByte</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format BGR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="988" column="17" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="988" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a502c2de7805f8807f6abbdf6c87562bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point4ub</type>
        <definition>Point4ub castor::toRGBAByte</definition>
        <argsstring>(RgbaColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toRGBAByte</name>
        <qualifiedname>castor::toRGBAByte</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format RGBA. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="999" column="17" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="999" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1abcf1443b490ed891df8ed0478c904531" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point4ub</type>
        <definition>Point4ub castor::toBGRAByte</definition>
        <argsstring>(RgbaColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toBGRAByte</name>
        <qualifiedname>castor::toBGRAByte</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format BGRA. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1010" column="17" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1010" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a27f7932773a5ecc393bf5350d67b5a04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point4ub</type>
        <definition>Point4ub castor::toARGBByte</definition>
        <argsstring>(RgbaColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toARGBByte</name>
        <qualifiedname>castor::toARGBByte</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format ARGB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1021" column="17" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1021" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1acd02392f66b8096229bf92be3d336e79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point4ub</type>
        <definition>Point4ub castor::toABGRByte</definition>
        <argsstring>(RgbaColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toABGRByte</name>
        <qualifiedname>castor::toABGRByte</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format ABGR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1032" column="17" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1032" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab82bc01bfcbe6e7e556940f3ba7fd7c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>Point3f</type>
        <definition>Point3f castor::toRGBFloat</definition>
        <argsstring>(RgbaColourT&lt; ComponentType &gt; const &amp;colour)</argsstring>
        <name>toRGBFloat</name>
        <qualifiedname>castor::toRGBFloat</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format RGB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1044" column="16" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1044" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ade44807fec9b4b7168d9bc890402dea8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>Point3f</type>
        <definition>Point3f castor::toBGRFloat</definition>
        <argsstring>(RgbaColourT&lt; ComponentType &gt; const &amp;colour)</argsstring>
        <name>toBGRFloat</name>
        <qualifiedname>castor::toBGRFloat</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format BGR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1056" column="16" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1056" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1abb3917f5623b03bc0634a9607b478e2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>Point4f</type>
        <definition>Point4f castor::toRGBAFloat</definition>
        <argsstring>(RgbaColourT&lt; ComponentType &gt; const &amp;colour)</argsstring>
        <name>toRGBAFloat</name>
        <qualifiedname>castor::toRGBAFloat</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format RGBA. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1068" column="16" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1068" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9e104a9282e5d9a97589268e05462fa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>Point4f</type>
        <definition>Point4f castor::toARGBFloat</definition>
        <argsstring>(RgbaColourT&lt; ComponentType &gt; const &amp;colour)</argsstring>
        <name>toARGBFloat</name>
        <qualifiedname>castor::toARGBFloat</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format ARGB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1080" column="16" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1080" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab6c33a0b9b287a841812d714d3f661da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>Point4f</type>
        <definition>Point4f castor::toABGRFloat</definition>
        <argsstring>(RgbaColourT&lt; ComponentType &gt; const &amp;colour)</argsstring>
        <name>toABGRFloat</name>
        <qualifiedname>castor::toABGRFloat</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format ABGR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1092" column="16" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1092" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a457d0ae6823163b9341444d6f4f52de4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>Point4f</type>
        <definition>Point4f castor::toBGRAFloat</definition>
        <argsstring>(RgbaColourT&lt; ComponentType &gt; const &amp;colour)</argsstring>
        <name>toBGRAFloat</name>
        <qualifiedname>castor::toBGRAFloat</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format BGRA. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1104" column="16" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1104" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad6c31f3a8d7d357e11a64b2773e2cdd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t castor::toRGBPacked</definition>
        <argsstring>(RgbaColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toRGBPacked</name>
        <qualifiedname>castor::toRGBPacked</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Compile les composantes de la couleur dans un uint32_t, au format RGB (0x00RRGGBB). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1114" column="17" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1114" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a79d311562f1b7d54354dcd80ea74e24a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t castor::toBGRPacked</definition>
        <argsstring>(RgbaColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toBGRPacked</name>
        <qualifiedname>castor::toBGRPacked</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Compile les composantes de la couleur dans un uint32_t, au format BGR (0x00BBGGRR). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes compilées de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1125" column="17" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1125" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a627350272b249b64f3a95b65c199ada6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t castor::toARGBPacked</definition>
        <argsstring>(RgbaColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toARGBPacked</name>
        <qualifiedname>castor::toARGBPacked</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Compile les composantes de la couleur dans un uint32_t, au format ARGB (0xAARRGGBB). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes compilées de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1136" column="17" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1136" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4ac08d24842ee5c1e8721a0ebfdcbb87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t castor::toRGBAPacked</definition>
        <argsstring>(RgbaColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toRGBAPacked</name>
        <qualifiedname>castor::toRGBAPacked</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Compile les composantes de la couleur dans un uint32_t, au format RGBA (0xRRGGBBAA). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes compilées de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1147" column="17" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1147" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8942a5ddac43e3137572d5ada4a900ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t castor::toABGRPacked</definition>
        <argsstring>(RgbaColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toABGRPacked</name>
        <qualifiedname>castor::toABGRPacked</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Compile les composantes de la couleur dans un uint32_t, au format ABGR (0xAABBGGRR). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes compilées de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1158" column="17" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1158" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a05805f73fa08cf4b7c8fe8382fb209e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t castor::toBGRAPacked</definition>
        <argsstring>(RgbaColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toBGRAPacked</name>
        <qualifiedname>castor::toBGRAPacked</qualifiedname>
        <param>
          <type><ref refid="dd/db7/a08919" kindref="compound">RgbaColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Compile les composantes de la couleur dans un uint32_t, au format BGRA (0xBBGGRRAA). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes compilées de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbaColour.hpp" line="1169" column="17" declfile="CastorUtils/Graphics/RgbaColour.hpp" declline="1169" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a44273fb100da3b848fb834b67a76afb0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref></type>
        <definition>static String castor::getPredefinedName</definition>
        <argsstring>(PredefinedRgbColour predefined)</argsstring>
        <name>getPredefinedName</name>
        <qualifiedname>castor::getPredefinedName</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ab7c465f9d6436e92b483633dace8c9b8" kindref="member">PredefinedRgbColour</ref></type>
          <declname>predefined</declname>
        </param>
        <briefdescription>
<para>Récupère le nom d&apos;une couleur prédéfinie. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">predefined</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur prédéfinie </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le nom de la couleur </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="25" column="15" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="25" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3758ff18f512f893f2bc05c48e72b698" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d2/dd2/a02279_1ab7c465f9d6436e92b483633dace8c9b8" kindref="member">PredefinedRgbColour</ref></type>
        <definition>static PredefinedRgbColour castor::getPredefinedRgb</definition>
        <argsstring>(String const &amp;name)</argsstring>
        <name>getPredefinedRgb</name>
        <qualifiedname>castor::getPredefinedRgb</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1af78b89ba78c07da21e45ef90d4686c4c" kindref="member">String</ref> const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Récupère une couleur prédéfinie à partir de son nom. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Le nom de la couleur prédéfinie </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>La couleur prédéfinie </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="36" column="35" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="36" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a07ab7e9fc9c08033e6863ca567c9cf6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(RgbColourT&lt; ComponentType &gt; const &amp;lhs, RgbColourT&lt; ComponentType &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;égalité </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les couleurs à comparer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="840" column="13" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="840" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae72592542dcfb1a068dc1b9b8402020c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(RgbColourT&lt; ComponentType &gt; const &amp;lhs, RgbColourT&lt; ComponentType &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de différence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les couleurs à comparer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="850" column="13" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="850" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac04502f0886231f18e73256482e89af5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt;</type>
        <definition>RgbColourT&lt; ComponentType &gt; castor::operator+</definition>
        <argsstring>(RgbColourT&lt; ComponentType &gt; const &amp;lhs, RgbColourT&lt; ComponentType &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;addition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les couleurs à ajouter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs + rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="862" column="19" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="862" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a11ad2fcfc98d6cbc4df959219077c1f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt;</type>
        <definition>RgbColourT&lt; ComponentType &gt; castor::operator-</definition>
        <argsstring>(RgbColourT&lt; ComponentType &gt; const &amp;lhs, RgbColourT&lt; ComponentType &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de soustraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les couleurs à soustraire </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs - rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="874" column="19" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="874" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0e271408be0236fac64e7b29ad111a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt;</type>
        <definition>RgbColourT&lt; ComponentType &gt; castor::operator+</definition>
        <argsstring>(RgbColourT&lt; ComponentType &gt; const &amp;lhs, T rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;addition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs à ajouter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs + rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="886" column="12" bodyfile="CastorUtils/Graphics/RgbColour.hpp" bodystart="886" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad456cff3626dfa48d7dd8a077a970d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt;</type>
        <definition>RgbColourT&lt; ComponentType &gt; castor::operator-</definition>
        <argsstring>(RgbColourT&lt; ComponentType &gt; const &amp;lhs, T rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de soustraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs à soustraire </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs - rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="903" column="12" bodyfile="CastorUtils/Graphics/RgbColour.hpp" bodystart="903" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad76cd1da8574649f1d97981ae71bd9f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt;</type>
        <definition>RgbColourT&lt; ComponentType &gt; castor::operator*</definition>
        <argsstring>(RgbColourT&lt; ComponentType &gt; const &amp;lhs, T rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs à multiplier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs * rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="921" column="12" bodyfile="CastorUtils/Graphics/RgbColour.hpp" bodystart="921" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae0e8697f6d318df388aaf0c4cbdcb6f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt;</type>
        <definition>RgbColourT&lt; ComponentType &gt; castor::operator/</definition>
        <argsstring>(RgbColourT&lt; ComponentType &gt; const &amp;lhs, T rhs)</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de division. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Les valeurs à diviser </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Resultat de lhs / rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="939" column="12" bodyfile="CastorUtils/Graphics/RgbColour.hpp" bodystart="939" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afc5fd2df1450b9b6d4745964fe9612f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point3ub</type>
        <definition>Point3ub castor::toRGBByte</definition>
        <argsstring>(RgbColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toRGBByte</name>
        <qualifiedname>castor::toRGBByte</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format RGB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="955" column="17" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="955" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a217700b67675d2c6a9ddb2f79ddff3d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point3ub</type>
        <definition>Point3ub castor::toBGRByte</definition>
        <argsstring>(RgbColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toBGRByte</name>
        <qualifiedname>castor::toBGRByte</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format BGR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="966" column="17" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="966" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a39e01e44dc1c54a728fe0a2a1c23d92a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point4ub</type>
        <definition>Point4ub castor::toRGBAByte</definition>
        <argsstring>(RgbColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toRGBAByte</name>
        <qualifiedname>castor::toRGBAByte</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format RGBA. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="977" column="17" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="977" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a95e78ee6ddf59bca21ad042c0d9cdedd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point4ub</type>
        <definition>Point4ub castor::toBGRAByte</definition>
        <argsstring>(RgbColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toBGRAByte</name>
        <qualifiedname>castor::toBGRAByte</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format BGRA. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="988" column="17" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="988" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3f89fea90f7b642eac4d94624e36979a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point4ub</type>
        <definition>Point4ub castor::toARGBByte</definition>
        <argsstring>(RgbColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toARGBByte</name>
        <qualifiedname>castor::toARGBByte</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format ARGB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="999" column="17" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="999" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad0faa05536860737c98fed9bc50fdb0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Point4ub</type>
        <definition>Point4ub castor::toABGRByte</definition>
        <argsstring>(RgbColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toABGRByte</name>
        <qualifiedname>castor::toABGRByte</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format ABGR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="1010" column="17" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="1010" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6448aed1a15ede3a94a5a55198de7fa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>Point3f</type>
        <definition>Point3f castor::toRGBFloat</definition>
        <argsstring>(RgbColourT&lt; ComponentType &gt; const &amp;colour)</argsstring>
        <name>toRGBFloat</name>
        <qualifiedname>castor::toRGBFloat</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format RGB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="1022" column="16" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="1022" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a97219c2a4be04205845b6a3708f1cab9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>Point3f</type>
        <definition>Point3f castor::toBGRFloat</definition>
        <argsstring>(RgbColourT&lt; ComponentType &gt; const &amp;colour)</argsstring>
        <name>toBGRFloat</name>
        <qualifiedname>castor::toBGRFloat</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format BGR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="1034" column="16" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="1034" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a524d8a3e9b3e2c5dc0fbb2fd4d0a607c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>Point4f</type>
        <definition>Point4f castor::toRGBAFloat</definition>
        <argsstring>(RgbColourT&lt; ComponentType &gt; const &amp;colour)</argsstring>
        <name>toRGBAFloat</name>
        <qualifiedname>castor::toRGBAFloat</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format RGBA. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="1046" column="16" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="1046" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aeb520135db86183ddb68f0b8c686aa32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>Point4f</type>
        <definition>Point4f castor::toARGBFloat</definition>
        <argsstring>(RgbColourT&lt; ComponentType &gt; const &amp;colour)</argsstring>
        <name>toARGBFloat</name>
        <qualifiedname>castor::toARGBFloat</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format ARGB. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="1058" column="16" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="1058" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6119e7fafc511dfad3a24981e270ad86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>Point4f</type>
        <definition>Point4f castor::toABGRFloat</definition>
        <argsstring>(RgbColourT&lt; ComponentType &gt; const &amp;colour)</argsstring>
        <name>toABGRFloat</name>
        <qualifiedname>castor::toABGRFloat</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format ABGR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="1070" column="16" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="1070" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1adf6d52a5b55ad427033ed5c9337cb9b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ComponentType</type>
          </param>
        </templateparamlist>
        <type>Point4f</type>
        <definition>Point4f castor::toBGRAFloat</definition>
        <argsstring>(RgbColourT&lt; ComponentType &gt; const &amp;colour)</argsstring>
        <name>toBGRAFloat</name>
        <qualifiedname>castor::toBGRAFloat</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; ComponentType &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Stoque les composantes de cette couleur dans un point, au format BGRA. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="1082" column="16" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="1082" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad7339fabe5c6c1df73fef75a8bd225f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t castor::toRGBPacked</definition>
        <argsstring>(RgbColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toRGBPacked</name>
        <qualifiedname>castor::toRGBPacked</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Compile les composantes de la couleur dans un uint32_t, au format RGB (0x00RRGGBB). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="1092" column="17" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="1092" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a81c11afd1dcbed6e2d6e1c30a7a885dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t castor::toBGRPacked</definition>
        <argsstring>(RgbColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toBGRPacked</name>
        <qualifiedname>castor::toBGRPacked</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Compile les composantes de la couleur dans un uint32_t, au format BGR (0x00BBGGRR). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes compilées de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="1103" column="17" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="1103" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7ff9a7620040c04d1686f051129b15fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t castor::toARGBPacked</definition>
        <argsstring>(RgbColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toARGBPacked</name>
        <qualifiedname>castor::toARGBPacked</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Compile les composantes de la couleur dans un uint32_t, au format ARGB (0xAARRGGBB). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes compilées de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="1114" column="17" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="1114" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5ba0ff28693d1e7e70c3cee76713521b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t castor::toRGBAPacked</definition>
        <argsstring>(RgbColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toRGBAPacked</name>
        <qualifiedname>castor::toRGBAPacked</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Compile les composantes de la couleur dans un uint32_t, au format RGBA (0xRRGGBBAA). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes compilées de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="1125" column="17" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="1125" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afe0b255f3d12154217f39c71b036e92f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t castor::toABGRPacked</definition>
        <argsstring>(RgbColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toABGRPacked</name>
        <qualifiedname>castor::toABGRPacked</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Compile les composantes de la couleur dans un uint32_t, au format ABGR (0xAABBGGRR). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes compilées de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="1136" column="17" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="1136" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa6fb8607b39e12f756160e6875cec02f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t castor::toBGRAPacked</definition>
        <argsstring>(RgbColourT&lt; ColourComponent &gt; const &amp;colour)</argsstring>
        <name>toBGRAPacked</name>
        <qualifiedname>castor::toBGRAPacked</qualifiedname>
        <param>
          <type><ref refid="d2/da0/a08923" kindref="compound">RgbColourT</ref>&lt; <ref refid="da/d5d/a08743" kindref="compound">ColourComponent</ref> &gt; const &amp;</type>
          <declname>colour</declname>
        </param>
        <briefdescription>
<para>Compile les composantes de la couleur dans un uint32_t, au format BGRA (0xBBGGRRAA). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">colour</parametername>
</parameternamelist>
<parameterdescription>
<para>La couleur. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Les composantes compilées de la couleur. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/RgbColour.hpp" line="1147" column="17" declfile="CastorUtils/Graphics/RgbColour.hpp" declline="1147" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa71fcb2084ead1a9317d81f389c59cdb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::operator==</definition>
        <argsstring>(Size const &amp;a, Size const &amp;b) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d4/dd6/a09023" kindref="compound">Size</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="d4/dd6/a09023" kindref="compound">Size</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;égalité </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>Les tailles à comparer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si les tailles ont les mêmes dimensions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Size.hpp" line="202" column="13" declfile="CastorUtils/Graphics/Size.hpp" declline="202" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a9e7a7899e92e7495c2396d0065efbd83" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::operator!=</definition>
        <argsstring>(Size const &amp;a, Size const &amp;b) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d4/dd6/a09023" kindref="compound">Size</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="d4/dd6/a09023" kindref="compound">Size</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Opérateur de différence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>Les tailles à comparer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>false</computeroutput> si les tailles ont les mêmes dimensions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Size.hpp" line="213" column="13" declfile="CastorUtils/Graphics/Size.hpp" declline="213" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a40826d067f1b962d0fd48a0710627b6c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="d4/dd6/a09023" kindref="compound">Size</ref></type>
        <definition>Size castor::operator&lt;&lt;</definition>
        <argsstring>(Size const &amp;lhs, uint32_t rhs) noexcept</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="d4/dd6/a09023" kindref="compound">Size</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Size.hpp" line="215" column="8" bodyfile="CastorUtils/Graphics/Size.hpp" bodystart="215" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a45ea0bf150a61a4b42472801ae0e1b75" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="d4/dd6/a09023" kindref="compound">Size</ref></type>
        <definition>Size castor::operator&gt;&gt;</definition>
        <argsstring>(Size const &amp;lhs, uint32_t rhs) noexcept</argsstring>
        <name>operator&gt;&gt;</name>
        <qualifiedname>castor::operator&gt;&gt;</qualifiedname>
        <param>
          <type><ref refid="d4/dd6/a09023" kindref="compound">Size</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Graphics/Size.hpp" line="222" column="13" bodyfile="CastorUtils/Graphics/Size.hpp" bodystart="222" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ad8c627ee41545050fb2b661d08ef2d4c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt;</type>
        <definition>static AngleT&lt; Type &gt; castor::acosT</definition>
        <argsstring>(double value)</argsstring>
        <name>acosT</name>
        <qualifiedname>castor::acosT</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Calcule la valeur de cet angle à partir du cosinus donné </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Le cosinus </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="421" column="22" declfile="CastorUtils/Math/Angle.hpp" declline="421" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af36884a3512e676a8d635ea0fc5ee0d9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt;</type>
        <definition>static AngleT&lt; Type &gt; castor::asinT</definition>
        <argsstring>(double value)</argsstring>
        <name>asinT</name>
        <qualifiedname>castor::asinT</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Calcule la valeur de cet angle à partir du sinus donné </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Le sinus </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="431" column="22" declfile="CastorUtils/Math/Angle.hpp" declline="431" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7c604ed1bce650c2680a9d196661d7da" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt;</type>
        <definition>static AngleT&lt; Type &gt; castor::atanT</definition>
        <argsstring>(double value)</argsstring>
        <name>atanT</name>
        <qualifiedname>castor::atanT</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Calcule la valeur de cet angle à partir de la tangente donné </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La tangente </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="441" column="22" declfile="CastorUtils/Math/Angle.hpp" declline="441" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ab42631202df505c2d35ec9adef8072c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; float &gt;</type>
        <definition>static AngleT&lt; float &gt; castor::acosf</definition>
        <argsstring>(double value)</argsstring>
        <name>acosf</name>
        <qualifiedname>castor::acosf</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Calcule la valeur de cet angle à partir du cosinus donné </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Le cosinus </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="450" column="22" declfile="CastorUtils/Math/Angle.hpp" declline="450" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1acbc75cd5d31c568f8cda6f9cd9d06a4c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; float &gt;</type>
        <definition>static AngleT&lt; float &gt; castor::asinf</definition>
        <argsstring>(double value)</argsstring>
        <name>asinf</name>
        <qualifiedname>castor::asinf</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Calcule la valeur de cet angle à partir du sinus donné </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Le sinus </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="459" column="22" declfile="CastorUtils/Math/Angle.hpp" declline="459" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a835a2667d288080e109f2d4df8750a71" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; float &gt;</type>
        <definition>static AngleT&lt; float &gt; castor::atanf</definition>
        <argsstring>(double value)</argsstring>
        <name>atanf</name>
        <qualifiedname>castor::atanf</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Calcule la valeur de cet angle à partir de la tangente donné </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La tangente </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="468" column="22" declfile="CastorUtils/Math/Angle.hpp" declline="468" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3a5701fcfd7a7bf2703535f254334348" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; double &gt;</type>
        <definition>static AngleT&lt; double &gt; castor::acosd</definition>
        <argsstring>(double value)</argsstring>
        <name>acosd</name>
        <qualifiedname>castor::acosd</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Calcule la valeur de cet angle à partir du cosinus donné </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Le cosinus </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="477" column="22" declfile="CastorUtils/Math/Angle.hpp" declline="477" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a86e8621b906675274368139f76ddf85e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; double &gt;</type>
        <definition>static AngleT&lt; double &gt; castor::asind</definition>
        <argsstring>(double value)</argsstring>
        <name>asind</name>
        <qualifiedname>castor::asind</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Calcule la valeur de cet angle à partir du sinus donné </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Le sinus </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="486" column="22" declfile="CastorUtils/Math/Angle.hpp" declline="486" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a033be68ad295937614c054084df1f62f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; double &gt;</type>
        <definition>static AngleT&lt; double &gt; castor::atand</definition>
        <argsstring>(double value)</argsstring>
        <name>atand</name>
        <qualifiedname>castor::atand</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Calcule la valeur de cet angle à partir de la tangente donné </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La tangente </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="495" column="22" declfile="CastorUtils/Math/Angle.hpp" declline="495" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4c9d3b047bf1270a93c538eef601d0b6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator==</definition>
        <argsstring>(AngleT&lt; Type &gt; const &amp;lhs, AngleT&lt; Type &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;égalité </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Premier opérande </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Second opérande </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si lhs est égal à rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="509" column="13" declfile="CastorUtils/Math/Angle.hpp" declline="509" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a47718ca75084a3f507be204de4a8f0dd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator!=</definition>
        <argsstring>(AngleT&lt; Type &gt; const &amp;lhs, AngleT&lt; Type &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de différence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Premier opérande </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Second opérande </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si lhs est différent de rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="523" column="13" declfile="CastorUtils/Math/Angle.hpp" declline="523" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a04ef2c023b7beb638b9a64a86cbb388f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&lt;</definition>
        <argsstring>(AngleT&lt; Type &gt; const &amp;lhs, AngleT&lt; Type &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>castor::operator&lt;</qualifiedname>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur &quot;inférieur à&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Premier opérande. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Second opérande. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si lhs est inférieur à rhs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="537" column="8" declfile="CastorUtils/Math/Angle.hpp" declline="537" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2dc5fefb116f618239437377c11b5c4f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&gt;=</definition>
        <argsstring>(AngleT&lt; Type &gt; const &amp;lhs, AngleT&lt; Type &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>castor::operator&gt;=</qualifiedname>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur &quot;supérieur ou égal à&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Premier opérande. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Second opérande. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si lhs est supérieur ou égal à rhs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="551" column="13" declfile="CastorUtils/Math/Angle.hpp" declline="551" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a082044097826cd2022f5e5f93c4fff78" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&gt;</definition>
        <argsstring>(AngleT&lt; Type &gt; const &amp;lhs, AngleT&lt; Type &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>castor::operator&gt;</qualifiedname>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur &quot;supérieur à&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Premier opérande. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Second opérande. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si lhs est supérieur à rhs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="565" column="13" declfile="CastorUtils/Math/Angle.hpp" declline="565" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a202c7a5258480fbc9bc238728f5fb94a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool castor::operator&lt;=</definition>
        <argsstring>(AngleT&lt; Type &gt; const &amp;lhs, AngleT&lt; Type &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>castor::operator&lt;=</qualifiedname>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur &quot;inférieur ou égal à&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Premier opérande. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Second opérande. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>true</computeroutput> si lhs est inférieur ou égal à rhs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="579" column="8" declfile="CastorUtils/Math/Angle.hpp" declline="579" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a34c7123a3367e2448f87585404630a90" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt;</type>
        <definition>AngleT&lt; Type &gt; castor::operator+</definition>
        <argsstring>(AngleT&lt; Type &gt; const &amp;lhs, AngleT&lt; Type &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;addition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Premier opérande </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Second opérande </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le résultat de l&apos;addition </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="593" column="15" declfile="CastorUtils/Math/Angle.hpp" declline="593" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ae3db570e2a4c7657b9b53c5d7c49ee74" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt;</type>
        <definition>AngleT&lt; Type &gt; castor::operator-</definition>
        <argsstring>(AngleT&lt; Type &gt; const &amp;lhs, AngleT&lt; Type &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de soustraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Premier opérande </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Second opérande </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le résultat de la soustraction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="607" column="15" declfile="CastorUtils/Math/Angle.hpp" declline="607" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a1fda378891a644c8e9bf4a590572fa0c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt;</type>
        <definition>AngleT&lt; Type &gt; castor::operator*</definition>
        <argsstring>(AngleT&lt; Type &gt; const &amp;lhs, AngleT&lt; Type &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Premier opérande </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Second opérande </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le résultat de la multiplication </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="621" column="15" declfile="CastorUtils/Math/Angle.hpp" declline="621" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a60a6d1db04a225dfa6ca4b2ee4aa4354" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt;</type>
        <definition>AngleT&lt; Type &gt; castor::operator/</definition>
        <argsstring>(AngleT&lt; Type &gt; const &amp;lhs, AngleT&lt; Type &gt; const &amp;rhs) noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de division. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Premier opérande </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Second opérande </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le résultat de la division </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="635" column="15" declfile="CastorUtils/Math/Angle.hpp" declline="635" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa1fc18d3c71a63a099dfa3b573e455c8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt;</type>
        <definition>AngleT&lt; Type &gt; castor::operator*</definition>
        <argsstring>(AngleT&lt; Type &gt; const &amp;lhs, double rhs) noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Premier opérande </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Second opérande </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le résultat de la multiplication </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="649" column="15" declfile="CastorUtils/Math/Angle.hpp" declline="649" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a79a136e197d5721dfbb0ffc4bf480507" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt;</type>
        <definition>AngleT&lt; Type &gt; castor::operator/</definition>
        <argsstring>(AngleT&lt; Type &gt; const &amp;lhs, double rhs) noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>castor::operator/</qualifiedname>
        <param>
          <type><ref refid="d4/df4/a09099" kindref="compound">AngleT</ref>&lt; Type &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de division. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Premier opérande </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Second opérande </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le résultat de la division </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Angle.hpp" line="663" column="15" declfile="CastorUtils/Math/Angle.hpp" declline="663" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a032b69e9d7434f54a95a5ebe78e3894c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TypeT</type>
          </param>
        </templateparamlist>
        <type>TypeT</type>
        <definition>static TypeT castor::convert</definition>
        <argsstring>(TypeT const &amp;value, LengthUnit from, LengthUnit to)</argsstring>
        <name>convert</name>
        <qualifiedname>castor::convert</qualifiedname>
        <param>
          <type>TypeT const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a8cf4a835d2dbebebe00eef5217134a5f" kindref="member">LengthUnit</ref></type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="d2/dd2/a02279_1a8cf4a835d2dbebebe00eef5217134a5f" kindref="member">LengthUnit</ref></type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Length.hpp" line="327" column="21" declfile="CastorUtils/Math/Length.hpp" declline="327" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a82aeef86b997bd808e68b90067cac1c4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::integral</type>
            <declname>TypeT</declname>
            <defname>TypeT</defname>
          </param>
        </templateparamlist>
        <type>constexpr TypeT</type>
        <definition>constexpr TypeT castor::divRoundUp</definition>
        <argsstring>(TypeT num, TypeT denom)</argsstring>
        <name>divRoundUp</name>
        <qualifiedname>castor::divRoundUp</qualifiedname>
        <param>
          <type>TypeT</type>
          <declname>num</declname>
        </param>
        <param>
          <type>TypeT</type>
          <declname>denom</declname>
        </param>
        <briefdescription>
<para>Division arrondie au supérieur. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Math.hpp" line="191" column="17" bodyfile="CastorUtils/Math/Math.hpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a50b85b0e27950c45e4e8d83d04d2e535" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::operator==</definition>
        <argsstring>(PlaneEquation const &amp;lhs, PlaneEquation const &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>castor::operator==</qualifiedname>
        <param>
          <type><ref refid="dd/d55/a09279" kindref="compound">PlaneEquation</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dd/d55/a09279" kindref="compound">PlaneEquation</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Vérifie si un plan est égal à un autre. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Deux plans sont égaux si ils sont parallèles et si leurs normales et coeff sont égaux </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/PlaneEquation.hpp" line="198" column="13" declfile="CastorUtils/Math/PlaneEquation.hpp" declline="198" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1afbcbf6a99a737194824f2a622cf75c4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> bool</type>
        <definition>CU_API bool castor::operator!=</definition>
        <argsstring>(PlaneEquation const &amp;lhs, PlaneEquation const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>castor::operator!=</qualifiedname>
        <param>
          <type><ref refid="dd/d55/a09279" kindref="compound">PlaneEquation</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dd/d55/a09279" kindref="compound">PlaneEquation</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Vérifie si ce plan est différent d&apos;un autre. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/PlaneEquation.hpp" line="206" column="13" declfile="CastorUtils/Math/PlaneEquation.hpp" declline="206" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a385d0a44890d7f2a693526b0378e9a1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt;</type>
        <definition>QuaternionT&lt; T &gt; castor::operator+</definition>
        <argsstring>(QuaternionT&lt; T &gt; const &amp;lhs, QuaternionT&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator+</name>
        <qualifiedname>castor::operator+</qualifiedname>
        <param>
          <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur d&apos;addition. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Le premier objet Quaternion à ajouter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Le second objet Quaternion à ajouter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le résultat de l&apos;addtion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Quaternion.hpp" line="551" column="20" declfile="CastorUtils/Math/Quaternion.hpp" declline="551" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa32c840f9782b3177b0be4a75012848c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt;</type>
        <definition>QuaternionT&lt; T &gt; castor::operator-</definition>
        <argsstring>(QuaternionT&lt; T &gt; const &amp;lhs, QuaternionT&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de soustraction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Le premier objet Quaternion à soustraire </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Le second objet Quaternion à soustraire </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le résultat de la soustraction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Quaternion.hpp" line="565" column="20" declfile="CastorUtils/Math/Quaternion.hpp" declline="565" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5e2939301c49c115879571f920f6f085" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt;</type>
        <definition>QuaternionT&lt; T &gt; castor::operator*</definition>
        <argsstring>(QuaternionT&lt; T &gt; const &amp;lhs, QuaternionT&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Le premier objet Quaternion à multiplier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Le second objet Quaternion à multiplier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le résultat de la multiplication </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Quaternion.hpp" line="579" column="20" declfile="CastorUtils/Math/Quaternion.hpp" declline="579" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1ac0b1b994cc1955561a827ba0a0c916b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt;</type>
        <definition>QuaternionT&lt; T &gt; castor::operator*</definition>
        <argsstring>(QuaternionT&lt; T &gt; const &amp;lhs, double rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;objet Quaternion à multiplier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Le scalaire à multiplier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le résultat de la multiplication </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Quaternion.hpp" line="593" column="20" declfile="CastorUtils/Math/Quaternion.hpp" declline="593" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1acf7782feed0f808c57f477babb21cbe8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt;</type>
        <definition>QuaternionT&lt; T &gt; castor::operator*</definition>
        <argsstring>(QuaternionT&lt; T &gt; const &amp;lhs, float rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;objet Quaternion à multiplier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Le scalaire à multiplier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le résultat de la multiplication </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Quaternion.hpp" line="607" column="20" declfile="CastorUtils/Math/Quaternion.hpp" declline="607" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a7bfdd925aad6b7311efe7cd89190fb53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt;</type>
        <definition>QuaternionT&lt; T &gt; castor::operator*</definition>
        <argsstring>(double lhs, QuaternionT&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type>double</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Le scalaire à multiplier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;objet Quaternion à multiplier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le résultat de la multiplication </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Quaternion.hpp" line="621" column="20" declfile="CastorUtils/Math/Quaternion.hpp" declline="621" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3d65e275a387285826195ab17d4bd7fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt;</type>
        <definition>QuaternionT&lt; T &gt; castor::operator*</definition>
        <argsstring>(float lhs, QuaternionT&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator*</name>
        <qualifiedname>castor::operator*</qualifiedname>
        <param>
          <type>float</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Opérateur de multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>Le scalaire à multiplier </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;objet Quaternion à multiplier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le résultat de la multiplication </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Quaternion.hpp" line="635" column="20" declfile="CastorUtils/Math/Quaternion.hpp" declline="635" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a473e572a65f65bd703ad26ab09edf712" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt;</type>
        <definition>QuaternionT&lt; T &gt; castor::operator-</definition>
        <argsstring>(QuaternionT&lt; T &gt; const &amp;quat)</argsstring>
        <name>operator-</name>
        <qualifiedname>castor::operator-</qualifiedname>
        <param>
          <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt; const &amp;</type>
          <declname>quat</declname>
        </param>
        <briefdescription>
<para>Opérateur de négation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">quat</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;objet Quaternion à négativer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le résultat de la négation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Quaternion.hpp" line="647" column="20" declfile="CastorUtils/Math/Quaternion.hpp" declline="647" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1acc39d2f1c071512df4bb909a34b63b0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; CharT &gt; &amp;</type>
        <definition>std::basic_ostream&lt; CharT &gt; &amp; castor::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; CharT &gt; &amp;stream, QuaternionT&lt; T &gt; const &amp;quat)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; CharT &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="dc/dc3/a09203" kindref="compound">QuaternionT</ref>&lt; T &gt; const &amp;</type>
          <declname>quat</declname>
        </param>
        <briefdescription>
<para>Opérateur de flux. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Le flux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">quat</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;objet Quaternion à mettre dans le flux </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le flux. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Quaternion.hpp" line="647" column="20" bodyfile="CastorUtils/Math/Quaternion.hpp" bodystart="661" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1adb20060264652dae04682f6046d32776" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/da8/a09207" kindref="compound">Range</ref>&lt; T &gt;</type>
        <definition>Range&lt; T &gt; castor::makeRange</definition>
        <argsstring>(T const &amp;min, T const &amp;max) noexcept</argsstring>
        <name>makeRange</name>
        <qualifiedname>castor::makeRange</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Fonction d&apos;aide à la construction d&apos;un intervalle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">min</parametername>
<parametername direction="in">max</parametername>
</parameternamelist>
<parameterdescription>
<para>Les bornes de l&apos;intervalle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>L&apos;intervalle créé. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Range.hpp" line="195" column="14" bodyfile="CastorUtils/Math/Range.hpp" bodystart="195" bodyend="198"/>
        <referencedby refid="d2/dd2/a02279_1a0ffbd7e8c13a91cca4f677f4f02d8b5a" compoundref="d7/d26/a02162" startline="171" endline="176">makeRangedValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a0ffbd7e8c13a91cca4f677f4f02d8b5a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d8/de9/a09211" kindref="compound">RangedValue</ref>&lt; T &gt;</type>
        <definition>RangedValue&lt; T &gt; castor::makeRangedValue</definition>
        <argsstring>(T const &amp;value, T const &amp;min, T const &amp;max) noexcept</argsstring>
        <name>makeRangedValue</name>
        <qualifiedname>castor::makeRangedValue</qualifiedname>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Fonction d&apos;aide à la construction d&apos;une valeur dans un intervalle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">min</parametername>
<parametername direction="in">max</parametername>
</parameternamelist>
<parameterdescription>
<para>Les bornes de l&apos;intervalle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>L&apos;objet créé. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangedValue.hpp" line="171" column="20" bodyfile="CastorUtils/Math/RangedValue.hpp" bodystart="171" bodyend="176"/>
        <references refid="d2/dd2/a02279_1adb20060264652dae04682f6046d32776" compoundref="d4/d9b/a02159" startline="195" endline="198">makeRange</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af2321335a0a758f463463de42b33a475" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="da/d49/a09219" kindref="compound">RangeSequenceT</ref>&lt; T &gt;</type>
        <definition>RangeSequenceT&lt; T &gt; castor::makeRangeSequence</definition>
        <argsstring>(Vector&lt; T &gt; const &amp;sequence)</argsstring>
        <name>makeRangeSequence</name>
        <qualifiedname>castor::makeRangeSequence</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1a57d18b0d40cd54921270bcf33d0aadc5" kindref="member">Vector</ref>&lt; T &gt; const &amp;</type>
          <declname>sequence</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/RangeSequence.hpp" line="93" column="23" bodyfile="CastorUtils/Math/RangeSequence.hpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3759cdfedc651a22d0da6722b3189c31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DurationT</type>
          </param>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d33/a09227" kindref="compound">SpeedT</ref>&lt; ValueT, DurationT &gt;</type>
        <definition>SpeedT&lt; ValueT, DurationT &gt; castor::makeSpeed</definition>
        <argsstring>(ValueT const &amp;value)</argsstring>
        <name>makeSpeed</name>
        <qualifiedname>castor::makeSpeed</qualifiedname>
        <param>
          <type>ValueT const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Speed.hpp" line="214" column="8" bodyfile="CastorUtils/Math/Speed.hpp" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8f14317fb209e9c7f0829766d6ea59fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DurationT</type>
          </param>
          <param>
            <type>typename ValueT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/d33/a09227" kindref="compound">SpeedT</ref>&lt; ValueT, DurationT &gt;</type>
        <definition>SpeedT&lt; ValueT, DurationT &gt; castor::makeSpeed</definition>
        <argsstring>(ValueT const &amp;value, DurationT const &amp;)</argsstring>
        <name>makeSpeed</name>
        <qualifiedname>castor::makeSpeed</qualifiedname>
        <param>
          <type>ValueT const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>DurationT const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Math/Speed.hpp" line="220" column="8" bodyfile="CastorUtils/Math/Speed.hpp" bodystart="220" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af1e4001bed67669b4ecaffcc4200026a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>static constexpr uint32_t castor::getBitSize</definition>
        <argsstring>(uint64_t value)</argsstring>
        <name>getBitSize</name>
        <qualifiedname>castor::getBitSize</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/BitSize.hpp" line="11" column="27" bodyfile="CastorUtils/Miscellaneous/BitSize.hpp" bodystart="11" bodyend="33"/>
        <referencedby refid="d2/dd2/a02279_1a2a21d6c7523220d9093974964c42f13e" compoundref="df/d14/a02183" startline="35" endline="38">getBitSize</referencedby>
        <referencedby refid="d2/dd2/a02279_1a4fcb05781651d6cbce8599719b044729" compoundref="df/d14/a02183" startline="40" endline="50">getNextPowerOfTwo</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2a21d6c7523220d9093974964c42f13e" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>static constexpr uint32_t castor::getBitSize</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>getBitSize</name>
        <qualifiedname>castor::getBitSize</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/BitSize.hpp" line="35" column="27" bodyfile="CastorUtils/Miscellaneous/BitSize.hpp" bodystart="35" bodyend="38"/>
        <references refid="d2/dd2/a02279_1af1e4001bed67669b4ecaffcc4200026a" compoundref="df/d14/a02183" startline="11" endline="33">getBitSize</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a4fcb05781651d6cbce8599719b044729" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>static constexpr uint32_t castor::getNextPowerOfTwo</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>getNextPowerOfTwo</name>
        <qualifiedname>castor::getNextPowerOfTwo</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/BitSize.hpp" line="40" column="27" bodyfile="CastorUtils/Miscellaneous/BitSize.hpp" bodystart="40" bodyend="50"/>
        <references refid="d2/dd2/a02279_1af1e4001bed67669b4ecaffcc4200026a" compoundref="df/d14/a02183" startline="11" endline="33">getBitSize</references>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a8f8acb88f882afd54d0c552aad48c49a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>static constexpr bool castor::isPowerOfTwo</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>isPowerOfTwo</name>
        <qualifiedname>castor::isPowerOfTwo</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/BitSize.hpp" line="52" column="23" bodyfile="CastorUtils/Miscellaneous/BitSize.hpp" bodystart="52" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a6e9d163b44d8965faf6fe4db2b133125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> <ref refid="d2/dd2/a02279_1ac8dca26c22640aed8eaed8fee3a45069" kindref="member">OutputStream</ref> &amp;</type>
        <definition>CU_API OutputStream &amp; castor::operator&lt;&lt;</definition>
        <argsstring>(OutputStream &amp;stream, CpuInformations const &amp;object)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type><ref refid="d2/dd2/a02279_1ac8dca26c22640aed8eaed8fee3a45069" kindref="member">OutputStream</ref> &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="dc/d65/a09371" kindref="compound">CpuInformations</ref> const &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
<para>Opérateur de flux de sortie. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Le flux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;objet à mettre dans le flux. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Le flux </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/CpuInformations.hpp" line="501" column="8" declfile="CastorUtils/Miscellaneous/CpuInformations.hpp" declline="501" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a2263474f6ef8e9598e7a9921d132022f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t castor::hashCombine32</definition>
        <argsstring>(uint32_t &amp;hash, T const &amp;rhs)</argsstring>
        <name>hashCombine32</name>
        <qualifiedname>castor::hashCombine32</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/Hash.hpp" line="15" column="17" bodyfile="CastorUtils/Miscellaneous/Hash.hpp" bodystart="15" bodyend="22"/>
        <referencedby refid="dc/d25/a09395_1a1b4e1cc981316c1dedc5295dd928a265" compoundref="dd/d14/a02201" startline="79" endline="82">castor::hashcomb::HashCombinerT&lt; HashT, std::enable_if_t&lt; std::is_same_v&lt; HashT, uint32_t &gt; &gt; &gt;::combine</referencedby>
        <referencedby refid="d6/dff/a09399_1a9f78931b51b2b00f43b126f87c4b6d27" compoundref="dd/d14/a02201" startline="95" endline="100">castor::hashcomb::HashCombinerT&lt; HashT, std::enable_if_t&lt; !std::is_same_v&lt; HashT, uint32_t &gt; &amp;&amp;sizeof(HashT)==4u &gt; &gt;::combine</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aaf5184006cf54bb4e195252c38b06439" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>uint32_t</type>
        <definition>uint32_t castor::hashCombinePtr32</definition>
        <argsstring>(uint32_t &amp;hash, T const &amp;rhs)</argsstring>
        <name>hashCombinePtr32</name>
        <qualifiedname>castor::hashCombinePtr32</qualifiedname>
        <param>
          <type>uint32_t &amp;</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/Hash.hpp" line="25" column="17" bodyfile="CastorUtils/Miscellaneous/Hash.hpp" bodystart="25" bodyend="32"/>
        <referencedby refid="dc/d25/a09395_1a02e469bd2f7cacca369db227b612e774" compoundref="dd/d14/a02201" startline="85" endline="88">castor::hashcomb::HashCombinerT&lt; HashT, std::enable_if_t&lt; std::is_same_v&lt; HashT, uint32_t &gt; &gt; &gt;::combinePtr</referencedby>
        <referencedby refid="d6/dff/a09399_1add3f9002c3656fa08cdd042d1d035042" compoundref="dd/d14/a02201" startline="103" endline="108">castor::hashcomb::HashCombinerT&lt; HashT, std::enable_if_t&lt; !std::is_same_v&lt; HashT, uint32_t &gt; &amp;&amp;sizeof(HashT)==4u &gt; &gt;::combinePtr</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a126d45fec9687f3742d40ae9f5e90c8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t castor::hashCombine64</definition>
        <argsstring>(uint64_t &amp;hash, T const &amp;rhs)</argsstring>
        <name>hashCombine64</name>
        <qualifiedname>castor::hashCombine64</qualifiedname>
        <param>
          <type>uint64_t &amp;</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/Hash.hpp" line="35" column="17" bodyfile="CastorUtils/Miscellaneous/Hash.hpp" bodystart="35" bodyend="50"/>
        <referencedby refid="da/de3/a09403_1a67fc70345bd678ec918ed08f49b8167c" compoundref="dd/d14/a02201" startline="115" endline="118">castor::hashcomb::HashCombinerT&lt; HashT, std::enable_if_t&lt; std::is_same_v&lt; HashT, uint64_t &gt; &gt; &gt;::combine</referencedby>
        <referencedby refid="dc/d2b/a09407_1a7c86e58f81d76e44a85f5e2327bbf505" compoundref="dd/d14/a02201" startline="131" endline="136">castor::hashcomb::HashCombinerT&lt; HashT, std::enable_if_t&lt; !std::is_same_v&lt; HashT, uint64_t &gt; &amp;&amp;sizeof(HashT)==8u &gt; &gt;::combine</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aacbab472d52d569f46859fcb543deb10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t castor::hashCombinePtr64</definition>
        <argsstring>(uint64_t &amp;hash, T const &amp;rhs)</argsstring>
        <name>hashCombinePtr64</name>
        <qualifiedname>castor::hashCombinePtr64</qualifiedname>
        <param>
          <type>uint64_t &amp;</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/Hash.hpp" line="53" column="17" bodyfile="CastorUtils/Miscellaneous/Hash.hpp" bodystart="53" bodyend="68"/>
        <referencedby refid="da/de3/a09403_1acacbd250fda52207134b23d00974d664" compoundref="dd/d14/a02201" startline="121" endline="124">castor::hashcomb::HashCombinerT&lt; HashT, std::enable_if_t&lt; std::is_same_v&lt; HashT, uint64_t &gt; &gt; &gt;::combinePtr</referencedby>
        <referencedby refid="dc/d2b/a09407_1a298138782f9d56b0a56c3a6e829bfe65" compoundref="dd/d14/a02201" startline="139" endline="144">castor::hashcomb::HashCombinerT&lt; HashT, std::enable_if_t&lt; !std::is_same_v&lt; HashT, uint64_t &gt; &amp;&amp;sizeof(HashT)==8u &gt; &gt;::combinePtr</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a59eb2590dc82741e57274e227ae97eed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t castor::hashCombine</definition>
        <argsstring>(size_t &amp;hash, T const &amp;rhs)</argsstring>
        <name>hashCombine</name>
        <qualifiedname>castor::hashCombine</qualifiedname>
        <param>
          <type>size_t &amp;</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/Hash.hpp" line="149" column="15" bodyfile="CastorUtils/Miscellaneous/Hash.hpp" bodystart="149" bodyend="153"/>
        <referencedby refid="df/d40/a06071_1ab19355b89e6976afeb4619851db807fb" compoundref="d2/d49/a01067" startline="258" endline="286">castor3d::InstantiatedPipelinesNodesT&lt; NodeT &gt;::emplace</referencedby>
        <referencedby refid="db/d00/a06095_1aa970e058bad35e2bd848af66e106d586" compoundref="d5/d67/a01070" startline="259" endline="289">castor3d::PipelinesNodesT&lt; NodeT &gt;::emplace</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a187dd132c2074b1620d1c130795473fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t castor::hashCombinePtr</definition>
        <argsstring>(size_t &amp;hash, T const &amp;rhs)</argsstring>
        <name>hashCombinePtr</name>
        <qualifiedname>castor::hashCombinePtr</qualifiedname>
        <param>
          <type>size_t &amp;</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/Hash.hpp" line="156" column="15" bodyfile="CastorUtils/Miscellaneous/Hash.hpp" bodystart="156" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a3838f4b8c619fe7ee4ce6bdaa86b4f81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d2/d31/a01811_1a85ca3bafa261a7f2ece738b559d8bbb7" kindref="member">CU_API</ref> void</type>
        <definition>CU_API void castor::getLocaltime</definition>
        <argsstring>(std::tm *tm, time_t const *time)</argsstring>
        <name>getLocaltime</name>
        <qualifiedname>castor::getLocaltime</qualifiedname>
        <param>
          <type>std::tm *</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>time_t const *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>localtime </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/Utils.hpp" line="59" column="13" declfile="CastorUtils/Miscellaneous/Utils.hpp" declline="59" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a054814baee029f18376900175a65f1d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t castor::getCountOf</definition>
        <argsstring>(T const(&amp;data)[N])</argsstring>
        <name>getCountOf</name>
        <qualifiedname>castor::getCountOf</qualifiedname>
        <param>
          <type>T const(&amp;)</type>
          <declname>data</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Le nombre d&apos;éléments du tampon. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Miscellaneous/Utils.hpp" line="67" column="15" bodyfile="CastorUtils/Miscellaneous/Utils.hpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1a5abb5c3143a2eaa28bc2173b3e3d0673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NoiseT</type>
          </param>
        </templateparamlist>
        <type><ref refid="db/d9c/a09467" kindref="compound">FractalNoiseT</ref>&lt; NoiseT &gt;</type>
        <definition>FractalNoiseT&lt; NoiseT &gt; castor::makeFractalNoise</definition>
        <argsstring>(uint32_t octaves, NoiseT noise)</argsstring>
        <name>makeFractalNoise</name>
        <qualifiedname>castor::makeFractalNoise</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>octaves</declname>
        </param>
        <param>
          <type>NoiseT</type>
          <declname>noise</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Noise/FractalNoise.hpp" line="63" column="15" bodyfile="CastorUtils/Noise/FractalNoise.hpp" bodystart="63" bodyend="68"/>
        <references refid="d2/dd2/a02279_1a5abb5c3143a2eaa28bc2173b3e3d0673" compoundref="d7/da1/a02231" startline="63" endline="68">makeFractalNoise</references>
        <referencedby refid="d2/dd2/a02279_1a5abb5c3143a2eaa28bc2173b3e3d0673" compoundref="d7/da1/a02231" startline="63" endline="68">makeFractalNoise</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1af28c8fccf375fc3036de98ad1d52fe73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; CharType &gt; &amp;</type>
        <definition>std::basic_ostream&lt; CharType &gt; &amp; castor::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; CharType &gt; &amp;stream, format::Indent const &amp;ind)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; CharType &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="d4/d2d/a09539" kindref="compound">format::Indent</ref> const &amp;</type>
          <declname>ind</declname>
        </param>
        <briefdescription>
<para>Opérateur de flux. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Initialise le flux afin de pouvoir l&apos;indenter </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Le flux </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ind</parametername>
</parameternamelist>
<parameterdescription>
<para>La valeur d&apos;indentation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Stream/StreamIndentManipulators.hpp" line="1" column="0" bodyfile="CastorUtils/Stream/StreamIndentManipulators.hpp" bodystart="136" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="d2/dd2/a02279_1aa6cc37e007edb6617cac38f424b7535d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>typename PrefixType</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; CharType &gt; &amp;</type>
        <definition>std::basic_ostream&lt; CharType &gt; &amp; castor::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; CharType &gt; &amp;stream, format::BasePrefixer&lt; CharType, PrefixType &gt; const &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>castor::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; CharType &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="d0/ddd/a09551" kindref="compound">format::BasePrefixer</ref>&lt; CharType, PrefixType &gt; const &amp;</type>
        </param>
        <briefdescription>
<para>Opérateur de flux. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Initialise le flux afin de pouvoir le préfixer. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Le flux. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CastorUtils/Stream/StreamPrefixManipulators.hpp" line="1" column="0" bodyfile="CastorUtils/Stream/StreamPrefixManipulators.hpp" bodystart="106" bodyend="116"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Castor3D/Cache/AnimatedObjectGroupCache.hpp" line="21" column="1"/>
  </compounddef>
</doxygen>

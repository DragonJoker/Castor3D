<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="d7/da1/a02290" kind="class" language="C++" prot="public">
    <compoundname>castor3d::UniformBufferT</compoundname>
    <basecompoundref refid="d9/dfc/a02326" prot="public" virt="non-virtual">castor3d::UniformBufferBase</basecompoundref>
    <includes local="no">UniformBuffer.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>DataT</declname>
        <defname>DataT</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d7/da1/a02290_1ae2136477cd64fd42ce2a6a5c0a69d00c" prot="private" static="no" mutable="no">
        <type>std::vector&lt; DataT &gt;</type>
        <definition>std::vector&lt; DataT &gt; castor3d::UniformBufferT&lt; DataT &gt;::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/UniformBuffer.hpp" line="245" column="1" bodyfile="Buffer/UniformBuffer.hpp" bodystart="245" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d7/da1/a02290_1ae7fba1155fbe6b61a636fbffd4c16fe4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>castor3d::UniformBufferT&lt; DataT &gt;::UniformBufferT</definition>
        <argsstring>(RenderSystem const &amp;renderSystem, VkDeviceSize count, VkBufferUsageFlags usage, VkMemoryPropertyFlags flags, castor::String debugName, ashes::QueueShare sharingMode={})</argsstring>
        <name>UniformBufferT</name>
        <param>
          <type><ref refid="d1/d9a/a04618" kindref="compound">RenderSystem</ref> const &amp;</type>
          <declname>renderSystem</declname>
        </param>
        <param>
          <type>VkDeviceSize</type>
          <declname>count</declname>
        </param>
        <param>
          <type>VkBufferUsageFlags</type>
          <declname>usage</declname>
        </param>
        <param>
          <type>VkMemoryPropertyFlags</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>castor::String</type>
          <declname>debugName</declname>
        </param>
        <param>
          <type>ashes::QueueShare</type>
          <declname>sharingMode</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">renderSystem</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="d1/d9a/a04618" kindref="compound">RenderSystem</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The elements count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">usage</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer usage flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer memory flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">debugName</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer debug name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sharingMode</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer sharing mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/UniformBuffer.hpp" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d7/da1/a02290_1aebbeac4f41693ba895b792e884842be4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void castor3d::UniformBufferT&lt; DataT &gt;::upload</definition>
        <argsstring>(ashes::BufferBase const &amp;stagingBuffer, ashes::Queue const &amp;queue, ashes::CommandPool const &amp;commandPool, uint32_t offset, VkPipelineStageFlags flags) const</argsstring>
        <name>upload</name>
        <param>
          <type>ashes::BufferBase const &amp;</type>
          <declname>stagingBuffer</declname>
        </param>
        <param>
          <type>ashes::Queue const &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>ashes::CommandPool const &amp;</type>
          <declname>commandPool</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>VkPipelineStageFlags</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Transfers data to the GPU buffer from RAM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Transfers data from buffer[offset*sizeof( T )] to buffer[(offset+count-1)*sizeof( T )]. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stagingBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The staging buffer used to transfer the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue used to execute the transfer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">commandPool</parametername>
</parameternamelist>
<parameterdescription>
<para>The command pool on which the command buffer will be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The start offset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipeline stage flags for the out memory barrier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/UniformBuffer.hpp" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d7/da1/a02290_1a4b052e889fbcb8a740b0f1970167301c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void castor3d::UniformBufferT&lt; DataT &gt;::upload</definition>
        <argsstring>(ashes::BufferBase const &amp;stagingBuffer, ashes::CommandBuffer const &amp;commandBuffer, uint32_t offset, VkPipelineStageFlags flags) const</argsstring>
        <name>upload</name>
        <param>
          <type>ashes::BufferBase const &amp;</type>
          <declname>stagingBuffer</declname>
        </param>
        <param>
          <type>ashes::CommandBuffer const &amp;</type>
          <declname>commandBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>VkPipelineStageFlags</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Transfers data to the GPU buffer from RAM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Transfers data from buffer[offset*sizeof( T )] to buffer[(offset+count-1)*sizeof( T )]. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stagingBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The staging buffer used to transfer the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">commandBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The command buffer on which the transfer commands are recorded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The start offset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipeline stage flags for the out memory barrier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/UniformBuffer.hpp" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d7/da1/a02290_1a98d8ae7324322ed164bfd5dfe664bf83" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void castor3d::UniformBufferT&lt; DataT &gt;::upload</definition>
        <argsstring>(ashes::BufferBase const &amp;stagingBuffer, ashes::Queue const &amp;queue, ashes::CommandPool const &amp;commandPool, uint32_t offset, VkPipelineStageFlags flags, RenderPassTimer const &amp;timer, uint32_t index) const</argsstring>
        <name>upload</name>
        <param>
          <type>ashes::BufferBase const &amp;</type>
          <declname>stagingBuffer</declname>
        </param>
        <param>
          <type>ashes::Queue const &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>ashes::CommandPool const &amp;</type>
          <declname>commandPool</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>VkPipelineStageFlags</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="d6/d76/a04606" kindref="compound">RenderPassTimer</ref> const &amp;</type>
          <declname>timer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Transfers data to the GPU buffer from RAM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Transfers data from buffer[offset*sizeof( T )] to buffer[(offset+count-1)*sizeof( T )]. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stagingBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The staging buffer used to transfer the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue used to execute the transfer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">commandPool</parametername>
</parameternamelist>
<parameterdescription>
<para>The command pool on which the command buffer will be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The start offset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipeline stage flags for the out memory barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timer</parametername>
</parameternamelist>
<parameterdescription>
<para>The render pass timer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>The render pass index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/UniformBuffer.hpp" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d7/da1/a02290_1afa95d422725804438a0579e9d214df17" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void castor3d::UniformBufferT&lt; DataT &gt;::upload</definition>
        <argsstring>(ashes::BufferBase const &amp;stagingBuffer, ashes::CommandBuffer const &amp;commandBuffer, uint32_t offset, VkPipelineStageFlags flags, RenderPassTimer const &amp;timer, uint32_t index) const</argsstring>
        <name>upload</name>
        <param>
          <type>ashes::BufferBase const &amp;</type>
          <declname>stagingBuffer</declname>
        </param>
        <param>
          <type>ashes::CommandBuffer const &amp;</type>
          <declname>commandBuffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>VkPipelineStageFlags</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="d6/d76/a04606" kindref="compound">RenderPassTimer</ref> const &amp;</type>
          <declname>timer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Transfers data to the GPU buffer from RAM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Transfers data from buffer[offset*sizeof( T )] to buffer[(offset+count-1)*sizeof( T )]. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stagingBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The staging buffer used to transfer the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">commandBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The command buffer on which the transfer commands are recorded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The start offset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipeline stage flags for the out memory barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timer</parametername>
</parameternamelist>
<parameterdescription>
<para>The render pass timer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>The render pass index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/UniformBuffer.hpp" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d7/da1/a02290_1abd746563b016741ef2ef499766a66de0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void castor3d::UniformBufferT&lt; DataT &gt;::upload</definition>
        <argsstring>(VkDeviceSize offset=0u, VkDeviceSize range=1u) const</argsstring>
        <name>upload</name>
        <param>
          <type>VkDeviceSize</type>
          <declname>offset</declname>
          <defval>0u</defval>
        </param>
        <param>
          <type>VkDeviceSize</type>
          <declname>range</declname>
          <defval>1u</defval>
        </param>
        <briefdescription>
<para>Uploads the buffer data to VRAM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in elements from which buffer memory is mapped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">range</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements to map. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/UniformBuffer.hpp" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d7/da1/a02290_1a9d3879e918169d23f9ebcea7ad38a3f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void castor3d::UniformBufferT&lt; DataT &gt;::download</definition>
        <argsstring>(ashes::BufferBase const &amp;stagingBuffer, ashes::Queue const &amp;queue, ashes::CommandPool const &amp;commandPool, uint32_t offset, VkPipelineStageFlags flags, RenderPassTimer const &amp;timer, uint32_t index)</argsstring>
        <name>download</name>
        <param>
          <type>ashes::BufferBase const &amp;</type>
          <declname>stagingBuffer</declname>
        </param>
        <param>
          <type>ashes::Queue const &amp;</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>ashes::CommandPool const &amp;</type>
          <declname>commandPool</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>VkPipelineStageFlags</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="d6/d76/a04606" kindref="compound">RenderPassTimer</ref> const &amp;</type>
          <declname>timer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Transfers data from the GPU buffer to RAM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="remark"><para>Transfers data from buffer[offset*sizeof( T )] to buffer[(offset+count-1)*sizeof( T )]. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stagingBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The staging buffer used to transfer the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue used to execute the transfer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">commandPool</parametername>
</parameternamelist>
<parameterdescription>
<para>The command pool on which the command buffer will be created. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The start offset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The pipeline stage flags for the out memory barrier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timer</parametername>
</parameternamelist>
<parameterdescription>
<para>The render pass timer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>The render pass index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/UniformBuffer.hpp" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d7/da1/a02290_1a6e4e165dbda4aa7279cc94351706515a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>DataT const  &amp;</type>
        <definition>DataT const&amp; castor3d::UniformBufferT&lt; DataT &gt;::getData</definition>
        <argsstring>(VkDeviceSize index=0) const</argsstring>
        <name>getData</name>
        <param>
          <type>VkDeviceSize</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The N-th instance of the data. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>The instance index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/UniformBuffer.hpp" line="199" column="1" bodyfile="Buffer/UniformBuffer.hpp" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="d7/da1/a02290_1ad19b3aafc6317e3517d9858a7142f0ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>DataT &amp;</type>
        <definition>DataT&amp; castor3d::UniformBufferT&lt; DataT &gt;::getData</definition>
        <argsstring>(VkDeviceSize index=0)</argsstring>
        <name>getData</name>
        <param>
          <type>VkDeviceSize</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The N-th instance of the data. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>The instance index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/UniformBuffer.hpp" line="215" column="1" bodyfile="Buffer/UniformBuffer.hpp" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="d7/da1/a02290_1a9debd8a4b6a76bcd58ef99ab85c5f475" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; DataT &gt; const  &amp;</type>
        <definition>std::vector&lt; DataT &gt; const&amp; castor3d::UniformBufferT&lt; DataT &gt;::getDatas</definition>
        <argsstring>() const</argsstring>
        <name>getDatas</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/UniformBuffer.hpp" line="227" column="1" bodyfile="Buffer/UniformBuffer.hpp" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="d7/da1/a02290_1a3d6b39cf1909c98753fd7a4fc96cf21a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; DataT &gt; &amp;</type>
        <definition>std::vector&lt; DataT &gt;&amp; castor3d::UniformBufferT&lt; DataT &gt;::getDatas</definition>
        <argsstring>()</argsstring>
        <name>getDatas</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/UniformBuffer.hpp" line="239" column="1" bodyfile="Buffer/UniformBuffer.hpp" bodystart="239" bodyend="242"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A uniform typed buffer, than can contain multiple sub-buffers. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4629">
        <label>castor3d::UniformBufferT&lt; DataT &gt;</label>
        <link refid="d7/da1/a02290"/>
        <childnode refid="4630" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4631">
        <label>castor3d::UniformBufferT&lt; castor3d::ModelMatrixUboConfiguration &gt;</label>
        <link refid="d7/da1/a02290"/>
        <childnode refid="4629" relation="template-instance">
          <edgelabel>&lt; castor3d::ModelMatrixUboConfiguration &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4630">
        <label>castor3d::UniformBufferBase</label>
        <link refid="d9/dfc/a02326"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4632">
        <label>castor3d::UniformBufferT&lt; DataT &gt;</label>
        <link refid="d7/da1/a02290"/>
        <childnode refid="4633" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4633">
        <label>castor3d::UniformBufferBase</label>
        <link refid="d9/dfc/a02326"/>
      </node>
    </collaborationgraph>
    <location file="Buffer/BufferModule.hpp" line="85" column="1" bodyfile="Buffer/BufferModule.hpp" bodystart="85" bodyend="-1"/>
    <listofallmembers>
      <member refid="d9/dfc/a02326_1a2d44961d8428a660fc1e11d919c2e328" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>allocate</name></member>
      <member refid="d9/dfc/a02326_1aa538b53f279b4dbc2257c5ed3c226a0a" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>cleanup</name></member>
      <member refid="d9/dfc/a02326_1a0a38a33c4cf17752bd406dd3fc8de34a" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>deallocate</name></member>
      <member refid="d7/da1/a02290_1a9d3879e918169d23f9ebcea7ad38a3f0" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>download</name></member>
      <member refid="d9/dfc/a02326_1a9df4ea0f0964de4c96ad0f1d1806b3ba" prot="public" virt="non-virtual" ambiguityscope="castor3d::UniformBufferBase::"><scope>castor3d::UniformBufferT</scope><name>download</name></member>
      <member refid="d9/dfc/a02326_1ae68a2107b906ad9fa82625c48e90d8b3" prot="public" virt="non-virtual" ambiguityscope="castor3d::UniformBufferBase::"><scope>castor3d::UniformBufferT</scope><name>download</name></member>
      <member refid="d9/dfc/a02326_1a43cbde3c96b7517206de5d452bbd350e" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>getAlignedSize</name></member>
      <member refid="d9/dfc/a02326_1a7341067e4a6aae481fe65904cea1dced" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>getAlignedSize</name></member>
      <member refid="d9/dfc/a02326_1a0ca80ef559420e9ace5189cdbdef4313" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>getBuffer</name></member>
      <member refid="d9/dfc/a02326_1a3432122bab78987520afcb974394c02f" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>getBuffer</name></member>
      <member refid="d7/da1/a02290_1a6e4e165dbda4aa7279cc94351706515a" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>getData</name></member>
      <member refid="d7/da1/a02290_1ad19b3aafc6317e3517d9858a7142f0ed" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>getData</name></member>
      <member refid="d7/da1/a02290_1a9debd8a4b6a76bcd58ef99ab85c5f475" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>getDatas</name></member>
      <member refid="d7/da1/a02290_1a3d6b39cf1909c98753fd7a4fc96cf21a" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>getDatas</name></member>
      <member refid="d9/dfc/a02326_1a2f05a0079c76aa8e45427437b5a6342b" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>getElementSize</name></member>
      <member refid="d9/dfc/a02326_1af27b60f527e8b215abedea67baa9f17d" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>hasAvailable</name></member>
      <member refid="d9/dfc/a02326_1af7c01beed3624b041935b2d17e8f6c12" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>hasBuffer</name></member>
      <member refid="d9/dfc/a02326_1a2fe7805a14ce0d3bf0b178e66a20dbd9" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>initialise</name></member>
      <member refid="d9/dfc/a02326_1ad9d2c2daa90095d4109ff2032cb5d3d1" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>initialise</name></member>
      <member refid="d7/da1/a02290_1ae2136477cd64fd42ce2a6a5c0a69d00c" prot="private" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>m_data</name></member>
      <member refid="d9/dfc/a02326_1a0ddd5fa000a5ff5c0408b7099beff2ab" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>operator ashes::UniformBuffer &amp;</name></member>
      <member refid="d9/dfc/a02326_1ac620faacb633f017c5a85cd8e95f015e" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>operator ashes::UniformBuffer const &amp;</name></member>
      <member refid="d9/dfc/a02326_1a4acf1fef1cb1078d11b16d7f34803e74" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>UniformBufferBase</name></member>
      <member refid="d7/da1/a02290_1ae7fba1155fbe6b61a636fbffd4c16fe4" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>UniformBufferT</name></member>
      <member refid="d7/da1/a02290_1aebbeac4f41693ba895b792e884842be4" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>upload</name></member>
      <member refid="d7/da1/a02290_1a4b052e889fbcb8a740b0f1970167301c" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>upload</name></member>
      <member refid="d7/da1/a02290_1a98d8ae7324322ed164bfd5dfe664bf83" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>upload</name></member>
      <member refid="d7/da1/a02290_1afa95d422725804438a0579e9d214df17" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>upload</name></member>
      <member refid="d7/da1/a02290_1abd746563b016741ef2ef499766a66de0" prot="public" virt="non-virtual"><scope>castor3d::UniformBufferT</scope><name>upload</name></member>
      <member refid="d9/dfc/a02326_1ad56ef47e3a77da41e7971ce6b9f76f48" prot="public" virt="non-virtual" ambiguityscope="castor3d::UniformBufferBase::"><scope>castor3d::UniformBufferT</scope><name>upload</name></member>
      <member refid="d9/dfc/a02326_1ab66278b315c90593aa870cd3ef04447c" prot="public" virt="non-virtual" ambiguityscope="castor3d::UniformBufferBase::"><scope>castor3d::UniformBufferT</scope><name>upload</name></member>
      <member refid="d9/dfc/a02326_1a5932cec96bf8d905b7fbc5bee3d68004" prot="public" virt="non-virtual" ambiguityscope="castor3d::UniformBufferBase::"><scope>castor3d::UniformBufferT</scope><name>upload</name></member>
      <member refid="d9/dfc/a02326_1aabcfe5ba88e3e3ea931631f640bb8f80" prot="public" virt="non-virtual" ambiguityscope="castor3d::UniformBufferBase::"><scope>castor3d::UniformBufferT</scope><name>upload</name></member>
      <member refid="d9/dfc/a02326_1a413dca3089df0c865f9318d6b024ce5c" prot="public" virt="non-virtual" ambiguityscope="castor3d::UniformBufferBase::"><scope>castor3d::UniformBufferT</scope><name>upload</name></member>
      <member refid="d9/dfc/a02326_1a345e860d8a45dfd6a9b46ccafff2439e" prot="public" virt="non-virtual" ambiguityscope="castor3d::UniformBufferBase::"><scope>castor3d::UniformBufferT</scope><name>upload</name></member>
      <member refid="d9/dfc/a02326_1ac96c06c668e5977423577df85c975efd" prot="public" virt="non-virtual" ambiguityscope="castor3d::UniformBufferBase::"><scope>castor3d::UniformBufferT</scope><name>upload</name></member>
      <member refid="d9/dfc/a02326_1ada0a54c9bc738ea2b5e54af678f462d4" prot="public" virt="non-virtual" ambiguityscope="castor3d::UniformBufferBase::"><scope>castor3d::UniformBufferT</scope><name>upload</name></member>
      <member refid="d9/dfc/a02326_1aa739acefda291cda14d4b4c5b06ecf9a" prot="public" virt="virtual"><scope>castor3d::UniformBufferT</scope><name>~UniformBufferBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

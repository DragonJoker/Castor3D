/*!
 *\~english
 *\page rendering Render explanations
 *\section general General
 *The rendering in Castor3D is splitted in several passes:<br />
 *<ul>
 *<li>Environment passes</li>
 *<li>Shadow passes</li>
 *<li>Deferred rendering for opaque objects</li>
 *<li>Background pass</li>
 *<li>Weighted Blended rendering for transparent objects</li>
 *</ul>
 *\image html render.png
 *<br />
 *<br />
 *\section environment Environment pass
 *This pass generates the environment map for one node that needs it.<br />
 *Note that multiple nodes can need a different environment map, thus trigger multiple environment passes.<br />
 *It is splitted in 3 specific passes:
 *<ul>
 *<li>Opaque pass (using forward rendering)</li>
 *<li>Background pass</li>
 *<li>Transparent pass (using forward rendering)</li>
 *</ul>
 *Its result is stored into a cube map.<br />
 *\image html environment_pass.png
 *<br />
 *<br />
 *\section shadow Shadow pass
 *This pass generates shadow map for one light source.<br />
 *The engine currently supports three light source type, with their specific shadow passes:
 *<ul>
 *<li>Directional: This pass generates cascaded shadow maps (with a maximum of 4 cascades)</li>
 *<li>Point: This pass renders to a cube map, and is actually splitted in 6 passes (one per cube face)</li>
 *<li>Spot: This pass renders to a single 2D texture</li>
 *</ul>
 *That being said, it is also important to note that point and spot shadow maps are stored in texture arrays (Cube an 2D, respectively).<br />
 *The cascades of the directional shadow map are also stored in a 2D texture array.<br />
 *It allows to limit the number of texture bindings, especially for passes using forward rendering.<br />
 *Since Castor3D allows the user to choose the shadows type he wants (Raw, PCF or VSM), the results are always stored in textures using the R32G32_SFLOAT pixel format.<br />
 *\image html shadow_pass.png
 *<br />
 *<br />
 *\section opaque Deferred rendering
 *This pass is the most complex one, it contains multiple subpasses:
 *<ul>
 *<li>Opaque pass</li>
 *<li>SSAO pass</li>
 *<li>Subsurface Scattering pass</li>
 *<li>Lighting pass</li>
 *<li>Reflection pass</li>
 *</ul>
 *<br />
 *\image html deferred_rendering.png
 *<br />
 *\subsection def_opaque Opaque pass
 *This pass is the geometry pass, generating the buffers needed for the other subpasses.<br />
 *Castor3D uses currently 5 (+1) buffers:
 *<ul>
 *<li><b>Depth buffer</b><br />
 *Uses D24_UNORM_S8_UINT pixel format.</li>
 *<li><b>Data 1 buffer</b><br />
 *Uses R32G32B32A32_SFLOAT pixel format.<br />
 *The RGB channels store the world space normal.<br />
 *The A channel stores object material flags.</li>
 *<li><b>Data 2 buffer</b><br />
 *Uses R16G16B16A16_SFLOAT pixel format.<br />
 *The RGB channels store the diffuse/albedo colour.<br />
 *The A channel is used to store:
 *<ul>
 *<li>Shininess in Phong</li>
 *<li>Glossiness in PBR Specular/Glossiness</li>
 *<li>Unused in PBR Metallic/Roughness</li>
 *</ul></li>
 *<li><b>Data 3 buffer</b><br />
 *Uses R16G16B16A16_SFLOAT pixel format<br />
 *The RGB channels store the specular colour, in pipelines that need it.<br />
 *For PBR Metallic/Roughness, R stores the Metallic value, G stores the Roughness value, B is unused.<br />
 *The A channel stores the Ambient Occlusion value.</li>
 *<li><b>Data 4 buffer</b><br />
 *Uses R16G16B16A16_SFLOAT pixel format<br />
 *The RGB channels store the emissive colour.<br />
 *The A channel stores the transmittance value.</li>
 *<li><b>Data 5 buffer</b><br />
 *Uses R16G16B16A16_SFLOAT pixel format<br />
 *The RG channels store the velocity value (computed with previous frame).<br />
 *The B channel stores the material index.<br />
 *The A channel is unused.</li>
 *</ul>
 *<br />
 *\subsection def_ssao SSAO pass
 *This pass implements the Scalable Ambient Obscurance algorithm described here: https://research.nvidia.com/sites/default/files/pubs/2012-06_Scalable-Ambient-Obscurance/McGuire12SAO.pdf<br />
 *It is thus splitted in three subpasses:
 *<ul>
 *<li>Linearise depth pass</li>
 *<li>Raw SSAO pass</li>
 *<li>Blur pass</li>
 *</ul>
 *<br />
 *\subsection def_lighting Lighting pass
 *This pass is actually a group of lighting subpasses, one subpass per light source.<br />
 *If the light source generates shadows, its shadow map will be used, to produce shadows of the type chosen by the user.<br />
 *The point and spot light passes first run a stencil pass, to reduce their effect area.<br />
 *<br />
 *\subsection def_sssss Subsurface Scattering pass
 *This pass implements the Screen-Space Subsurface Scattering algorithm described here : http://www.iryoku.com/sssss/<br />
 *It is thus splitted in four passes:
 *<ul>
 *<li>Three successive blur passes</li>
 *<li>A combination pass</li>
 *</ul>
 *<br />
 *\subsection def_refl Reflection pass
 *This pass combines the results of all the previous passes:<br />
 *<ul>
 *<li>It applies the ambient factor with provided ambient occlusion.</li>
 *<li>It applies the diffuse and specular results from lighting pass.</li>
 *<li>It also applies reflection and/or refraction, using the skybox or the provided environment maps.</li>
 *<li>For PBR pipelines, it also applies the IBL, if no reflection is asked on the processed fragment.</li>
 *<li>If the scene needs some fog, it is applied here.</li>
 *</ul>
 *<br />
 *\section background Background pass
 *This pass is the most simple one, it just draws the scene's skybox.<br />
 *It is performed after the opaque objects pass to have the benefits of a depth test, after the depth buffer is filled by the opaque pass.<br />
 *<br />
 *<br />
 *\section transparent Weighted Blended rendering
 *This pass implements the blended weighted rendering described here: http://jcgt.org/published/0002/02/09/paper.pdf<br />
 *It is thus splitted in two passes:
 *<ul>
 *<li>Accumulation pass</li>
 *<li>Resolve pass</li>
 *</ul>
 *\image html weighted_blended_rendering.png
 *<br />
 *
 *
 *\~french
 *\page rendering Explications du rendu
 *\section general Général
 *Le rendu dans Castor3D est découpé en plusieurs passes.<br />
 *<ul>
 *<li>Passes d'environment</li>
 *<li>Passes d'ombres</li>
 *<li>Deferred rendering pour les objets opaques</li>
 *<li>Passe de background</li>
 *<li>Weighted Blended rendering pour les objets transparents</li>
 *</ul>
 *\image html render.png
 *<br />
 *<br />
 *\section environment Passe d'environment
 *Cette passe génère la texture d'environnement pour un noeud en ayant besoin.<br />
 *Notez que plusieurs noeuds peuvent avoir besoin de textures d'environnement différentes, générant ainsi plusieurs passes d'environnement.<br />
 *Elle est divisée en 3 passes distinctes:
 *<ul>
 *<li>Passe opaque (utilisant le forward rendering)</li>
 *<li>Passe de background</li>
 *<li>Passe transparente (utilisant le forward rendering)</li>
 *</ul>
 *Son résultat est stocké dans une cube map.<br />
 *\image html environment_pass.png
 *<br />
 *<br />
 *\section shadow Passe d'ombres
 *Cette passe génère la texture d'ombres pour une source lumineuse.<br />
 *Le moteur supporte pour l'instant trois types de sources lumineuses, ayant leur passe d'ombres spécifique :
 *<ul>
 *<li>Directionelle: Cette passe génère des cascaded shadow maps (avec un maximum de 4 cascades)</li>
 *<li>Omnidirectionnelle: Cette passe dessine dans une cube map, et est donc divisée en 6 passes (une par face du cube)</li>
 *<li>Projecteur: Cette passe dessine dans une simple texture 2D</li>
 *</ul>
 *Cela dit, il est important de noter que les shadow maps omnidirectionnelle et projecteur sont stockées dans des texture arrays (respectivement Cube et 2D).<br />
 *Les cascades de la shadow map directionnelle sont elles aussi stockées dans un texture 2D array.<br />
 *Cela permet de limiter le nombre de bindings, notamment lors des passes utilisant le forward rendering.<br />
 *Comme Castor3D permet à l'utilisateur de choisir le type d'ombres qu'il souhaite (Raw, PCF or VSM), Les résultats sont toujours stockés dans des textures au format R32G32_SFLOAT.<br />
 *\image html shadow_pass.png
 *<br />
 *<br />
 *\section opaque Deferred rendering
 *Cette passe de rendu est la plus complexe, et est divisée en de multiples passes:
 *<ul>
 *<li>Passe opaque</li>
 *<li>Passe SSAO</li>
 *<li>Passe de Subsurface Scattering</li>
 *<li>Passe d'éclairage</li>
 *<li>Passe de réflexions</li>
 *</ul>
 *<br />
 *\image html deferred_rendering.png
 *<br />
 *\subsection def_opaque Passe opaque
 *Cette passe est la geometry pass, et génère les buffers dont les autres passes ont besoin.<br />
 *Castor3D utilise actuellement 5 (+1) buffers :
 *<ul>
 *<li><b>Depth buffer</b><br />
 *Utilise le format D24_UNORM_S8_UINT.</li>
 *<li><b>Data 1 buffer</b><br />
 *Utilise le format R32G32B32A32_SFLOAT.<br />
 *Les canaux RGB stockent la normale en coordonnées monde.<br />
 *Le canal A stocke les flags de matériau de l'objet.</li>
 *<li><b>Data 2 buffer</b><br />
 *Utilise le format R16G16B16A16_SFLOAT.<br />
 *Les canaux RGB stockent la couleur diffuse/albedo.<br />
 *Le canal A est utilisé pour stocker:
 *<ul>
 *<li>La Shininess en Phong</li>
 *<li>La Glossiness en PBR Specular/Glossiness</li>
 *<li>Inutilisé en PBR Metallic/Roughness</li>
 *</ul></li>
 *<li><b>Data 3 buffer</b><br />
 *Utilise le format R16G16B16A16_SFLOAT.<br />
 *Les canaux RGB stockent la couleur spéculaire, pour les pipelines en ayant besoin.<br />
 *Pour le PBR Metallic/Roughness, R stocke la valeur Metallic, G stocke la valeur de Roughness, B est inutilisé.<br />
 *Le canal A stocke la valeur d'Ambient Occlusion.</li>
 *<li><b>Data 4 buffer</b><br />
 *Utilise le format R16G16B16A16_SFLOAT.<br />
 *Les canaux RGB stockent la couleur émissive.<br />
 *Le canal A stocke la valeur de transmittance.</li>
 *<li><b>Data 5 buffer</b><br />
 *Utilise le format R16G16B16A16_SFLOAT.<br />
 *Les canaux RG stockent la valeur de vélocité (calculée avec la frame précédente).<br />
 *Le canal B stocke l'indice du matériau.<br />
 *Le canal A est inutilisé.</li>
 *</ul>
 *<br />
 *\subsection def_ssao Passe SSAO
 *Cette passe implémente l'algorithme Scalable Ambient Obscurance algorithm décrit ici : https://research.nvidia.com/sites/default/files/pubs/2012-06_Scalable-Ambient-Obscurance/McGuire12SAO.pdf<br />
 *Elle est donc scindée en 3 sous-passes :
 *<ul>
 *<li>Passe de linéarisation de la profondeur</li>
 *<li>Pass de SSAO brut</li>
 *<li>Pass de flou</li>
 *</ul>
 *<br />
 *\subsection def_lighting Passe d'éclairage
 *Cette passe est en fait un ensemble de sous-passes d'éclairage, une par source lumineuse.<br />
 *Si la source lumineuse génère des ombres, sa shadow map sera utilisée, pour produire les ombres choisies par l'utilisateur.<br />
 *Les sources omnidirectionnelles et projecteurs effectuent d'abord une passe de stencil, afin de déterminer leur zone d'application.<br />
 *<br />
 *\subsection def_sssss Passe Subsurface Scattering
 *Cette passe implémente l'algorithme de Screen-Space Subsurface Scattering décrit ici : http://www.iryoku.com/sssss/<br />
 *Elle est donc scindée en 4 sous-passes :
 *<ul>
 *<li>Trois passes de blur successives</li>
 *<li>Une passe de combinaison</li>
 *</ul>
 *<br />
 *\subsection def_refl Passe de réflexions
 *Cette passe combine les résultats des passes précédentes :<br />
 *<ul>
 *<li>Elle applique le facteur d'ambiant avec l'occlusion ambiante fournie.</li>
 *<li>Elle applique les résultats diffus et spéculaire de la passe d'éclairage.</li>
 *<li>Elle applique aussi la réflexion et/ou la réfraction, en utilisant la skybox ou les environment maps fournies.</li>
 *<li>Pour les pipelines PBR, elle applique aussi l'IBL, si aucune réflexion n'est demandée pour le fragment traité.</li>
 *<li>Si la scène a besoin de brouillard, il est appliqué ici.</li>
 *</ul>
 *<br />
 *\section background Passe de background
 *Cette passe est la plus simple, il s'agit juste de dessiner la skybox de la scène.<br />
 *Elle est appliquée après la passe de rendu des objets opaques afin de profiter du depth test, avec le depth buffer rempli par la passe opaque.<br />
 *<br />
 *<br />
 *\section transparent Weighted Blended rendering
 *Cette passe implémente le blended weighted rendering décrit ici : http://jcgt.org/published/0002/02/09/paper.pdf<br />
 *Elle est donc scindée en deux passes :
 *<ul>
 *<li>Accumulation pass</li>
 *<li>Resolve pass</li>
 *</ul>
 *\image html weighted_blended_rendering.png
 *<br />
 */
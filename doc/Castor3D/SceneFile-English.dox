/*!
 *\~english
 *\page scenefile CSCN File Format
 *CSCN files are easily editable text files (since the syntax is understood).<br />
 *The data types used in scene files are these ones :<br />
 *<ul>
 *<li><em>boolean</em> : a boolean (<em>true</em> or <em>false</em>).</li>
 *<li><em>int</em> : a simple integer.</li>
 *<li><em>mask_1</em> : an hexadecimal integer defining a mask for one component from a colour (0x000000FF, for instance).</li>
 *<li><em>mask_3</em> : an hexadecimal integer defining a mask for three components from a colour  (0x00FFFFFF, for instance).</li>
 *<li><em>real</em> : a floating point number, using dot ( . ) as the decimals separator.</li>
 *<li><em>2, 3, 4 ints</em> : 2, 3 or 4 integers, separated by commas ( , ) or spaces ( ).</li>
 *<li><em>2, 3, 4 reals</em> : 2, 3 or 4 floating point numbers, separated by commas ( , ) or spaces ( ).</li>
 *<li><em>size</em> : 2 integers greater than or equal to 0.</li>
 *<li><em>2x2, 3x3, 4x4 reals matrix</em> : 2, 3 or 4 groups separated by semi colons ( ; ) of 2, 3 or 4 floating point numbers separated by commas ( , ) or spaces ( ).</li>
 *<li><em>rgb_colour</em> : the RGB components of colour, expressed in floating point numbers between 0.0 and 1.0.</li>
 *<li><em>rgba_colour</em> : the RGBA components of colour, expressed in floating point numbers between 0.0 and 1.0.</li>
 *<li><em>rgb_hdr_colour</em> : the RGB components of colour, expressed in floating point numbers greater than or equal to 0.0.</li>
 *<li><em>rgba_hdr_colour</em> : the RGBA components of colour, expressed in floating point numbers greater than or equal to 0.0.</li>
 *<li><em>value</em> : a string corresponding to a predefined value.</li>
 *<li><em>name</em> : a string, wrapped into double quotes ( ‘&quot; ).</li>
 *<li><em>file</em> : a string, wrapped into double quotes ( ‘&quot; ), containing a file name and path.</li>
 *<li><em>folder</em> : a string, wrapped into double quotes ( ‘&quot; ), containing a folder path.</li>
 *</ul>
 *<br />
 *<br />
 *\section description Description
 *The file is split into sections, defined as follows :<br />
 *<pre><code>[section_type] &quot;[section_name]&quot;
 *{
 *    // Section description
 *}</code></pre>
 *Example:<br />
 *<pre><code>light &quot;Light0&quot;
 *{
 *    type directional
 *    colour 1.0 1.0 1.0
 *    intensity 0.8 1.0
 *}</code></pre>
 *Some sections can have child subsections :<br />
 *<pre><code>material &quot;Bronze&quot;
 *{
 *    pass
 *    {
 *        ambient 0.2125 0.1275 0.054
 *        diffuse 0.714 0.4284 0.12144
 *        emissive 0.0
 *        specular 0.393548 0.271906 0.166721
 *        shininess 25.6
 *    }
 *}</code></pre>
 *<br />
 *<br />
 *\section section_list Sections list
 *The possible sections are the following:<br />
 *<ol>
 *<li><b>sampler</b><br />
 *Defines a texture sampler object.<br /></li>
 *<li><b>material</b><br />
 *Defines a material.<br /></li>
 *<li><b>mesh</b><br />
 *Defines a mesh.<br /></li>
 *<li><b>font</b><br />
 *Defines a font used in text overlays.<br /></li>
 *<li><b>window</b><br />
 *Defines a render window.<br /></li>
 *<li><b>panel_overlay</b><br />
 *Defines a simple panel overlay.<br /></li>
 *<li><b>border_panel_overlay</b><br />
 *Defines a panel overlay with a border.<br /></li>
 *<li><b>text_overlay</b><br />
 *Defines a panel overlay with a text.<br /></li>
 *<li><b>scene</b><br />
 *Defines a whole scene.<br /></li>
 *</ol>
 *<br />
 *<br />
 *\section section_sampler Section sampler
 *<ol>
 *<li><p><b>min_filter</b> : <em>value</em></p>
 *Value used for minification function. The possible values are :<br />
 *<ul>
 *<li><p><em>linear</em> : linear interpolation.</p></li>
 *<li><p><em>nearest</em> : no interpolation.</p></li>
 *</ul></li>
 *<li><p><b>mag_filter</b> : <em>value</em></p>
 *Value used for magnification function. The possible values are :<br />
 *<ul>
 *<li><p><em>linear</em> : linear interpolation.</p></li>
 *<li><p><em>nearest</em> : no interpolation.</p></li>
 *</ul></li>
 *<li><p><b>mip_filter</b> : <em>value</em></p>
 *Value used for mipmapping function. The possible values are :<br />
 *<ul>
 *<li><p><em>linear</em> : linear interpolation.</p></li>
 *<li><p><em>nearest</em> : no interpolation.</p></li>
 *</ul></li>
 *<li><p><b>min_lod</b> : <em>real</em></p>
 *Defines minimum level of detail value.<br /></li>
 *<li><p><b>max_lod</b> : <em>real</em></p>
 *Defines maximum level of detail value.<br /></li>
 *<li><p><b>lod_bias</b> : <em>real</em></p>
 *Defines the base MIP-Level.<br /></li>
 *<li><p><b>u_wrap_mode</b> : <em>value</em></p>
 *Defines the wrapping mode of the texture, for the U component. The possible values are :<br />
 *<ul>
 *<li><p><em>repeat</em> : The texture is repeated.</p></li>
 *<li><p><em>mirrored_repeat</em> : The texture is repeated, each instance of 2 being the mirror of the other one.</p></li>
 *<li><p><em>clamp_to_border</em> : The texture is stretched, the object edge colour is defined as the texture edge colour.</p></li>
 *<li><p><em>clamp_to_edge</em> : The texture is stretched, the object edge colour is defined as the average of the texture edge colour and the border colour.</p></li>
 *</ul></li>
 *<li><p><b>v_wrap_mode</b> : <em>value</em></p>
 *Defines the wrapping mode of the texture, for the V component. The possible values are :<br />
 *<ul>
 *<li><p><em>repeat</em> : The texture is repeated.</p></li>
 *<li><p><em>mirrored_repeat</em> : The texture is repeated, each instance of 2 being the mirror of the other one.</p></li>
 *<li><p><em>clamp_to_border</em> : The texture is stretched, the object edge colour is defined as the texture edge colour.</p></li>
 *<li><p><em>clamp_to_edge</em> : The texture is stretched, the object edge colour is defined as the average of the texture edge colour and the border colour.</p></li>
 *</ul></li>
 *<li><p><b>w_wrap_mode</b> : <em>value</em></p>
 *Defines the wrapping mode of the texture, for the W component. The possible values are :<br />
 *<ul>
 *<li><p><em>repeat</em> : The texture is repeated.</p></li>
 *<li><p><em>mirrored_repeat</em> : The texture is repeated, each instance of 2 being the mirror of the other one.</p></li>
 *<li><p><em>clamp_to_border</em> : The texture is stretched, the object edge colour is defined as the texture edge colour.</p></li>
 *<li><p><em>clamp_to_edge</em> : The texture is stretched, the object edge colour is defined as the average of the texture edge colour and the border colour.</p></li>
 *</ul></li>
 *<li><p><b>border_colour</b> : <em>rgba_colour</em></p>
 *Defines the non textured border colour.<br />
 *<ul>
 *<li><p><em>float_transparent_black</em> : Transparent black.</p></li>
 *<li><p><em>int_transparent_black</em> : Transparent black.</p></li>
 *<li><p><em>float_opaque_black</em> : Opaque black.</p></li>
 *<li><p><em>int_opaque_black</em> : Opaque black.</p></li>
 *<li><p><em>float_opaque_white</em> : Opaque white.</p></li>
 *<li><p><em>int_opaque_white</em> : Opaque white.</p></li>
 *</ul></li>
 *<li><p><b>max_anisotropy</b> : <em>real</em></p>
 *Defines the maximum degree of anisotropy.<br /></li>
 *</ol>
 *<br />
 *<br />
 *\section section_material material section
 *Materials can be multi-pass, so you can declare more than one pass subsection.<br />
 *<ol>
 *<li><p><b>pass</b> : <em>section</em></p>
 *Defines a new section describing a texture.<br /></li>
 *</ol>
 *<br />
 *\subsection subsection_pass pass section
 *<ol>
 *<li><p><b>diffuse</b> : <em>rgb_colour</em></p>
 *Defines diffuse colour of the pass (phong materials only).<br /></li>
 *<li><p><b>albedo</b> : <em>rgb_colour</em></p>
 *Defines albedo colour of the pass (not available with phong materials).<br /></li>
 *<li><p><b>specular</b> : <em>rgb_colour</em></p>
 *Defines specular colour of the pass (not available with metallic/roughness materials).<br /></li>
 *<li><p><b>metallic</b> : <em>real (between 0 and 1)</em></p>
 *Defines the metallness of the pass (metallic/roughness materials only).<br /></li>
 *<li><p><b>shininess</b> : <em>real (between 0 and 128)</em></p>
 *Defines the specular exponent of the pass (phong materials only).<br /></li>
 *<li><p><b>glossiness</b> : <em>real (between 0 and 1)</em></p>
 *Defines the glossiness of the pass (specular/glossiness materials only).<br /></li>
 *<li><p><b>roughness</b> : <em>real (between 0 and 1)</em></p>
 *Defines the roughness of the pass (metallic/roughness materials only).<br /></li>
 *<li><p><b>ambient</b> : <em>real (between 0 and 1)</em></p>
 *Defines ambient factor of the pass (phong materials only).<br /></li>
 *<li><p><b>emissive</b> : <em>real (between 0 and 1)</em></p>
 *Defines emissive factor of the pass.<br /></li>
 *<li><p><b>alpha</b> : <em>real (between 0 and 1)</em></p>
 *Defines the global alpha value for the pass.<br /></li>
 *<li><p><b>two_sided</b> : <em>boolean</em></p>
 *Tells the pass is two sided (true) or not (false).<br /></li>
 *<li><p><b>texture_unit</b> : <em>section</em></p>
 *Defines a new section describing a texture unit.<br /></li>
 *<li><p><b>alpha_blend_mode</b> : <em>value</em></p>
 *Alpha blending mode name, can be one of:<br />
 *<ul>
 *<li><p><em>none</em> : No alpha blending.</p></li>
 *<li><p><em>additive</em> : Source and destination alpha values are added.</p></li>
 *<li><p><em>multiplicative</em> : Source and destination alpha values are multiplied.</p></li>
 *</ul></li>
 *<li><p><b>colour_blend_mode</b> : <em>value</em></p>
 *Colour blending mode name, can be one of:<br />
 *<ul>
 *<li><p><em>none</em> : No colour blending.</p></li>
 *<li><p><em>additive</em> : Source and destination colour values are added.</p></li>
 *<li><p><em>multiplicative</em> : Source and destination colour values are multiplied.</p></li>
 *</ul></li>
 *<li><p><b>alpha_func</b> : func : <em>value</em> ref-val: <em>real</em></p>
 *Defines the way alpha rejection is applied to the texture. The second parameter is the reference value used in alpha rejection function. The first parameter values can be :<br />
 *<ul>
 *<li><p><em>always</em> : The sample colour is always applied.</p></li>
 *<li><p><em>less</em> : The sample colour is applied if its alpha component is less than the second parameter.</p></li>
 *<li><p><em>less_or_equal</em> : The sample colour is applied if its alpha component is less than or equal to the second parameter.</p></li>
 *<li><p><em>equal</em> : The sample colour is applied if its alpha component is equal to the second parameter.</p></li>
 *<li><p><em>not_equal</em> : The sample colour is applied if its alpha component is different from the second parameter.</p></li>
 *<li><p><em>greater_or_equal</em> : The sample colour is applied if its alpha component is greater than or equal to the second parameter.</p></li>
 *<li><p><em>greater</em> : The sample colour is applied if its alpha component is greater than the second parameter.</p></li>
 *<li><p><em>never</em> : The sample colour is never applied.</p></li>
 *</ul></li>
 *<li><p><b>refraction_ratio</b> : <em>real</em></p>
 *Defines the refraction ratio of the pass. Note that if there is no refraction map, the refraction is still applied, using only the skybox.<br /></li>
 *<li><p><b>subsurface_scattering</b> : <em>section</em></p>
 *Defines a new section describing subsurface scattering for the pass.<br /></li>
 *<li><p><b>parallax_occlusion</b> : <em>boolean</em></p>
 *Enables or disables parallax occlusion mapping (needs a normal map and a height map).<br /></li>
 *<li><p><b>bw_accumulation</b> : <em>int between 0 and 5</em></p>
 *Defines the accumulation function, for blended weighted rendering.<br /></li>
 *</ol>
 *
 *\subsubsection subsubsection_texture_unit texture_unit section
 *<ol>
 *<li><p><b>image</b> : <em>file</em></p>
 *Defines the image file name.<br /></li>
 *<li><p><b>render_target</b> : <em>section</em></p>
 *Defines a new section describing a render target.<br /></li>
 *<li><p><b>channel</b> : <em>value {| value}</em></p>
 *The channels to which the texture is bound. Can be one of the following :<br />
 *<ul>
 *<li><p><em>diffuse</em> : Diffuse lighting colour (Phong only).</p></li>
 *<li><p><em>albedo</em> : Base colour (PBR only).</p></li>
 *<li><p><em>specular</em> : Specular colour (Phong and PBR Specular/Glossiness).</p></li>
 *<li><p><em>metallic</em> : Metallic factor (PBR Metallic/Roughness only).</p></li>
 *<li><p><em>shininess</em> : Specular exponent (Phong only).</p></li>
 *<li><p><em>glossiness</em> : Glossiness factor (PBR Specular/Glossiness only).</p></li>
 *<li><p><em>roughness</em> : Roughness factor (PBR Metallic/Roughness only).</p></li>
 *<li><p><em>opacity</em> : Opacity factor.</p></li>
 *<li><p><em>emissive</em> : Emissive colour.</p></li>
 *<li><p><em>transmittance</em> : Transmittance factor (for subsurface scattering).</p></li>
 *<li><p><em>occlusion</em> : Occlusion factor.</p></li>
 *<li><p><em>normal</em> : Normals.</p></li>
 *<li><p><em>height</em> : Height.</p></li>
 *<li><p><em>Reflection</em> : Reflection map.</p></li>
 *<li><p><em>Refraction</em> : Refraction map.</p></li>
 *</ul></li>
 *<li><p><b>sampler</b> : <em>name</em></p>
 *Defines the sampler object used by the texture.<br /></li>
 *<li><p><b>diffuse_mask</b> : <em>mask_3</em></p>
 *Defines the components from the texture used for the diffuse colour (Phong only).<br /></li>
 *<li><p><b>albedo_mask</b> : <em>mask_3</em></p>
 *Defines the components from the texture used for the base colour (PBR only).<br /></li>
 *<li><p><b>specular_mask</b> : <em>mask_3</em></p>
 *Defines the components from the texture used for the specular colour (Phong or PBR Specular/Glossiness).<br /></li>
 *<li><p><b>metalness_mask</b> : <em>mask_1</em></p>
 *Defines the component from the texture used for the metallic factor (PBR Metallic/Roughness only).<br /></li>
 *<li><p><b>shininess_mask</b> : <em>mask_1</em></p>
 *Defines the component from the texture used for the specular exponent (Phong only).<br /></li>
 *<li><p><b>glossiness_mask</b> : <em>mask_1</em></p>
 *Defines the component from the texture used for the glossiness factor (PBR Specular/Glossiness only).<br /></li>
 *<li><p><b>roughness_mask</b> : <em>mask_1</em></p>
 *Defines the component from the texture used for the roughness factor (PBR Metallic/Roughness only).<br /></li>
 *<li><p><b>opacity</b> : <em>mask_1</em></p></li>
 *Defines the component from the texture used for the opacity factor.<br /></li>
 *<li><p><b>emissive</b> : <em>mask_3</em></p></li>
 *Defines the components from the texture used for the emissive colour.<br /></li>
 *<li><p><b>transmittance</b> : <em>mask_1</em></p></li>
 *Defines the component from the texture used for the transmittance factor (for subsurface scattering.<br /></li>
 *<li><p><b>occlusion</b> : <em>mask_1</em></p></li>
 *Defines the component from the texture used for the occlusion factor.<br /></li>
 *<li><p><b>normal</b> : <em>mask_3</em></p></li>
 *Defines the components from the texture used for the normals.<br /></li>
 *<li><p><b>height</b> : <em>mask_1</em></p></li>
 *Defines the component from the texture used for the height.<br /></li>
 *<li><p><b>height_factor</b> : <em>real</em></p></li>
 *The height factor multiplier.<br /></li>
 *<li><p><b>normal_directx</b> : <em>booléen</em></p></li>
 *Tells if the texture normals are expressed for DirectX (green component will then be inverted).<br /></li>
 *</ol>
 *
 *\subsubsection subsubsection_shader_program shader_program section
 *<ol>
 *<li><p><b>vertex_program</b> : <em>section</em></p>
 *Defines a new section describing the vertex program.<br /></li>
 *<li><p><b>pixel_program</b> : <em>section</em></p>
 *Defines a new section describing the pixel program.<br /></li>
 *<li><p><b>geometry_program</b> : <em>section</em></p>
 *Defines a new section describing the geometry program.<br /></li>
 *<li><p><b>hull_program</b> : <em>section</em></p>
 *Defines a new section describing the hull (tessellation control) program.<br /></li>
 *<li><p><b>domain_program</b> : <em>section</em></p>
 *Defines a new section describing the domain (tessellation evaluation) program.<br /></li>
 *<li><p><b>constants_buffer</b> : <em>section</em></p>
 *Defines a new section dexcribing a constants buffer (uniform buffer).<br /></li>
 *</ol>
 *
 *\subsubsection subsubsection_vertexpixelgeometryhulldomain_program vertex/pixel/geometry/hull/domain_program section
 *<ol>
 *<li><p><b>file</b> : <em>file</em></p>
 *Shader file name<br /></li>
 *<li><p><b>sampler</b> : <em>name</em></p>
 *Creates a new variable of sample (1D, 2D, …) type, for the pixel shader.<br /></li>
 *<li><p><b>input_type</b> : <em>value</em></p>
 *Defines the input faces data type, for geometry shader. Can be one of the following :<br />
 *<ul>
 *<li><p><em>points</em> : Points.</p></li>
 *<li><p><em>lines</em> : Disjoint lines.</p></li>
 *<li><p><em>line_loop</em> : Joint lines loop.</p></li>
 *<li><p><em>line_strip</em> : Joint lines.</p></li>
 *<li><p><em>triangles</em> : Disjoint triangles.</p></li>
 *<li><p><em>triangle_strip</em> : Joint triangles.</p></li>
 *<li><p><em>triangle_fan</em> : Triangles joint using the first point.</p></li>
 *<li><p><em>quads</em> : Disjoint quads.</p></li>
 *<li><p><em>quad_strip</em> : Joint quads.</p></li>
 *<li><p><em>polygon</em> : Polygons.</p></li>
 *</ul></li>
 *<li><p><b>output_type</b> : <em>value</em></p>
 *Defines the geometry chader output data type. Can be one of the following :<br />
 *<ul>
 *<li><p><em>points</em> : Points.</p></li>
 *<li><p><em>line_strip</em> : Joint lines.</p></li>
 *<li><p><em>triangle_strip</em> : Joint triangles.</p></li>
 *<li><p><em>quad_strip</em> : Joint quads.</p></li>
 *</ul></li>
 *<li><p><b>output_vtx_count</b> : <em>int</em></p>
 *Defines the geometry shader output vertices.<br /></li>
 *<li><p><b>constants_buffer</b> : <em>section</em></p>
 *Defines a new section describing a constants buffer.<br /></li>
 *</ol>
 *
 *\subsubsection subsubsection_constants_buffer constants_buffer section
 *<ol>
 *<li><p><b>shaders</b> : <em>bitwise ORed values</em></p>
 *Shader types to which this buffer applies, can be one of:<br />
 *<ul>
 *<li><p><em>vertex</em></p></li>
 *<li><p><em>hull</em></p></li>
 *<li><p><em>domain</em></p></li>
 *<li><p><em>geometry</em></p></li>
 *<li><p><em>pixel</em></p></li>
 *<li><p><em>compute</em></p></li>
 *</ul></li>
 *<li><p><b>variable</b> : <em>name</em>, <em>section</em></p>
 *Defines a new section describing a variable for this buffer.<br /></li>
 *</ol>
 *
 *\subsubsection subsubsection_variable variable section
 *<ol>
 *<li><p><b>type</b> : <em>value</em></p>
 *Variable type name, can be :<br />
 *<ul>
 *<li><p><em>int</em> : 1 signed integer.</p></li>
 *<li><p><em>uint</em> : 1 unsigned integer.</p></li>
 *<li><p><em>float</em> : 1 simple precision floating point number.</p></li>
 *<li><p><em>double</em> : 1 double precision floating point number.</p></li>
 *<li><p><em>vec2i</em> : 2 signed integers.</p></li>
 *<li><p><em>vec3i</em> : 3 signed integers.</p></li>
 *<li><p><em>vec4i</em> : 4 signed integers.</p></li>
 *<li><p><em>vec2f</em> : 2 simple precision floating point numbers.</p></li>
 *<li><p><em>vec3f</em> : 3 simple precision floating point numbers.</p></li>
 *<li><p><em>vec4f</em> : 4 simple precision floating point numbers.</p></li>
 *<li><p><em>vec2d</em> : 2 double precision floating point numbers.</p></li>
 *<li><p><em>vec3d</em> : 3 double precision floating point numbers.</p></li>
 *<li><p><em>vec4d</em> : 4 double precision floating point numbers.</p></li>
 *<li><p><em>mat2x2i</em> : 2x2 signed integers matrix.</p></li>
 *<li><p><em>mat2x3i</em> : 2x3 signed integers matrix.</p></li>
 *<li><p><em>mat2x4i</em> : 2x4 signed integers matrix.</p></li>
 *<li><p><em>mat3x2i</em> : 3x2 signed integers matrix.</p></li>
 *<li><p><em>mat3x3i</em> : 3x3 signed integers matrix.</p></li>
 *<li><p><em>mat3x4i</em> : 3x4 signed integers matrix.</p></li>
 *<li><p><em>mat4x2i</em> : 4x2 signed integers matrix.</p></li>
 *<li><p><em>mat4x3i</em> : 4x3 signed integers matrix.</p></li>
 *<li><p><em>mat4x4i</em> : 4x4 signed integers matrix.</p></li>
 *<li><p><em>mat2x2f</em> : 2x2 simple precision floating point numbers matrix.</p></li>
 *<li><p><em>mat2x3f</em> : 2x3 simple precision floating point numbers matrix.</p></li>
 *<li><p><em>mat2x4f</em> : 2x4 simple precision floating point numbers matrix.</p></li>
 *<li><p><em>mat3x2f</em> : 3x2 simple precision floating point numbers matrix.</p></li>
 *<li><p><em>mat3x3f</em> : 3x3 simple precision floating point numbers matrix.</p></li>
 *<li><p><em>mat3x4f</em> : 3x4 simple precision floating point numbers matrix.</p></li>
 *<li><p><em>mat4x2f</em> : 4x2 simple precision floating point numbers matrix.</p></li>
 *<li><p><em>mat4x3f</em> : 4x3 simple precision floating point numbers matrix.</p></li>
 *<li><p><em>mat4x4f</em> : 4x4 simple precision floating point numbers matrix.</p></li>
 *<li><p><em>mat2x2d</em> : 2x2 double precision floating point numbers matrix.</p></li>
 *<li><p><em>mat2x3d</em> : 2x3 double precision floating point numbers matrix.</p></li>
 *<li><p><em>mat2x4d</em> : 2x4 double precision floating point numbers matrix.</p></li>
 *<li><p><em>mat3x2d</em> : 3x2 double precision floating point numbers matrix.</p></li>
 *<li><p><em>mat3x3d</em> : 3x3 double precision floating point numbers matrix.</p></li>
 *<li><p><em>mat3x4d</em> : 3x4 double precision floating point numbers matrix.</p></li>
 *<li><p><em>mat4x2d</em> : 4x2 double precision floating point numbers matrix.</p></li>
 *<li><p><em>mat4x3d</em> : 4x3 double precision floating point numbers matrix.</p></li>
 *<li><p><em>mat4x4d</em> : 4x4 double precision floating point numbers matrix.</p></li>
 *</ul></li>
 *<li><p><b>count</b> : <em>int</em></p>
 *Variable occurences count (array size).<br /></li>
 *<li><b>value</b> :<br />
 *Variable value, depends on the chosen type.<br /></li>
 *</ol>
 *
 *\subsubsection subsubsection_subsurface_scattering subsurface_scattering section
 *<ol>
 *<li><p><b>strength</b> : <em>real</em></p>
 *Defines the strength of the effect.<br /></li>
 *<li><p><b>gaussian_width</b> : <em>real</em></p>
 *Defines the width of the Gaussian blur.<br /></li>
 *<li><p><b>transmittance_profile</b> : <em>section</em></p>
 *Defines a new section describing the transmittance profile.<br /></li>
 *</ol>
 *
 *\subsubsection subsubsection_transmittance_profile transmittance_profile section
 *<ol>
 *<li><p><b>factor</b> : <em>vec4f</em></p>
 *Defines the three RGB components of the colour, and the fourth component is used for the exponent of that colour.<br /></li>
 *</ol>
 *<br />
 *<br />
 *\section section_font font section
 *<ol>
 *<li><p><b>file</b> : <em>file</em></p>
 *Defines the file holding the font.<br /></li>
 *<li><p><b>height</b> : <em>int</em></p>
 *Defines the height (precision) of the font.<br /></li>
 *</ol>
 *<br />
 *<br />
 *\section section_scene scene section
 *<ol>
 *<li><p><b>ambient_light</b> : <em>colour</em></p>
 *Defines the ambient lighting colour. For PBR materials, defines the influence of the IBL on the scene.<br /></li>
 *<li><p><b>background_colour</b> : <em>colour</em></p>
 *Defines the background colour.<br /></li>
 *<li><p><b>background_image</b> : <em>file</em></p>
 *Defines the background image.<br /></li>
 *<li><p><b>import</b> : <em>file</em></p>
 *Allows scene import from a CSCN file or another file format supported by Castor3D importer plug-ins.<br /></li>
 *<li><p><b>scene_node</b> : <em>section</em></p>
 *Defines a new section describing a scene node for objects, lights or billboards.<br /></li>
 *<li><p><b>camera_node</b> : <em>section</em></p>
 *Defines a new section describing a scene node for cameras.<br /></li>
 *<li><p><b>light</b> : <em>section</em></p>
 *Defines a new section describing a light source.<br /></li>
 *<li><p><b>object</b> : <em>section</em></p>
 *Defines a new section describing an object.<br /></li>
 *<li><p><b>billboard</b> : <em>section</em></p>
 *Defines a new section describing a billboards list.<br /></li>
 *<li><p><b>camera</b> : <em>section</em></p>
 *Defines a new section describing a camera.<br /></li>
 *<li><p><b>panel_overlay</b> : <em>section</em></p>
 *Defines a new section describing a simple panel overlay.<br /></li>
 *<li><p><b>border_panel_overlay</b> : <em>section</em></p>
 *Defines a new section describing a simple panel overlay with a border.<br /></li>
 *<li><p><b>text_overlay</b> : <em>section</em></p>
 *Defines a new section describing a simple panel overlay with text.<br /></li>
 *<li><p><b>animated_object_group</b> : <em>section</em></p>
 *Defines a new section describing an animated object group, with common animations.<br /></li>
 *<li><p><b>mesh</b> : <em>section</em></p>
 *Defines a new section describing a mesh, that can be used with one or more objects.<br /></li>
 *<li><p><b>particle_system</b> : <em>section</em></p>
 *Defines a new section describing a particle system.<br /></li>
 *<li><p><b>skybox</b> : <em>section</em></p>
 *Defines a new section describing the skybox.<br /></li>
 *<li><p><b>include</b> : <em>file</em></p>
 *Includes a scene file, allowing you to split your scene in multiple files.<br /></li>
 *<li><p><b>sampler</b> : <em>section</em></p>
 *Defines a new section describing a sampler.<br /></li>
 *<li><p><b>fog_type</b> : <em>value</em></p>
 *Defines the fog type for the scene. Possible values are:<br />
 *<ul>
 *<li><p><em>linear</em>: Fog intensity increases linearly with distance to camera.</p></li>
 *<li><p><em>exponential</em>: Fog intensity increases exponentially with distance to camera.</p></li>
 *<li><p><em>squared_exponential</em>: Fog intensity increases even more with distance to camera.</p></li>
 *</ul></li>
 *<li><p><b>fog_density</b> : <em>real</em></p>
 *Defines the fog density, which is multiplied by the distance, according to chosen fog type.<br /></li>
 *<li><p><b>hdr_config</b> : <em>section</em></p>
 *Defines a new section describing the HDR configuration.<br /></li>
 *</ol>
 *<br />
 *\subsection subsection_hdr_config hdr_config section
 *<ol>
 *<li><p><b>exposure</b> : <em>real</em></p>
 *Defines the scene’s exposure.<br /></li>
 *<li><p><b>gamma</b> : <em>real</em></p>
 *Defines the gamma correction.<br /></li>
 *</ol>
 *<br />
 *\subsection subsection_scene_node scene_node and camera_node sections
 *<ol>
 *<li><p><b>parent</b> : <em>name</em></p>
 *Defines this node’s parent. The default parent node is the root node.<br /></li>
 *<li><p><b>position</b> : <em>3 reals</em></p>
 *Node position relative to its parent.<br /></li>
 *<li><p><b>orientation</b> : <em>4 reals</em></p>
 *A quaternion holding node orientation relative to its parent.<br /></li>
 *<li><p><b>scale</b> : <em>3 reals</em></p>
 *Node scale relative to its parent.<br /></li>
 *</ol>
 *<br />
 *\subsection subsection_light light section
 *<ol>
 *<li><p><b>type</b> : <em>value</em></p>
 *Three light source types exist in Castor3D :<br />
 *<ul>
 *<li><p><em>directional</em> : directional light (like the sun).</p></li>
 *<li><p><em>point_light</em> : a positioned source which emits in all directions.</p></li>
 *<li><p><em>spot_light</em> : a positioned source which emits in an oriented cone.</p></li>
 *</ul></li>
 *<li><p><b>colour</b> : <em>rgb_colour</em></p>
 *Defines the colour for this source.<br /></li>
 *<li><p><b>intensity</b> : <em>2 reals</em></p>
 *Defines the diffuse and specular intensities for this source.<br /></li>
 *<li><p><b>attenuation</b> : <em>3 reals</em></p>
 *Defines the three attenuation components : constant, linear and quadratic. This attenuation is computed from the distance to the light source.<br />
 *Only for spot_light and point_light.<br /></li>
 *<li><p><b>cut_off</b> : <em>real</em></p>
 *Defines the angle of the emission cone.<br />
 *Only for spot_light.<br /></li>
 *<li><p><b>exponent</b> : <em>real</em></p>
 *Defines the attenuation computed with the distance from the emission cone centre.<br />
 *Only for spot_light.<br /></li>
 *<li><p><b>parent</b> : <em>name</em></p>
 *Defines the node which this light source is attached to.<br /></li>
 *<li><p><b>shadow_producer</b> : <em>section</em></p>
 *<p>Defines a new section describing the shadows for the light source.</p></li>
 *</ol>
 *<br />
 *\subsubsection shadows_profile Section shadows
 *<ol style="list-style-type: decimal">
 *<li><p><b>producer</b> : <em>booléen</em></p>
 *Tells if the light source produces shadows (<em>true</em>) or not (<em>false</em>).<br /></li>
 *<li><p><b>filter</b> : <em>valeur</em></p>
 *Defines the type of shadows to use. Can be one of the following:<br />
 *<ul>
 *<li><p><em>raw</em> : No filter.</p></li>
 *<li><p><em>pcf</em> : PCF filter.</p></li>
 *<li><p><em>variance</em> : Variance Shadow Map.</p></li>
 *</ul></li>
 *<li><p><b>min_offset</b> : <em>real</em></p>
 *Defines the minimal offset to apply to the shadow value.<br /></li>
 *<li><p><b>max_slope_offset</b> : <em>real</em></p>
 *Defines the mawimal offset, slope wise, to apply to the shadow value.<br /></li>
 *<li><p><b>variance_max</b> : <em>real</em></p>
 *Defines the minimal variance factor to apply to the shadow value.<br /></li>
 *<li><p><b>variance_bias</b> : <em>real</em></p>
 *Defines the variance bias to apply to the shadow value.<br /></li>
 *<li><p><b>volumetric_steps</b> : <em>int</em></p>
 *Defines the number of steps performed by the ray to compute the volumetric light scattering.<br /></li>
 *<li><p><b>volumetric_scattering</b> : <em>real</em></p>
 *Defines the volumetric light scattering factor.<br /></li>
 *</ol>
 *<br />
 *\subsection subsection_object object section
 *<ol>
 *<li><p><b>parent</b> : <em>name</em></p>
 *Defines the node which this object is attached to.<br /></li>
 *<li><p><b>mesh</b> : <em>name</em></p>
 *Defines the mesh this object uses.<br /></li>
 *<li><p><b>mesh</b> : <em>name</em> <em>section</em></p>
 *Defines a new section describing a mesh with the given name.<br /></li>
 *<li><p><b>material</b> : <em>name</em></p>
 *Name of a material, defined in a .cmtl file or in this file. Applies this material too all the submeshes.<br /></li>
 *<li><p><b>materials</b> : <em>section</em></p>
 *New section used to specify each submesh’s material.<br /></li>
 *<li><p><b>cast_shadows</b> : <em>boolean</em></p>
 *<p>Defines if the object casts shadows (<em>true</em>, default value) or not (<em>false</em>).</p></li>
 *<li><p><b>receive_shadows</b> : <em>boolean</em></p>
 *<p>Defines if the object receives shadows (<em>true</em>, default value) or not (<em>false</em>).</p></li>
 *</ol>
 *
 *\subsubsection subsubsection_materials materials section
 *<ol>
 *<li><p><b>material</b> : <em>int</em>, <em>name</em></p>
 *Submesh index, and material name for this submesh.<br /></li>
 *</ol>
 *<br />
 *\subsection subsection_billboard billboard section
 *Allows the definition of billboards that share the same material and dimensions.<br />
 *<ol>
 *<li><p><b>parent</b> : <em>name</em></p>
 *Defines the parent scene node.<br /></li>
 *<li><p><b>positions</b> : <em>section</em></p>
 *Defines a new section describing each billboard position.<br /></li>
 *<li><p><b>material</b> : <em>name</em></p>
 *Defines the material used by every billboard of this list.<br /></li>
 *<li><p><b>dimensions</b> : <em>size</em></p>
 *Defines billboards dimensions.<br /></li>
 *<li><p><b>type</b> : <em>value</em></p>
 *Defines the type of billboard. Possible values are:<br />
 *<ul>
 *<li><p><em>cylindrical</em>: The billboard faces the camera, except for their Y axis, which remains still.</p></li>
 *<li><p><em>spherical</em>: The billboard faces the camera on all axes.</p></li>
 *</ul></li>
 *<li><p><b>size</b> : <em>value</em></p>
 *Defines the billboards sizing. Possible values are:<br />
 *<ul>
 *<li><p><em>dynamic</em>: The size varies, depending on the distance to camera.</p></li>
 *<li><p><em>fixed</em>: The size is fixed, where the camera is.</p></li>
 *</ul></li>
 *</ol>
 *
 *\subsubsection subsubsection_positions positions section
 *<ol>
 *<li><p><b>pos</b> : <em>3 reals</em></p>
 *Defines the relative position of a billboard.<br /></li>
 *</ol>
 *<br />
 *\subsection subsection_camera camera section
 *<ol>
 *<li><p><b>parent</b> : <em>name</em></p>
 *Defines the parent CameraNode.<br /></li>
 *<li><p><b>primitive</b> : <em>value</em></p>
 *Defines the display type. Can be one of :<br />
 *<ul>
 *<li><p><em>points</em> : Points.</p></li>
 *<li><p><em>lines</em> : Disjointed lines.</p></li>
 *<li><p><em>line_loop</em> : Jointed lines loop.</p></li>
 *<li><p><em>line_strip</em> : Joined lines.</p></li>
 *<li><p><em>triangles</em> : Disjointed triangles.</p></li>
 *<li><p><em>triangle_strip</em> : Jointed triangles.</p></li>
 *<li><p><em>triangle_fan</em> : Triangles jointed using the first point.</p></li>
 *<li><p><em>quads</em> : Disjointed quads.</p></li>
 *<li><p><em>quad_strip</em> : Jointed quads.</p></li>
 *<li><p><em>polygon</em> : Polygons.</p></li>
 *</ul></li>
 *<li><p><b>viewport</b> : <em>section</em></p>
 *Defines the camera view port.<br /></li>
 *</ol>
 *
 *\subsubsection subsubsection_viewport viewport section
 *<ol>
 *<li><p><b>type</b> : <em>value</em></p>
 *Window display type, 2d or 3d.<br /></li>
 *<li><p><b>left</b> : <em>real</em></p>
 *Defines the minimum displayed X coordinate.<br /></li>
 *<li><p><b>right</b> : <em>real</em></p>
 *Defines the maximum displayed X coordinate.<br /></li>
 *<li><p><b>top</b> : <em>real</em></p>
 *Defines the minimum displayed Y coordinate.<br /></li>
 *<li><p><b>bottom</b> : <em>real</em></p>
 *Defines the maximum displayed Y coordinate.<br /></li>
 *<li><p><b>near</b> : <em>real</em></p>
 *Defines the minimum displayed Z coordinate.<br /></li>
 *<li><p><b>far</b> : <em>real</em></p>
 *Defines the maximum displayed Z coordinate.<br /></li>
 *<li><p><b>size</b> : <em>size</em></p>
 *Defines the window display size (in pixels).<br /></li>
 *<li><p><b>fov_y</b> : <em>real</em></p>
 *Defines the vertical field of view angle, in radians.<br /></li>
 *<li><p><b>aspect_ratio</b> : <em>real</em></p>
 *Defines the global window aspect ratio (1.33333 for 4/3, 1.77777 for 16/9 … ).<br /></li>
 *</ol>
 *<br />
 *\subsection subsection_animated_object_group animated_object_group section
 *<ol>
 *<li><p><b>animated_object</b> : <em>name</em></p>
 *Adds the object with the given name to the group.<br /></li>
 *<li><p><b>animation</b> : <em>name</em></p>
 *Adds the animation with the given name to the group’s common animations list.<br /></li>
 *<li><p><b>start_animation</b> : <em>name</em></p>
 *Starts the given animation.<br /></li>
 *<li><p><b>pause_animation</b> : <em>name</em></p>
 *Pauses the given animation (which must have been started first).<br /></li>
 *</ol>
 *
 *\subsubsection subsubsection_animation animation section
 *<ol>
 *<li><p><b>looped</b> : <em>boolean</em></p>
 *<p>Defines if the animation is looped (<em>true</em>) or not (<em>false</em>, default value).</p></li>
 *<li><p><b>scale</b> : <em>real</em></p>
 *Defines the time scale of the animation (can be negative, the animation will then be played backwards).<br /></li>
 *</ol>
 *<br />
 *<br />
 *\section section_mesh mesh section
 *<ol>
 *<li><p><b>type</b> : <em>name</em></p>
 *Mesh type name, one of :<br />
 *<ul>
 *<li><p><em>custom</em> : manually defined mesh or imported mesh.</p></li>
 *<li><p><em>cube</em> : a cube, user must then define its three dimensions.</p></li>
 *<li><p><em>cone</em> : a cone, user must then define its radius and height.</p></li>
 *<li><p><em>cylinder</em> : a cylinder, user must then define its radius and height.</p></li>
 *<li><p><em>sphere</em> : a sphere with quad faces, user must then define the subdivisions count and the radius.</p></li>
 *<li><p><em>icosahedron</em> : a sphere with triangular faces, user must then define the subdivisions count and the radius.</p></li>
 *<li><p><em>torus</em> : a torus, user must then define the internal and external subdivisions count and the internal and external radius.</p></li>
 *<li><p><em>plane</em> : a plane, user must then define the width and depth subdivisions count and the width and depth.</p></li>
 *</ul></li>
 *<li><p><b>submesh</b> : <em>section</em></p>
 *Defines a new section describing a submesh. Only if the mesh type is custom.<br /></li>
 *<li><p><b>import</b> : <em>file</em> <em>&lt;options&gt;</em></p>
 *Allows import of mesh data from a file, in CMSH file format or any format supported by Castor3D import plug-ins. Only if the mesh type is custom. This directive can accept few optional parameters :<br />
 *<ul>
 *<li><p><em>smooth_normals</em> : Computes normals per vertex during import.</p></li>
 *<li><p><em>flat_normals</em> : Computes normals per face during the import.</p></li>
 *<li><p><em>tangent_space</em> : Computes tangent space informations (tangent and bi-tangent) during import.</p></li>
 *<li><p><em>rescale</em>=<em>real</em> : Rescales the resulting mesh by given factor, on three axes.</p></li>
 *</ul></li>
 *<li><p><b>morph_import</b> : <em>file</em> <em>&lt;options</em>&gt;</p>
 *Allows import of mesh data from a file, to add mophing animation.<br />
 *This directive must happen after a first import directive.<br />
 *Available only if the mesh type is <em>custom</em>.<br />
 *This directive can accept few optional parameters :<br />
 *<ul>
 *<li><p><em>smooth_normals</em> : Computes normals per vertex during import.</p></li>
 *<li><p><em>flat_normals</em> : Computes normals per face during the import.</p></li>
 *<li><p><em>tangent_space</em> : Computes tangent space informations (tangent and bi-tangent) during import.</p></li>
 *<li><p><em>rescale</em>=<em>real</em> : Rescales the resulting mesh by given factor, on three axes.</p></li>
 *</ul></li>
 *<li><p><b>division</b> : <em>name</em> <em>int</em></p>
 *Allows the mesh subdivision, using a supported Castor3D divider plug-in algorithm. The second parameter is the application count of the algorithm (its applied recursively).<br /></li>
 *</ol>
 *<br />
 *\subsection subsection_submesh submesh section
 *<ol>
 *<li><p><b>vertex</b> : <em>3 reals</em></p>
 *Defines a vertex position.<br /></li>
 *<li><p><b>uv</b> : <em>2 reals</em></p>
 *Defines the UV texture coordinates for the previously declared vertex.<br /></li>
 *<li><p><b>uvw</b> : <em>3 reals</em></p>
 *Defines the UVW texture coordinates for the previously declared vertex.<br /></li>
 *<li><p><b>normal</b> : <em>3 reals</em></p>
 *Defines the normal coordinates for the previously declared vertex.<br /></li>
 *<li><p><b>tangent</b> : <em>3 reals</em></p>
 *Defines the tangent coordinates for the previously declared vertex.<br /></li>
 *<li><p><b>face</b> : <em>3 or 4 integers</em></p>
 *Defines a face using the three or four vertices whose indices are given. If more than three indices are given, creates the appropriate count of triangular faces.<br /></li>
 *<li><p><b>face_uv</b> : <em>as much uv as the face indices</em></p>
 *Defines the UV coordinates for each vertex of the previously declared face.<br /></li>
 *<li><p><b>face_uvw</b> : <em>as much uvw as the face indices</em></p>
 *Defines the UVW coordinates for each vertex of the previously declared face.<br /></li>
 *<li><p><b>face_normals</b> : <em>as much 3 reals groups as the face indices</em></p>
 *Defines the normals coordinates for each vertex of the previously declared face.<br /></li>
 *<li><p><b>face_tangents</b> : <em>as much 3 reals groups as the face indices</em></p>
 *Defines the tangents coordinates for each vertex of the previously declared face.<br /></li>
 *</ol>
 *<br />
 *<br />
 *\section section_panel_overlay panel_overlay section
 *<ol>
 *<li><p><b>material</b> : <em>name</em></p>
 *Defines the material used by the panel.<br /></li>
 *<li><p><b>position</b> : <em>2 reals</em></p>
 *Defines the overlay position, relative to its parent (or to screen, if no parent).<br /></li>
 *<li><p><b>size</b> : <em>2 reals</em></p>
 *Defines the overlay size, relative to its parent (or to screen, if no parent).<br /></li>
 *<li><p><b>pxl_position</b> : <em>2 ints</em></p>
 *Defines the absolute position for the overlay, in pixels.<br /></li>
 *<li><p><b>pxl_size</b> : <em>2 ints</em></p>
 *Defines the absolute size for the overlay, in pixels.<br /></li>
 *<li><p><b>uv</b> : <em>4 reals</em></p>
 *Defines the UV for the overlay (left, top, right, bottom).<br /></li>
 *<li><p><b>panel_overlay</b> : <em>name</em> <em>section</em></p>
 *Defines a new section describing a simple panel children overlay.<br /></li>
 *<li><p><b>border_panel_overlay</b> : <em>name</em> <em>section</em></p>
 *Defines a new section describing a border panel children overlay.<br /></li>
 *<li><p><b>text_overlay</b> : <em>name</em> <em>section</em></p>
 *Defines a new section describing a text panel children overlay.<br /></li>
 *</ol>
 *<br />
 *<br />
 *\section section_border_panel_overlay border_panel_overlay section
 *<ol>
 *<li><p><b>material</b> : <em>name</em></p>
 *Defines the material used by the panel.<br /></li>
 *<li><p><b>position</b> : <em>2 reals</em></p>
 *Defines the overlay position, relative to its parent (or to screen, if no parent).<br /></li>
 *<li><p><b>size</b> : <em>2 reals</em></p>
 *Defines the overlay size, relative to its parent (or to screen, if no parent).<br /></li>
 *<li><p><b>pxl_position</b> : <em>2 ints</em></p>
 *Defines the absolute position for the overlay, in pixels.<br /></li>
 *<li><p><b>pxl_size</b> : <em>2 ints</em></p>
 *Defines the absolute size for the overlay, in pixels.<br /></li>
 *<li><p><b>center_uv</b> : <em>4 reals</em></p>
 *Defines the UV for the center of the overlay (left, top, right, bottom).<br /></li>
 *<li><p><b>border_material</b> : <em>name</em></p>
 *Defines the material used for the panel’s border.<br /></li>
 *<li><p><b>border_position</b> : <em>value</em></p>
 *Defines the border’s position, can be one of:<br />
 *<ul>
 *<li><p><em>internal</em> : The border is inside the overlay.</p></li>
 *<li><p><em>middle</em> : The border is half inside, half outside the overlay.</p></li>
 *<li><p><em>external</em> : The border is outside the overlay.</p></li>
 *</ul></li>
 *<li><p><b>border_size</b> : <em>4 reals</em></p>
 *Defines the borders sizes (left right, top, bottom).<br /></li>
 *<li><p><b>pxl_border_size</b> : <em>2 ints</em></p>
 *Defines the absolute border size, in pixels.<br /></li>
 *<li><p><b>border_inner_uv</b> : <em>4 reals</em></p>
 *Defines the UV for the border of the overlay, inner side (left, top, right, bottom).<br /></li>
 *<li><p><b>border_outer_uv</b> : <em>4 reals</em></p>
 *Defines the UV for the border of the overlay, outer side (left, top, right, bottom).<br /></li>
 *<li><p><b>panel_overlay</b> : <em>name</em> <em>section</em></p>
 *Defines a new section describing a simple panel children overlay.<br /></li>
 *<li><p><b>border_panel_overlay</b> : <em>name</em> <em>section</em></p>
 *Defines a new section describing a border panel children overlay.<br /></li>
 *<li><p><b>text_overlay</b> : <em>name</em> <em>section</em></p>
 *Defines a new section describing a text panel children overlay.<br /></li>
 *</ol>
 *<br />
 *<br />
 *\section section_text_overlay text_overlay section
 *<ol>
 *<li><p><b>material</b> : <em>name</em></p>
 *Defines the material used by the panel.<br /></li>
 *<li><p><b>position</b> : <em>2 reals</em></p>
 *Defines the overlay position, relative to its parent (or to screen, if no parent).<br /></li>
 *<li><p><b>size</b> : <em>2 reals</em></p>
 *Defines the overlay size, relative to its parent (or to screen, if no parent).<br /></li>
 *<li><p><b>pxl_position</b> : <em>2 ints</em></p>
 *Defines the absolute position for the overlay, in pixels.<br /></li>
 *<li><p><b>pxl_size</b> : <em>2 ints</em></p>
 *Defines the absolute size for the overlay, in pixels.<br /></li>
 *<li><p><b>font</b> : <em>name</em></p>
 *Defines the font used to display the text.<br /></li>
 *<li><p><b>text</b> : <em>texte</em></p>
 *Defines the displayed text.<br /></li>
 *<li><p><b>text_wrapping</b> : <em>value</em></p>
 *Defines the way the text is cut when a line overflows the overlay dimensions. Can be one of:<br />
 *<ul>
 *<li><p><em>none</em> : The text is not cut (the part that overflows won’t be displayed, though).</p></li>
 *<li><p><em>break</em> : The text is cut at the letter (the words will be cut).</p></li>
 *<li><p><em>break_words</em> : The text is cut at the word (the words remain uncut).</p></li>
 *</ul></li>
 *<li><p><b>vertical_align</b> : <em>value</em></p>
 *Defines the text vertical alignment:<br />
 *<ul>
 *<li><p><em>top</em> : Align on top.</p></li>
 *<li><p><em>center</em> : Vertically center.</p></li>
 *<li><p><em>bottom</em> : Align on bottom.</p></li>
 *</ul></li>
 *<li><p><b>horizontal_align</b> : <em>value</em></p>
 *Defines the text horizontal alignment:<br />
 *<ul>
 *<li><p><em>left</em> : Align on left.</p></li>
 *<li><p><em>center</em> : Horizontally center.</p></li>
 *<li><p><em>right</em> : Align on right.</p></li>
 *</ul></li>
 *<li><p><b>texturing_mode</b> : <em>value</em></p>
 *Defines the way the texture is applied:<br />
 *<ul>
 *<li><p><em>letter</em> : The texture is applied on each letter.</p></li>
 *<li><p><em>text</em> : The texture is applied on the whole text.</p></li>
 *</ul></li>
 *<li><p><b>line_spacing_mode</b> : <em>value</em></p>
 *Defines the height of the lines:<br />
 *<ul>
 *<li><p><em>own_height</em> : Each line has its own height.</p></li>
 *<li><p><em>max_lines_height</em> : Each line has the height of the line with the maximum height.</p></li>
 *<li><p><em>max_font_height</em> : Each line has the height of the character with the maximum height in the font.</p></li>
 *</ul></li>
 *<li><p><b>panel_overlay</b> : <em>name</em> <em>section</em></p>
 *Defines a new section describing a simple panel children overlay.<br /></li>
 *<li><p><b>border_panel_overlay</b> : <em>name</em> <em>section</em></p>
 *Defines a new section describing a border panel children overlay.<br /></li>
 *<li><p><b>text_overlay</b> : <em>name</em> <em>section</em></p>
 *Defines a new section describing a text panel children overlay.<br /></li>
 *</ol>
 *<br />
 *<br />
 *\section section_window window section
 *<ol>
 *<li><p><b>render_target</b> : <em>section</em></p>
 *Defines a new section describing the render target.<br /></li>
 *<li><p><b>vsync</b> : <em>boolean</em></p>
 *Defines the activation or deactivation of vertical synchronisation.<br /></li>
 *<li><p><b>fullscreen</b> : <em>boolean</em></p>
 *Defines the activation or deactivation of full-screen display.<br /></li>
 *</ol>
 *<br />
 *<br />
 *\section section_render_target render_target section
 *<ol>
 *<li><p><b>scene</b> : <em>nom</em></p>
 *Defines the scene rendered in this target.<br /></li>
 *<li><p><b>camera</b> : <em>nom</em></p>
 *Defines the camera used to render the scene.<br /></li>
 *<li><p><b>size</b> : <em>size</em></p>
 *Defines the internal buffer dimensions.<br /></li>
 *<li><p><b>format</b> : <em>value</em></p>
 *Defines the colour buffer pixel format. Can be one of :<br />
 *<ul>
 *<li><p><em>l8</em> : Luminance 8 bits, one 8 bits integral number.</p></li>
 *<li><p><em>l16f</em> : Luminance 16 bits, one 16 bits floating point number (half float).</p></li>
 *<li><p><em>l32f</em> : Luminance 32 bits, one 32 bits floating point number(float).</p></li>
 *<li><p><em>al16</em> : Alpha + Luminance, two 8 bits integral number.</p></li>
 *<li><p><em>al16f</em> : Alpha + Luminance, two 16 bits floating point number (half float).</p></li>
 *<li><p><em>al32f</em> : Alpha + Luminance, two 32 bits floating point number (float).</p></li>
 *<li><p><em>argb1555</em> : ARGB 16 bits, 1 bit for alpha and each other component on a 5 bits integer.</p></li>
 *<li><p><em>rgb565</em> : RGB 16 bits, R and B on a 5 bits integer, G on a 6 bits integer.</p></li>
 *<li><p><em>argb16</em> : ARGB 16 bits, each component on a 4 bits integer.</p></li>
 *<li><p><em>rgb24</em> : RGB 24 bits, each component on a 8 bits integer.</p></li>
 *<li><p><em>argb32</em> : ARGB 32 bits, each component on a 8 bits integer.</p></li>
 *<li><p><em>argb16f</em> : ARGB 64 bits, each component on a 16 bits floating point number (half float).</p></li>
 *<li><p><em>rgb32f</em> : RGB 96 bits, each component on a 32 bits floating point number (half float).</p></li>
 *<li><p><em>argb32f</em> : ARGB 128 bits, each component on a 32 bits floating point number (half float).</p></li>
 *</ul></li>
 *<li><p><b>depth</b> : <em>value</em></p>
 *Defines the depth/stencil buffer pixel format. Can be one of :<br />
 *<ul>
 *<li><p><em>depth16</em> : Depth on a 16 bits integer.</p></li>
 *<li><p><em>depth24</em> : Depth on a 24 bits integer.</p></li>
 *<li><p><em>depth24s8</em> : Depth on a 24 bits integer, Stencil on a 8 bits integer.</p></li>
 *<li><p><em>depth32fs8</em> : Depth on a 32 bits floating point, Stencil on a 8 bits integer.</p></li>
 *<li><p><em>depth32</em> : Depth on a 32 bits integer.</p></li>
 *<li><p><em>depth32f</em> : Depth on a 32 bits floating point.</p></li>
 *<li><p><em>stencil1</em> : Stencil on 1 bit.</p></li>
 *<li><p><em>stencil8</em> : Stencil on a 8 bits integer.</p></li>
 *</ul></li>
 *<li><p><b>postfx</b> : <em>value</em></p>
 *Defines a post render effect to use. The parameters depend on the chosen effect.<br /></li>
 *<li><p><b>stereo</b> : <em>boolean</em></p>
 *Tells if we use stereoscopic display mode.<br /></li>
 *<li><p><b>tone_mapping</b> : <em>name</em></p>
 *Defines the tone mapping operator to use with the render target.<br /></li>
 *<li><p><b>ssao</b> : <em>section</em></p>
 *Defines a new section describing the Screen Space Ambient Occlusion.<br /></li>
 *</ol>
 *<br />
 *\subsection subsection_ssao ssao section
 *<ol>
 *<li><p><b>enabled</b> : <em>boolean</em></p>
 *Defines the activation status of SSAO.<br /></li>
 *<li><p><b>high_quality</b> : <em>boolean</em></p>
 *Defines the quality of the effect.<br /></li>
 *<li><p><b>radius</b> : <em>real</em></p>
 *Defines the radius of the effect (expressesd in meters).<br /></li>
 *<li><p><b>bias</b> : <em>real</em></p>
 *Defines the bias of the effect.<br /></li>
 *<li><p><b>intensity</b> : <em>real</em></p>
 *Defines the intensity of the effect.<br /></li>
 *<li><p><b>num_samples</b> : <em>int</em></p>
 *Defines the number of samples per pixel.<br /></li>
 *<li><p><b>edge_sharpness</b> : <em>real</em></p>
 *Defines the edge sharpness, in the blur pass.<br /></li>
 *<li><p><b>blur_step_size</b> : <em>int</em></p>
 *Defines the size of a step in the blur pass.<br /></li>
 *<li><p><b>blur_radius</b> : <em>int</em></p>
 *Defines the blur radius.<br /></li>
 *</ol>
 */
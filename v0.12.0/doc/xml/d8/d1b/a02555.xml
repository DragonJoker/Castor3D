<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="d8/d1b/a02555" kind="class" language="C++" prot="public">
    <compoundname>castor3d::GpuBufferPool</compoundname>
    <basecompoundref prot="public" virt="non-virtual">castor::OwnedBy&lt; RenderSystem &gt;</basecompoundref>
    <includes local="no">GpuBufferPool.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d8/d1b/a02555_1a3106c2689cb537e93b463a7d7ee43afc" prot="public" static="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="da/de3/a01398_1a0a98a84dc073e73dcc8eb0995630fdab" kindref="member">GpuBuddyBuffer</ref> &gt; &gt;</type>
        <definition>using castor3d::GpuBufferPool::BufferArray =  std::vector&lt; std::unique_ptr&lt; GpuBuddyBuffer &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>BufferArray</name>
        <qualifiedname>castor3d::GpuBufferPool::BufferArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/GpuBufferPool.hpp" line="19" column="1" bodyfile="Buffer/GpuBufferPool.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d8/d1b/a02555_1ad64908468fea400be3a9cadba298675c" prot="private" static="no" mutable="no">
        <type>castor::String</type>
        <definition>castor::String castor3d::GpuBufferPool::m_debugName</definition>
        <argsstring></argsstring>
        <name>m_debugName</name>
        <qualifiedname>castor3d::GpuBufferPool::m_debugName</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/GpuBufferPool.hpp" line="94" column="16" bodyfile="Buffer/GpuBufferPool.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d1b/a02555_1ae5603ab6d27c857941ed1d84d8359572" prot="private" static="no" mutable="no">
        <type>std::map&lt; uint32_t, <ref refid="d8/d1b/a02555_1a3106c2689cb537e93b463a7d7ee43afc" kindref="member">BufferArray</ref> &gt;</type>
        <definition>std::map&lt; uint32_t, BufferArray &gt; castor3d::GpuBufferPool::m_buffers</definition>
        <argsstring></argsstring>
        <name>m_buffers</name>
        <qualifiedname>castor3d::GpuBufferPool::m_buffers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/GpuBufferPool.hpp" line="95" column="10" bodyfile="Buffer/GpuBufferPool.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d1b/a02555_1a83119e394d2624f2a7b82c0124ec6b01" prot="private" static="no" mutable="no">
        <type><ref refid="d8/d1b/a02555_1a3106c2689cb537e93b463a7d7ee43afc" kindref="member">BufferArray</ref></type>
        <definition>BufferArray castor3d::GpuBufferPool::m_nonSharedBuffers</definition>
        <argsstring></argsstring>
        <name>m_nonSharedBuffers</name>
        <qualifiedname>castor3d::GpuBufferPool::m_nonSharedBuffers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/GpuBufferPool.hpp" line="96" column="13" bodyfile="Buffer/GpuBufferPool.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d1b/a02555_1a7a4d9b82b60e3ed5454394f5e35f520e" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t castor3d::GpuBufferPool::m_minBlockSize</definition>
        <argsstring></argsstring>
        <name>m_minBlockSize</name>
        <qualifiedname>castor3d::GpuBufferPool::m_minBlockSize</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/GpuBufferPool.hpp" line="97" column="10" bodyfile="Buffer/GpuBufferPool.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d8/d1b/a02555_1a8c7200fe997172ab8149e01d4cbcf775" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d22/a00245_1ab7d762f315ad9902201ba70979ed2ef0" kindref="member">C3D_API</ref></type>
        <definition>C3D_API castor3d::GpuBufferPool::GpuBufferPool</definition>
        <argsstring>(RenderDevice const &amp;device, castor::String debugName)</argsstring>
        <name>GpuBufferPool</name>
        <qualifiedname>castor3d::GpuBufferPool::GpuBufferPool</qualifiedname>
        <param>
          <type><ref refid="d4/d87/a03963" kindref="compound">RenderDevice</ref> const &amp;</type>
          <declname>device</declname>
        </param>
        <param>
          <type>castor::String</type>
          <declname>debugName</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">device</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPU device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">debugName</parametername>
</parameternamelist>
<parameterdescription>
<para>The debug name. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/GpuBufferPool.hpp" line="32" column="9"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1b/a02555_1af2df2e4d26a67cb709cb3ae8ae60135b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d22/a00245_1ab7d762f315ad9902201ba70979ed2ef0" kindref="member">C3D_API</ref> void</type>
        <definition>C3D_API void castor3d::GpuBufferPool::cleanup</definition>
        <argsstring>()</argsstring>
        <name>cleanup</name>
        <qualifiedname>castor3d::GpuBufferPool::cleanup</qualifiedname>
        <briefdescription>
<para>Cleans up all GPU buffers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/GpuBufferPool.hpp" line="40" column="14"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1b/a02555_1a3547de7ab6ed45b2904f13e5518b57da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d22/a00245_1ab7d762f315ad9902201ba70979ed2ef0" kindref="member">C3D_API</ref> void</type>
        <definition>C3D_API void castor3d::GpuBufferPool::upload</definition>
        <argsstring>(ashes::CommandBuffer const &amp;cb)</argsstring>
        <name>upload</name>
        <qualifiedname>castor3d::GpuBufferPool::upload</qualifiedname>
        <param>
          <type>ashes::CommandBuffer const &amp;</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Uploads all ready memory ranges to VRAM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The command buffer on which transfer commands are recorded. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/GpuBufferPool.hpp" line="49" column="14"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1b/a02555_1a77047c32b7f20d54c9e3cece0b2773fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/d5d/a02503" kindref="compound">GpuBufferOffsetT</ref>&lt; DataT &gt;</type>
        <definition>GpuBufferOffsetT&lt; DataT &gt; castor3d::GpuBufferPool::getBuffer</definition>
        <argsstring>(VkBufferUsageFlags target, VkDeviceSize count, VkMemoryPropertyFlags flags)</argsstring>
        <name>getBuffer</name>
        <qualifiedname>castor3d::GpuBufferPool::getBuffer</qualifiedname>
        <param>
          <type>VkBufferUsageFlags</type>
          <declname>target</declname>
        </param>
        <param>
          <type>VkDeviceSize</type>
          <declname>count</declname>
        </param>
        <param>
          <type>VkMemoryPropertyFlags</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Retrieves a GPU buffer with the given size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>The wanted buffer element count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer memory flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The GPU buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/GpuBufferPool.hpp" line="65" column="18"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1b/a02555_1a3937211fb1027550521c8302971ee319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataT</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void castor3d::GpuBufferPool::putBuffer</definition>
        <argsstring>(GpuBufferOffsetT&lt; DataT &gt; const &amp;bufferOffset)</argsstring>
        <name>putBuffer</name>
        <qualifiedname>castor3d::GpuBufferPool::putBuffer</qualifiedname>
        <param>
          <type><ref refid="d1/d5d/a02503" kindref="compound">GpuBufferOffsetT</ref>&lt; DataT &gt; const &amp;</type>
          <declname>bufferOffset</declname>
        </param>
        <briefdescription>
<para>Releases a GPU buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bufferOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer offset to release. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/GpuBufferPool.hpp" line="77" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d8/d1b/a02555_1add990635da365fe8fc067fa90fe84caa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d22/a00245_1ab7d762f315ad9902201ba70979ed2ef0" kindref="member">C3D_API</ref> BufferArray::iterator</type>
        <definition>C3D_API BufferArray::iterator castor3d::GpuBufferPool::doFindBuffer</definition>
        <argsstring>(VkDeviceSize size, BufferArray &amp;array)</argsstring>
        <name>doFindBuffer</name>
        <qualifiedname>castor3d::GpuBufferPool::doFindBuffer</qualifiedname>
        <param>
          <type>VkDeviceSize</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="d8/d1b/a02555_1a3106c2689cb537e93b463a7d7ee43afc" kindref="member">BufferArray</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/GpuBufferPool.hpp" line="80" column="31"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1b/a02555_1a401572c30d65f6e2bc1505adf69ca58f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d22/a00245_1ab7d762f315ad9902201ba70979ed2ef0" kindref="member">C3D_API</ref> uint32_t</type>
        <definition>C3D_API uint32_t castor3d::GpuBufferPool::doMakeKey</definition>
        <argsstring>(VkBufferUsageFlags target, VkMemoryPropertyFlags flags)</argsstring>
        <name>doMakeKey</name>
        <qualifiedname>castor3d::GpuBufferPool::doMakeKey</qualifiedname>
        <param>
          <type>VkBufferUsageFlags</type>
          <declname>target</declname>
        </param>
        <param>
          <type>VkMemoryPropertyFlags</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/GpuBufferPool.hpp" line="82" column="18"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1b/a02555_1a00004970ad02ab3e7abb1715080864f9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d22/a00245_1ab7d762f315ad9902201ba70979ed2ef0" kindref="member">C3D_API</ref> <ref refid="d7/d7d/a02527" kindref="compound">GpuBufferBase</ref> &amp;</type>
        <definition>C3D_API GpuBufferBase &amp; castor3d::GpuBufferPool::doGetBuffer</definition>
        <argsstring>(VkDeviceSize size, VkBufferUsageFlags target, VkMemoryPropertyFlags memory, MemChunk &amp;chunk)</argsstring>
        <name>doGetBuffer</name>
        <qualifiedname>castor3d::GpuBufferPool::doGetBuffer</qualifiedname>
        <param>
          <type>VkDeviceSize</type>
          <declname>size</declname>
        </param>
        <param>
          <type>VkBufferUsageFlags</type>
          <declname>target</declname>
        </param>
        <param>
          <type>VkMemoryPropertyFlags</type>
          <declname>memory</declname>
        </param>
        <param>
          <type><ref refid="d9/dce/a02519" kindref="compound">MemChunk</ref> &amp;</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/GpuBufferPool.hpp" line="84" column="24"/>
      </memberdef>
      <memberdef kind="function" id="d8/d1b/a02555_1af74abc8c6f9186ce0ccdd1236093b08d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d22/a00245_1ab7d762f315ad9902201ba70979ed2ef0" kindref="member">C3D_API</ref> void</type>
        <definition>C3D_API void castor3d::GpuBufferPool::doPutBuffer</definition>
        <argsstring>(GpuBufferBase const &amp;buffer, VkBufferUsageFlags target, VkMemoryPropertyFlags memory, MemChunk const &amp;chunk)</argsstring>
        <name>doPutBuffer</name>
        <qualifiedname>castor3d::GpuBufferPool::doPutBuffer</qualifiedname>
        <param>
          <type><ref refid="d7/d7d/a02527" kindref="compound">GpuBufferBase</ref> const &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>VkBufferUsageFlags</type>
          <declname>target</declname>
        </param>
        <param>
          <type>VkMemoryPropertyFlags</type>
          <declname>memory</declname>
        </param>
        <param>
          <type><ref refid="d9/dce/a02519" kindref="compound">MemChunk</ref> const &amp;</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Buffer/GpuBufferPool.hpp" line="88" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>castor3d::GpuBufferPool</label>
        <link refid="d8/d1b/a02555"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>castor::OwnedBy&lt; RenderSystem &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>castor3d::GpuBufferPool</label>
        <link refid="d8/d1b/a02555"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>castor::OwnedBy&lt; RenderSystem &gt;</label>
      </node>
    </collaborationgraph>
    <location file="Buffer/GpuBufferPool.hpp" line="15" column="1" bodyfile="Buffer/GpuBufferPool.hpp" bodystart="17" bodyend="98"/>
    <listofallmembers>
      <member refid="d8/d1b/a02555_1a3106c2689cb537e93b463a7d7ee43afc" prot="public" virt="non-virtual"><scope>castor3d::GpuBufferPool</scope><name>BufferArray</name></member>
      <member refid="d8/d1b/a02555_1af2df2e4d26a67cb709cb3ae8ae60135b" prot="public" virt="non-virtual"><scope>castor3d::GpuBufferPool</scope><name>cleanup</name></member>
      <member refid="d8/d1b/a02555_1add990635da365fe8fc067fa90fe84caa" prot="private" virt="non-virtual"><scope>castor3d::GpuBufferPool</scope><name>doFindBuffer</name></member>
      <member refid="d8/d1b/a02555_1a00004970ad02ab3e7abb1715080864f9" prot="private" virt="non-virtual"><scope>castor3d::GpuBufferPool</scope><name>doGetBuffer</name></member>
      <member refid="d8/d1b/a02555_1a401572c30d65f6e2bc1505adf69ca58f" prot="private" virt="non-virtual"><scope>castor3d::GpuBufferPool</scope><name>doMakeKey</name></member>
      <member refid="d8/d1b/a02555_1af74abc8c6f9186ce0ccdd1236093b08d" prot="private" virt="non-virtual"><scope>castor3d::GpuBufferPool</scope><name>doPutBuffer</name></member>
      <member refid="d8/d1b/a02555_1a77047c32b7f20d54c9e3cece0b2773fd" prot="public" virt="non-virtual"><scope>castor3d::GpuBufferPool</scope><name>getBuffer</name></member>
      <member refid="d8/d1b/a02555_1a8c7200fe997172ab8149e01d4cbcf775" prot="public" virt="non-virtual"><scope>castor3d::GpuBufferPool</scope><name>GpuBufferPool</name></member>
      <member refid="d8/d1b/a02555_1ae5603ab6d27c857941ed1d84d8359572" prot="private" virt="non-virtual"><scope>castor3d::GpuBufferPool</scope><name>m_buffers</name></member>
      <member refid="d8/d1b/a02555_1ad64908468fea400be3a9cadba298675c" prot="private" virt="non-virtual"><scope>castor3d::GpuBufferPool</scope><name>m_debugName</name></member>
      <member refid="d8/d1b/a02555_1a7a4d9b82b60e3ed5454394f5e35f520e" prot="private" virt="non-virtual"><scope>castor3d::GpuBufferPool</scope><name>m_minBlockSize</name></member>
      <member refid="d8/d1b/a02555_1a83119e394d2624f2a7b82c0124ec6b01" prot="private" virt="non-virtual"><scope>castor3d::GpuBufferPool</scope><name>m_nonSharedBuffers</name></member>
      <member refid="d8/d1b/a02555_1a3937211fb1027550521c8302971ee319" prot="public" virt="non-virtual"><scope>castor3d::GpuBufferPool</scope><name>putBuffer</name></member>
      <member refid="d8/d1b/a02555_1a3547de7ab6ed45b2904f13e5518b57da" prot="public" virt="non-virtual"><scope>castor3d::GpuBufferPool</scope><name>upload</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

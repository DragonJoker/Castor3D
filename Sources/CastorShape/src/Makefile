# Makefile.in generated by automake 1.10.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/CastorShape
pkglibdir = $(libdir)/CastorShape
pkgincludedir = $(includedir)/CastorShape
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
bin_PROGRAMS = castorshape$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_castorshape_OBJECTS = GeometriesListFrame.$(OBJEXT) \
	NewConeDialog.$(OBJEXT) NewCubeDialog.$(OBJEXT) \
	NewCylinderDialog.$(OBJEXT) NewGeometryDialog.$(OBJEXT) \
	NewIcosaedronDialog.$(OBJEXT) NewPlaneDialog.$(OBJEXT) \
	NewSphereDialog.$(OBJEXT) NewTorusDialog.$(OBJEXT) \
	CastorShape.$(OBJEXT) MainFrame.$(OBJEXT) \
	RenderPanel.$(OBJEXT) EnvironmentFrame.$(OBJEXT) \
	MaterialPanel.$(OBJEXT) MaterialsFrame.$(OBJEXT) \
	MaterialsListView.$(OBJEXT) NewMaterialDialog.$(OBJEXT) \
	PrecompiledHeaders.$(OBJEXT)
castorshape_OBJECTS = $(am_castorshape_OBJECTS)
am__DEPENDENCIES_1 =
castorshape_DEPENDENCIES = $(am__DEPENDENCIES_1)
castorshape_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(castorshape_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(castorshape_SOURCES)
DIST_SOURCES = $(castorshape_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/dragonjoker/Projects/CastorShape/CastorShape/missing --run aclocal-1.10
AMTAR = ${SHELL} /home/dragonjoker/Projects/CastorShape/CastorShape/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/dragonjoker/Projects/CastorShape/CastorShape/missing --run autoconf
AUTOHEADER = ${SHELL} /home/dragonjoker/Projects/CastorShape/CastorShape/missing --run autoheader
AUTOMAKE = ${SHELL} /home/dragonjoker/Projects/CastorShape/CastorShape/missing --run automake-1.10
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DSYMUTIL = 
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
F77 = gfortran
FFLAGS = -g -O2
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MAINT = #
MAKEINFO = ${SHELL} /home/dragonjoker/Projects/CastorShape/CastorShape/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
NMEDIT = 
NO_PREFIX_PACKAGE_DATA_DIR = share
NO_PREFIX_PACKAGE_DOC_DIR = doc/CastorShape
NO_PREFIX_PACKAGE_HELP_DIR = share/help
NO_PREFIX_PACKAGE_MENU_DIR = share
NO_PREFIX_PACKAGE_PIXMAPS_DIR = share/pixmaps
OBJEXT = o
PACKAGE = CastorShape
PACKAGE_BUGREPORT = 
PACKAGE_DATA_DIR = /usr/share
PACKAGE_DOC_DIR = /usr/doc/CastorShape
PACKAGE_HELP_DIR = /usr/share/help
PACKAGE_MENU_DIR = /usr/share
PACKAGE_NAME = 
PACKAGE_PIXMAPS_DIR = /usr/share/pixmaps
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
VERSION = 0.1
WX_CFLAGS = -I/usr/lib/wx/include/gtk2-unicode-release-2.8 -I/usr/include/wx-2.8 -D_FILE_OFFSET_BITS=64 -D_LARGE_FILES -D__WXGTK__ -pthread
WX_CFLAGS_ONLY = -pthread
WX_CONFIG_PATH = /usr/bin/wx-config
WX_CPPFLAGS = -I/usr/lib/wx/include/gtk2-unicode-release-2.8 -I/usr/include/wx-2.8 -D_FILE_OFFSET_BITS=64 -D_LARGE_FILES -D__WXGTK__
WX_CXXFLAGS = -I/usr/lib/wx/include/gtk2-unicode-release-2.8 -I/usr/include/wx-2.8 -D_FILE_OFFSET_BITS=64 -D_LARGE_FILES -D__WXGTK__ -pthread
WX_CXXFLAGS_ONLY = 
WX_LIBS = 
WX_LIBS_STATIC = 
WX_RESCOMP = 
WX_VERSION = 2.8.7
abs_builddir = /home/dragonjoker/Projects/CastorShape/CastorShape/src
abs_srcdir = /home/dragonjoker/Projects/CastorShape/CastorShape/src
abs_top_builddir = /home/dragonjoker/Projects/CastorShape/CastorShape
abs_top_srcdir = /home/dragonjoker/Projects/CastorShape/CastorShape
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = gfortran
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/dragonjoker/Projects/CastorShape/CastorShape/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_builddir = ..
top_srcdir = ..
INCLUDES = \
	$(WX_CXXFLAGS)\
	 -I/home/dragonjoker/Projects/GeneralLib/src -I/home/dragonjoker/Projects/CastorShape/Castor3D/include -I/home/dragonjoker/Projects/GLRenderSystem/src

AM_CXXFLAGS = \
	 -D_UNICODE\
	`wx-config --cppflags`\
	 -Wall\
	 -g

castorshape_SOURCES = \
	CastorShape/geometry/GeometriesListFrame.cpp\
	CastorShape/geometry/NewConeDialog.cpp\
	CastorShape/geometry/NewCubeDialog.cpp\
	CastorShape/geometry/NewCylinderDialog.cpp\
	CastorShape/geometry/NewGeometryDialog.cpp\
	CastorShape/geometry/NewIcosaedronDialog.cpp\
	CastorShape/geometry/NewPlaneDialog.cpp\
	CastorShape/geometry/NewSphereDialog.cpp\
	CastorShape/geometry/NewTorusDialog.cpp\
	CastorShape/main/CastorShape.cpp\
	CastorShape/main/MainFrame.cpp\
	CastorShape/main/RenderPanel.cpp\
	CastorShape/material/EnvironmentFrame.cpp\
	CastorShape/material/MaterialPanel.cpp\
	CastorShape/material/MaterialsFrame.cpp\
	CastorShape/material/MaterialsListView.cpp\
	CastorShape/material/NewMaterialDialog.cpp\
	CastorShape/precompiled_headers/PrecompiledHeaders.cpp

castorshape_LDFLAGS = \
	`wx-config --libs`

castorshape_LDADD = \
	$(WX_LIBS)\
	 -lcastor3d -lgenerallib -lboost_thread -lfreeimageplus

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
castorshape$(EXEEXT): $(castorshape_OBJECTS) $(castorshape_DEPENDENCIES) 
	@rm -f castorshape$(EXEEXT)
	$(castorshape_LINK) $(castorshape_OBJECTS) $(castorshape_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/CastorShape.Po
include ./$(DEPDIR)/EnvironmentFrame.Po
include ./$(DEPDIR)/GeometriesListFrame.Po
include ./$(DEPDIR)/MainFrame.Po
include ./$(DEPDIR)/MaterialPanel.Po
include ./$(DEPDIR)/MaterialsFrame.Po
include ./$(DEPDIR)/MaterialsListView.Po
include ./$(DEPDIR)/NewConeDialog.Po
include ./$(DEPDIR)/NewCubeDialog.Po
include ./$(DEPDIR)/NewCylinderDialog.Po
include ./$(DEPDIR)/NewGeometryDialog.Po
include ./$(DEPDIR)/NewIcosaedronDialog.Po
include ./$(DEPDIR)/NewMaterialDialog.Po
include ./$(DEPDIR)/NewPlaneDialog.Po
include ./$(DEPDIR)/NewSphereDialog.Po
include ./$(DEPDIR)/NewTorusDialog.Po
include ./$(DEPDIR)/PrecompiledHeaders.Po
include ./$(DEPDIR)/RenderPanel.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

GeometriesListFrame.o: CastorShape/geometry/GeometriesListFrame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GeometriesListFrame.o -MD -MP -MF $(DEPDIR)/GeometriesListFrame.Tpo -c -o GeometriesListFrame.o `test -f 'CastorShape/geometry/GeometriesListFrame.cpp' || echo '$(srcdir)/'`CastorShape/geometry/GeometriesListFrame.cpp
	mv -f $(DEPDIR)/GeometriesListFrame.Tpo $(DEPDIR)/GeometriesListFrame.Po
#	source='CastorShape/geometry/GeometriesListFrame.cpp' object='GeometriesListFrame.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GeometriesListFrame.o `test -f 'CastorShape/geometry/GeometriesListFrame.cpp' || echo '$(srcdir)/'`CastorShape/geometry/GeometriesListFrame.cpp

GeometriesListFrame.obj: CastorShape/geometry/GeometriesListFrame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GeometriesListFrame.obj -MD -MP -MF $(DEPDIR)/GeometriesListFrame.Tpo -c -o GeometriesListFrame.obj `if test -f 'CastorShape/geometry/GeometriesListFrame.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/GeometriesListFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/GeometriesListFrame.cpp'; fi`
	mv -f $(DEPDIR)/GeometriesListFrame.Tpo $(DEPDIR)/GeometriesListFrame.Po
#	source='CastorShape/geometry/GeometriesListFrame.cpp' object='GeometriesListFrame.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GeometriesListFrame.obj `if test -f 'CastorShape/geometry/GeometriesListFrame.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/GeometriesListFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/GeometriesListFrame.cpp'; fi`

NewConeDialog.o: CastorShape/geometry/NewConeDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewConeDialog.o -MD -MP -MF $(DEPDIR)/NewConeDialog.Tpo -c -o NewConeDialog.o `test -f 'CastorShape/geometry/NewConeDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewConeDialog.cpp
	mv -f $(DEPDIR)/NewConeDialog.Tpo $(DEPDIR)/NewConeDialog.Po
#	source='CastorShape/geometry/NewConeDialog.cpp' object='NewConeDialog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewConeDialog.o `test -f 'CastorShape/geometry/NewConeDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewConeDialog.cpp

NewConeDialog.obj: CastorShape/geometry/NewConeDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewConeDialog.obj -MD -MP -MF $(DEPDIR)/NewConeDialog.Tpo -c -o NewConeDialog.obj `if test -f 'CastorShape/geometry/NewConeDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewConeDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewConeDialog.cpp'; fi`
	mv -f $(DEPDIR)/NewConeDialog.Tpo $(DEPDIR)/NewConeDialog.Po
#	source='CastorShape/geometry/NewConeDialog.cpp' object='NewConeDialog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewConeDialog.obj `if test -f 'CastorShape/geometry/NewConeDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewConeDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewConeDialog.cpp'; fi`

NewCubeDialog.o: CastorShape/geometry/NewCubeDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewCubeDialog.o -MD -MP -MF $(DEPDIR)/NewCubeDialog.Tpo -c -o NewCubeDialog.o `test -f 'CastorShape/geometry/NewCubeDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewCubeDialog.cpp
	mv -f $(DEPDIR)/NewCubeDialog.Tpo $(DEPDIR)/NewCubeDialog.Po
#	source='CastorShape/geometry/NewCubeDialog.cpp' object='NewCubeDialog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewCubeDialog.o `test -f 'CastorShape/geometry/NewCubeDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewCubeDialog.cpp

NewCubeDialog.obj: CastorShape/geometry/NewCubeDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewCubeDialog.obj -MD -MP -MF $(DEPDIR)/NewCubeDialog.Tpo -c -o NewCubeDialog.obj `if test -f 'CastorShape/geometry/NewCubeDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewCubeDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewCubeDialog.cpp'; fi`
	mv -f $(DEPDIR)/NewCubeDialog.Tpo $(DEPDIR)/NewCubeDialog.Po
#	source='CastorShape/geometry/NewCubeDialog.cpp' object='NewCubeDialog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewCubeDialog.obj `if test -f 'CastorShape/geometry/NewCubeDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewCubeDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewCubeDialog.cpp'; fi`

NewCylinderDialog.o: CastorShape/geometry/NewCylinderDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewCylinderDialog.o -MD -MP -MF $(DEPDIR)/NewCylinderDialog.Tpo -c -o NewCylinderDialog.o `test -f 'CastorShape/geometry/NewCylinderDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewCylinderDialog.cpp
	mv -f $(DEPDIR)/NewCylinderDialog.Tpo $(DEPDIR)/NewCylinderDialog.Po
#	source='CastorShape/geometry/NewCylinderDialog.cpp' object='NewCylinderDialog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewCylinderDialog.o `test -f 'CastorShape/geometry/NewCylinderDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewCylinderDialog.cpp

NewCylinderDialog.obj: CastorShape/geometry/NewCylinderDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewCylinderDialog.obj -MD -MP -MF $(DEPDIR)/NewCylinderDialog.Tpo -c -o NewCylinderDialog.obj `if test -f 'CastorShape/geometry/NewCylinderDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewCylinderDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewCylinderDialog.cpp'; fi`
	mv -f $(DEPDIR)/NewCylinderDialog.Tpo $(DEPDIR)/NewCylinderDialog.Po
#	source='CastorShape/geometry/NewCylinderDialog.cpp' object='NewCylinderDialog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewCylinderDialog.obj `if test -f 'CastorShape/geometry/NewCylinderDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewCylinderDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewCylinderDialog.cpp'; fi`

NewGeometryDialog.o: CastorShape/geometry/NewGeometryDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewGeometryDialog.o -MD -MP -MF $(DEPDIR)/NewGeometryDialog.Tpo -c -o NewGeometryDialog.o `test -f 'CastorShape/geometry/NewGeometryDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewGeometryDialog.cpp
	mv -f $(DEPDIR)/NewGeometryDialog.Tpo $(DEPDIR)/NewGeometryDialog.Po
#	source='CastorShape/geometry/NewGeometryDialog.cpp' object='NewGeometryDialog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewGeometryDialog.o `test -f 'CastorShape/geometry/NewGeometryDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewGeometryDialog.cpp

NewGeometryDialog.obj: CastorShape/geometry/NewGeometryDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewGeometryDialog.obj -MD -MP -MF $(DEPDIR)/NewGeometryDialog.Tpo -c -o NewGeometryDialog.obj `if test -f 'CastorShape/geometry/NewGeometryDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewGeometryDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewGeometryDialog.cpp'; fi`
	mv -f $(DEPDIR)/NewGeometryDialog.Tpo $(DEPDIR)/NewGeometryDialog.Po
#	source='CastorShape/geometry/NewGeometryDialog.cpp' object='NewGeometryDialog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewGeometryDialog.obj `if test -f 'CastorShape/geometry/NewGeometryDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewGeometryDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewGeometryDialog.cpp'; fi`

NewIcosaedronDialog.o: CastorShape/geometry/NewIcosaedronDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewIcosaedronDialog.o -MD -MP -MF $(DEPDIR)/NewIcosaedronDialog.Tpo -c -o NewIcosaedronDialog.o `test -f 'CastorShape/geometry/NewIcosaedronDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewIcosaedronDialog.cpp
	mv -f $(DEPDIR)/NewIcosaedronDialog.Tpo $(DEPDIR)/NewIcosaedronDialog.Po
#	source='CastorShape/geometry/NewIcosaedronDialog.cpp' object='NewIcosaedronDialog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewIcosaedronDialog.o `test -f 'CastorShape/geometry/NewIcosaedronDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewIcosaedronDialog.cpp

NewIcosaedronDialog.obj: CastorShape/geometry/NewIcosaedronDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewIcosaedronDialog.obj -MD -MP -MF $(DEPDIR)/NewIcosaedronDialog.Tpo -c -o NewIcosaedronDialog.obj `if test -f 'CastorShape/geometry/NewIcosaedronDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewIcosaedronDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewIcosaedronDialog.cpp'; fi`
	mv -f $(DEPDIR)/NewIcosaedronDialog.Tpo $(DEPDIR)/NewIcosaedronDialog.Po
#	source='CastorShape/geometry/NewIcosaedronDialog.cpp' object='NewIcosaedronDialog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewIcosaedronDialog.obj `if test -f 'CastorShape/geometry/NewIcosaedronDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewIcosaedronDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewIcosaedronDialog.cpp'; fi`

NewPlaneDialog.o: CastorShape/geometry/NewPlaneDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewPlaneDialog.o -MD -MP -MF $(DEPDIR)/NewPlaneDialog.Tpo -c -o NewPlaneDialog.o `test -f 'CastorShape/geometry/NewPlaneDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewPlaneDialog.cpp
	mv -f $(DEPDIR)/NewPlaneDialog.Tpo $(DEPDIR)/NewPlaneDialog.Po
#	source='CastorShape/geometry/NewPlaneDialog.cpp' object='NewPlaneDialog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewPlaneDialog.o `test -f 'CastorShape/geometry/NewPlaneDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewPlaneDialog.cpp

NewPlaneDialog.obj: CastorShape/geometry/NewPlaneDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewPlaneDialog.obj -MD -MP -MF $(DEPDIR)/NewPlaneDialog.Tpo -c -o NewPlaneDialog.obj `if test -f 'CastorShape/geometry/NewPlaneDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewPlaneDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewPlaneDialog.cpp'; fi`
	mv -f $(DEPDIR)/NewPlaneDialog.Tpo $(DEPDIR)/NewPlaneDialog.Po
#	source='CastorShape/geometry/NewPlaneDialog.cpp' object='NewPlaneDialog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewPlaneDialog.obj `if test -f 'CastorShape/geometry/NewPlaneDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewPlaneDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewPlaneDialog.cpp'; fi`

NewSphereDialog.o: CastorShape/geometry/NewSphereDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewSphereDialog.o -MD -MP -MF $(DEPDIR)/NewSphereDialog.Tpo -c -o NewSphereDialog.o `test -f 'CastorShape/geometry/NewSphereDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewSphereDialog.cpp
	mv -f $(DEPDIR)/NewSphereDialog.Tpo $(DEPDIR)/NewSphereDialog.Po
#	source='CastorShape/geometry/NewSphereDialog.cpp' object='NewSphereDialog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewSphereDialog.o `test -f 'CastorShape/geometry/NewSphereDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewSphereDialog.cpp

NewSphereDialog.obj: CastorShape/geometry/NewSphereDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewSphereDialog.obj -MD -MP -MF $(DEPDIR)/NewSphereDialog.Tpo -c -o NewSphereDialog.obj `if test -f 'CastorShape/geometry/NewSphereDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewSphereDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewSphereDialog.cpp'; fi`
	mv -f $(DEPDIR)/NewSphereDialog.Tpo $(DEPDIR)/NewSphereDialog.Po
#	source='CastorShape/geometry/NewSphereDialog.cpp' object='NewSphereDialog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewSphereDialog.obj `if test -f 'CastorShape/geometry/NewSphereDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewSphereDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewSphereDialog.cpp'; fi`

NewTorusDialog.o: CastorShape/geometry/NewTorusDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewTorusDialog.o -MD -MP -MF $(DEPDIR)/NewTorusDialog.Tpo -c -o NewTorusDialog.o `test -f 'CastorShape/geometry/NewTorusDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewTorusDialog.cpp
	mv -f $(DEPDIR)/NewTorusDialog.Tpo $(DEPDIR)/NewTorusDialog.Po
#	source='CastorShape/geometry/NewTorusDialog.cpp' object='NewTorusDialog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewTorusDialog.o `test -f 'CastorShape/geometry/NewTorusDialog.cpp' || echo '$(srcdir)/'`CastorShape/geometry/NewTorusDialog.cpp

NewTorusDialog.obj: CastorShape/geometry/NewTorusDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewTorusDialog.obj -MD -MP -MF $(DEPDIR)/NewTorusDialog.Tpo -c -o NewTorusDialog.obj `if test -f 'CastorShape/geometry/NewTorusDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewTorusDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewTorusDialog.cpp'; fi`
	mv -f $(DEPDIR)/NewTorusDialog.Tpo $(DEPDIR)/NewTorusDialog.Po
#	source='CastorShape/geometry/NewTorusDialog.cpp' object='NewTorusDialog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewTorusDialog.obj `if test -f 'CastorShape/geometry/NewTorusDialog.cpp'; then $(CYGPATH_W) 'CastorShape/geometry/NewTorusDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/geometry/NewTorusDialog.cpp'; fi`

CastorShape.o: CastorShape/main/CastorShape.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CastorShape.o -MD -MP -MF $(DEPDIR)/CastorShape.Tpo -c -o CastorShape.o `test -f 'CastorShape/main/CastorShape.cpp' || echo '$(srcdir)/'`CastorShape/main/CastorShape.cpp
	mv -f $(DEPDIR)/CastorShape.Tpo $(DEPDIR)/CastorShape.Po
#	source='CastorShape/main/CastorShape.cpp' object='CastorShape.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CastorShape.o `test -f 'CastorShape/main/CastorShape.cpp' || echo '$(srcdir)/'`CastorShape/main/CastorShape.cpp

CastorShape.obj: CastorShape/main/CastorShape.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CastorShape.obj -MD -MP -MF $(DEPDIR)/CastorShape.Tpo -c -o CastorShape.obj `if test -f 'CastorShape/main/CastorShape.cpp'; then $(CYGPATH_W) 'CastorShape/main/CastorShape.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/main/CastorShape.cpp'; fi`
	mv -f $(DEPDIR)/CastorShape.Tpo $(DEPDIR)/CastorShape.Po
#	source='CastorShape/main/CastorShape.cpp' object='CastorShape.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CastorShape.obj `if test -f 'CastorShape/main/CastorShape.cpp'; then $(CYGPATH_W) 'CastorShape/main/CastorShape.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/main/CastorShape.cpp'; fi`

MainFrame.o: CastorShape/main/MainFrame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MainFrame.o -MD -MP -MF $(DEPDIR)/MainFrame.Tpo -c -o MainFrame.o `test -f 'CastorShape/main/MainFrame.cpp' || echo '$(srcdir)/'`CastorShape/main/MainFrame.cpp
	mv -f $(DEPDIR)/MainFrame.Tpo $(DEPDIR)/MainFrame.Po
#	source='CastorShape/main/MainFrame.cpp' object='MainFrame.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MainFrame.o `test -f 'CastorShape/main/MainFrame.cpp' || echo '$(srcdir)/'`CastorShape/main/MainFrame.cpp

MainFrame.obj: CastorShape/main/MainFrame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MainFrame.obj -MD -MP -MF $(DEPDIR)/MainFrame.Tpo -c -o MainFrame.obj `if test -f 'CastorShape/main/MainFrame.cpp'; then $(CYGPATH_W) 'CastorShape/main/MainFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/main/MainFrame.cpp'; fi`
	mv -f $(DEPDIR)/MainFrame.Tpo $(DEPDIR)/MainFrame.Po
#	source='CastorShape/main/MainFrame.cpp' object='MainFrame.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MainFrame.obj `if test -f 'CastorShape/main/MainFrame.cpp'; then $(CYGPATH_W) 'CastorShape/main/MainFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/main/MainFrame.cpp'; fi`

RenderPanel.o: CastorShape/main/RenderPanel.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RenderPanel.o -MD -MP -MF $(DEPDIR)/RenderPanel.Tpo -c -o RenderPanel.o `test -f 'CastorShape/main/RenderPanel.cpp' || echo '$(srcdir)/'`CastorShape/main/RenderPanel.cpp
	mv -f $(DEPDIR)/RenderPanel.Tpo $(DEPDIR)/RenderPanel.Po
#	source='CastorShape/main/RenderPanel.cpp' object='RenderPanel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RenderPanel.o `test -f 'CastorShape/main/RenderPanel.cpp' || echo '$(srcdir)/'`CastorShape/main/RenderPanel.cpp

RenderPanel.obj: CastorShape/main/RenderPanel.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RenderPanel.obj -MD -MP -MF $(DEPDIR)/RenderPanel.Tpo -c -o RenderPanel.obj `if test -f 'CastorShape/main/RenderPanel.cpp'; then $(CYGPATH_W) 'CastorShape/main/RenderPanel.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/main/RenderPanel.cpp'; fi`
	mv -f $(DEPDIR)/RenderPanel.Tpo $(DEPDIR)/RenderPanel.Po
#	source='CastorShape/main/RenderPanel.cpp' object='RenderPanel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RenderPanel.obj `if test -f 'CastorShape/main/RenderPanel.cpp'; then $(CYGPATH_W) 'CastorShape/main/RenderPanel.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/main/RenderPanel.cpp'; fi`

EnvironmentFrame.o: CastorShape/material/EnvironmentFrame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EnvironmentFrame.o -MD -MP -MF $(DEPDIR)/EnvironmentFrame.Tpo -c -o EnvironmentFrame.o `test -f 'CastorShape/material/EnvironmentFrame.cpp' || echo '$(srcdir)/'`CastorShape/material/EnvironmentFrame.cpp
	mv -f $(DEPDIR)/EnvironmentFrame.Tpo $(DEPDIR)/EnvironmentFrame.Po
#	source='CastorShape/material/EnvironmentFrame.cpp' object='EnvironmentFrame.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EnvironmentFrame.o `test -f 'CastorShape/material/EnvironmentFrame.cpp' || echo '$(srcdir)/'`CastorShape/material/EnvironmentFrame.cpp

EnvironmentFrame.obj: CastorShape/material/EnvironmentFrame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT EnvironmentFrame.obj -MD -MP -MF $(DEPDIR)/EnvironmentFrame.Tpo -c -o EnvironmentFrame.obj `if test -f 'CastorShape/material/EnvironmentFrame.cpp'; then $(CYGPATH_W) 'CastorShape/material/EnvironmentFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/material/EnvironmentFrame.cpp'; fi`
	mv -f $(DEPDIR)/EnvironmentFrame.Tpo $(DEPDIR)/EnvironmentFrame.Po
#	source='CastorShape/material/EnvironmentFrame.cpp' object='EnvironmentFrame.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o EnvironmentFrame.obj `if test -f 'CastorShape/material/EnvironmentFrame.cpp'; then $(CYGPATH_W) 'CastorShape/material/EnvironmentFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/material/EnvironmentFrame.cpp'; fi`

MaterialPanel.o: CastorShape/material/MaterialPanel.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MaterialPanel.o -MD -MP -MF $(DEPDIR)/MaterialPanel.Tpo -c -o MaterialPanel.o `test -f 'CastorShape/material/MaterialPanel.cpp' || echo '$(srcdir)/'`CastorShape/material/MaterialPanel.cpp
	mv -f $(DEPDIR)/MaterialPanel.Tpo $(DEPDIR)/MaterialPanel.Po
#	source='CastorShape/material/MaterialPanel.cpp' object='MaterialPanel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MaterialPanel.o `test -f 'CastorShape/material/MaterialPanel.cpp' || echo '$(srcdir)/'`CastorShape/material/MaterialPanel.cpp

MaterialPanel.obj: CastorShape/material/MaterialPanel.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MaterialPanel.obj -MD -MP -MF $(DEPDIR)/MaterialPanel.Tpo -c -o MaterialPanel.obj `if test -f 'CastorShape/material/MaterialPanel.cpp'; then $(CYGPATH_W) 'CastorShape/material/MaterialPanel.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/material/MaterialPanel.cpp'; fi`
	mv -f $(DEPDIR)/MaterialPanel.Tpo $(DEPDIR)/MaterialPanel.Po
#	source='CastorShape/material/MaterialPanel.cpp' object='MaterialPanel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MaterialPanel.obj `if test -f 'CastorShape/material/MaterialPanel.cpp'; then $(CYGPATH_W) 'CastorShape/material/MaterialPanel.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/material/MaterialPanel.cpp'; fi`

MaterialsFrame.o: CastorShape/material/MaterialsFrame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MaterialsFrame.o -MD -MP -MF $(DEPDIR)/MaterialsFrame.Tpo -c -o MaterialsFrame.o `test -f 'CastorShape/material/MaterialsFrame.cpp' || echo '$(srcdir)/'`CastorShape/material/MaterialsFrame.cpp
	mv -f $(DEPDIR)/MaterialsFrame.Tpo $(DEPDIR)/MaterialsFrame.Po
#	source='CastorShape/material/MaterialsFrame.cpp' object='MaterialsFrame.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MaterialsFrame.o `test -f 'CastorShape/material/MaterialsFrame.cpp' || echo '$(srcdir)/'`CastorShape/material/MaterialsFrame.cpp

MaterialsFrame.obj: CastorShape/material/MaterialsFrame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MaterialsFrame.obj -MD -MP -MF $(DEPDIR)/MaterialsFrame.Tpo -c -o MaterialsFrame.obj `if test -f 'CastorShape/material/MaterialsFrame.cpp'; then $(CYGPATH_W) 'CastorShape/material/MaterialsFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/material/MaterialsFrame.cpp'; fi`
	mv -f $(DEPDIR)/MaterialsFrame.Tpo $(DEPDIR)/MaterialsFrame.Po
#	source='CastorShape/material/MaterialsFrame.cpp' object='MaterialsFrame.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MaterialsFrame.obj `if test -f 'CastorShape/material/MaterialsFrame.cpp'; then $(CYGPATH_W) 'CastorShape/material/MaterialsFrame.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/material/MaterialsFrame.cpp'; fi`

MaterialsListView.o: CastorShape/material/MaterialsListView.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MaterialsListView.o -MD -MP -MF $(DEPDIR)/MaterialsListView.Tpo -c -o MaterialsListView.o `test -f 'CastorShape/material/MaterialsListView.cpp' || echo '$(srcdir)/'`CastorShape/material/MaterialsListView.cpp
	mv -f $(DEPDIR)/MaterialsListView.Tpo $(DEPDIR)/MaterialsListView.Po
#	source='CastorShape/material/MaterialsListView.cpp' object='MaterialsListView.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MaterialsListView.o `test -f 'CastorShape/material/MaterialsListView.cpp' || echo '$(srcdir)/'`CastorShape/material/MaterialsListView.cpp

MaterialsListView.obj: CastorShape/material/MaterialsListView.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MaterialsListView.obj -MD -MP -MF $(DEPDIR)/MaterialsListView.Tpo -c -o MaterialsListView.obj `if test -f 'CastorShape/material/MaterialsListView.cpp'; then $(CYGPATH_W) 'CastorShape/material/MaterialsListView.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/material/MaterialsListView.cpp'; fi`
	mv -f $(DEPDIR)/MaterialsListView.Tpo $(DEPDIR)/MaterialsListView.Po
#	source='CastorShape/material/MaterialsListView.cpp' object='MaterialsListView.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MaterialsListView.obj `if test -f 'CastorShape/material/MaterialsListView.cpp'; then $(CYGPATH_W) 'CastorShape/material/MaterialsListView.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/material/MaterialsListView.cpp'; fi`

NewMaterialDialog.o: CastorShape/material/NewMaterialDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewMaterialDialog.o -MD -MP -MF $(DEPDIR)/NewMaterialDialog.Tpo -c -o NewMaterialDialog.o `test -f 'CastorShape/material/NewMaterialDialog.cpp' || echo '$(srcdir)/'`CastorShape/material/NewMaterialDialog.cpp
	mv -f $(DEPDIR)/NewMaterialDialog.Tpo $(DEPDIR)/NewMaterialDialog.Po
#	source='CastorShape/material/NewMaterialDialog.cpp' object='NewMaterialDialog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewMaterialDialog.o `test -f 'CastorShape/material/NewMaterialDialog.cpp' || echo '$(srcdir)/'`CastorShape/material/NewMaterialDialog.cpp

NewMaterialDialog.obj: CastorShape/material/NewMaterialDialog.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NewMaterialDialog.obj -MD -MP -MF $(DEPDIR)/NewMaterialDialog.Tpo -c -o NewMaterialDialog.obj `if test -f 'CastorShape/material/NewMaterialDialog.cpp'; then $(CYGPATH_W) 'CastorShape/material/NewMaterialDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/material/NewMaterialDialog.cpp'; fi`
	mv -f $(DEPDIR)/NewMaterialDialog.Tpo $(DEPDIR)/NewMaterialDialog.Po
#	source='CastorShape/material/NewMaterialDialog.cpp' object='NewMaterialDialog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NewMaterialDialog.obj `if test -f 'CastorShape/material/NewMaterialDialog.cpp'; then $(CYGPATH_W) 'CastorShape/material/NewMaterialDialog.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/material/NewMaterialDialog.cpp'; fi`

PrecompiledHeaders.o: CastorShape/precompiled_headers/PrecompiledHeaders.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PrecompiledHeaders.o -MD -MP -MF $(DEPDIR)/PrecompiledHeaders.Tpo -c -o PrecompiledHeaders.o `test -f 'CastorShape/precompiled_headers/PrecompiledHeaders.cpp' || echo '$(srcdir)/'`CastorShape/precompiled_headers/PrecompiledHeaders.cpp
	mv -f $(DEPDIR)/PrecompiledHeaders.Tpo $(DEPDIR)/PrecompiledHeaders.Po
#	source='CastorShape/precompiled_headers/PrecompiledHeaders.cpp' object='PrecompiledHeaders.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PrecompiledHeaders.o `test -f 'CastorShape/precompiled_headers/PrecompiledHeaders.cpp' || echo '$(srcdir)/'`CastorShape/precompiled_headers/PrecompiledHeaders.cpp

PrecompiledHeaders.obj: CastorShape/precompiled_headers/PrecompiledHeaders.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PrecompiledHeaders.obj -MD -MP -MF $(DEPDIR)/PrecompiledHeaders.Tpo -c -o PrecompiledHeaders.obj `if test -f 'CastorShape/precompiled_headers/PrecompiledHeaders.cpp'; then $(CYGPATH_W) 'CastorShape/precompiled_headers/PrecompiledHeaders.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/precompiled_headers/PrecompiledHeaders.cpp'; fi`
	mv -f $(DEPDIR)/PrecompiledHeaders.Tpo $(DEPDIR)/PrecompiledHeaders.Po
#	source='CastorShape/precompiled_headers/PrecompiledHeaders.cpp' object='PrecompiledHeaders.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PrecompiledHeaders.obj `if test -f 'CastorShape/precompiled_headers/PrecompiledHeaders.cpp'; then $(CYGPATH_W) 'CastorShape/precompiled_headers/PrecompiledHeaders.cpp'; else $(CYGPATH_W) '$(srcdir)/CastorShape/precompiled_headers/PrecompiledHeaders.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonemtpy = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-binPROGRAMS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

/*
See LICENSE file in root folder
*/
#ifndef ___C3D_ShaderProgramCache_H___
#define ___C3D_ShaderProgramCache_H___

#include "CacheModule.hpp"
#include "Castor3D/Shader/ShaderModule.hpp"

namespace castor3d
{
	class ShaderProgramCache
		: public castor::OwnedBy< Engine >
	{
		using ShaderProgramPtrArray = std::vector< ShaderProgramSPtr >;

	public:
		/**
		 *\~english
		 *\brief		Constructor
		 *\param[in]	engine	The engine
		 *\~french
		 *\brief		Constructeur
		 *\param[in]	engine	Le moteur
		 */
		C3D_API explicit ShaderProgramCache( Engine & engine );
		/**
		 *\~english
		 *\brief		Destructor
		 *\~french
		 *\brief		Destructeur
		 */
		C3D_API ~ShaderProgramCache();
		/**
		 *\~english
		 *\brief		Destroys all the shaders of the array of shaders to destroy
		 *\~french
		 *\brief		Détruit tous les shaders du tableau de shaders à détruire
		 */
		C3D_API void clear();
		/**
		 *\~english
		 *\brief		Creates a new program.
		 *\param[in]	name		The program name.
		 *\param[in]	initialise	Tells if we want the program to be initialised.
		 *\return		The newly created program.
		 *\~french
		 *\brief		Crée un nouveau programme.
		 *\param[in]	name		Le nom du programme.
		 *\param[in]	initialise	Dit si on veut que le programme soit initialisé.
		 *\return		Le programme créé.
		 */
		C3D_API ShaderProgramSPtr getNewProgram( castor::String const & name
			, bool initialise );
		/**
		 *\~english
		 *\brief		Looks for an automatically generated program corresponding to given flags.
		 *\remarks		If none exists it is created.
		 *\param[in]	renderPass	The pass from which the program code is retrieved.
		 *\param[in]	flags		The pipeline flags.
		 *\return		The found or created program.
		 *\~french
		 *\brief		Cherche un programme automatiquement généré correspondant aux flags donnés.
		 *\param[in]	renderPass	La passe a partir de laquelle est récupéré le code du programme.
		 *\param[in]	flags		Les flags de pipeline.
		 *\return		Le programme trouvé ou créé.
		 */
		C3D_API ShaderProgramSPtr getAutomaticProgram( SceneRenderPass const & renderPass
			, PipelineFlags const & flags );
		/**
		 *\~english
		 *\brief		Locks the collection mutex
		 *\~french
		 *\brief		Locke le mutex de la collection
		 */
		void lock()const
		{
			m_mutex.lock();
		}
		/**
		 *\~english
		 *\brief		Unlocks the collection mutex
		 *\~french
		 *\brief		Délocke le mutex de la collection
		 */
		void unlock()const
		{
			m_mutex.unlock();
		}
		/**
		 *\~english
		 *\brief		Retrieves an iterator to the beginning of the shaders list.
		 *\return		The iterator
		 *\~french
		 *\brief		Récupère un itérateur sur le début de la liste de shaders.
		 *\return		L'itérateur
		 */
		ShaderProgramPtrArray::iterator begin()
		{
			return m_programs.begin();
		}
		/**
		 *\~english
		 *\brief		Retrieves an iterator to the beginning of the shaders list.
		 *\return		The iterator
		 *\~french
		 *\brief		Récupère un itérateur sur le début de la liste de shaders.
		 *\return		L'itérateur
		 */
		ShaderProgramPtrArray::const_iterator begin()const
		{
			return m_programs.begin();
		}
		/**
		 *\~english
		 *\brief		Retrieves an iterator to the end of the shaders list.
		 *\return		The iterator
		 *\~french
		 *\brief		Récupère un itérateur sur la fin de la liste de shaders.
		 *\return		L'itérateur
		 */
		ShaderProgramPtrArray::iterator end()
		{
			return m_programs.end();
		}
		/**
		 *\~english
		 *\brief		Retrieves an iterator to the end of the shaders list.
		 *\return		The iterator
		 *\~french
		 *\brief		Récupère un itérateur sur la fin de la liste de shaders.
		 *\return		L'itérateur
		 */
		ShaderProgramPtrArray::const_iterator end()const
		{
			return m_programs.end();
		}

	private:
		ShaderProgramSPtr doFindAutomaticProgram( PipelineFlags const & flags );
		ShaderProgramSPtr doCreateAutomaticProgram( SceneRenderPass const & renderPass
			, PipelineFlags const & flags )const;
		void doAddAutomaticProgram( ShaderProgramSPtr program
			, PipelineFlags const & flags );
		void doAddProgram( ShaderProgramSPtr program );

	private:
		using ShaderProgramMap = std::map< PipelineFlags, ShaderProgramSPtr >;
		mutable std::mutex m_mutex;
		ShaderProgramPtrArray m_programs;
		ShaderProgramMap m_autogenerated;
	};
	/**
	 *\~english
	 *\brief		Creates a ashes::ShaderProgram cache.
	 *\param[in]	engine	The engine.
	 *\~french
	 *\brief		Crée un cache de ashes::ShaderProgram.
	 *\param[in]	engine	Le moteur.
	 */
	inline std::unique_ptr< ShaderProgramCache >
	makeCache( Engine & engine )
	{
		return std::make_unique< ShaderProgramCache >( engine );
	}
}

#endif

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1a1d4dc..64b46da 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -20,45 +20,45 @@ if (CMAKE_VERSION VERSION_LESS 3.21)
 endif ()
 
 
-if (EMSCRIPTEN)
-  set(TINYUSDZ_DEFAULT_NO_WERROR ON)
-  set(TINYUSDZ_DEFAULT_PRODUCTION_BUILD On)
-  set(TINYUSDZ_DEFAULT_WITH_BUILTIN_IMAGE_LOADER On)
-  set(TINYUSDZ_DEFAULT_BUILD_TESTS Off)
-  set(TINYUSDZ_DEFAULT_EXAMPLES Off)
-  set(TINYUSDZ_DEFAULT_WITH_C_API Off)
-  set(TINYUSDZ_DEFAULT_WITH_PXR_COMPAT_API Off)
-  # TODO: deprecate in next major version
-  set(TINYUSDZ_DEFAULT_WITH_USDA_PARSER Off)
-  set(TINYUSDZ_DEFAULT_WITH_USDC_PARSER Off)
-elseif(NOT PROJECT_IS_TOP_LEVEL)
-  # assume tinyusdz is added from add_subdirectory()
-  # disable tools, tests and examples build by default.
-  set(TINYUSDZ_DEFAULT_NO_WERROR OFF)
-  set(TINYUSDZ_DEFAULT_PRODUCTION_BUILD Off)
-  set(TINYUSDZ_DEFAULT_WITH_BUILTIN_IMAGE_LOADER On)
-  set(TINYUSDZ_DEFAULT_BUILD_TESTS Off)
-  set(TINYUSDZ_DEFAULT_EXAMPLES Off)
-  set(TINYUSDZ_DEFAULT_WITH_C_API Off)
-  set(TINYUSDZ_DEFAULT_WITH_PXR_COMPAT_API On)
-  # TODO: deprecate in next major version
-  set(TINYUSDZ_DEFAULT_WITH_USDA_PARSER Off)
-  set(TINYUSDZ_DEFAULT_WITH_USDC_PARSER Off)
-else()
-  set(TINYUSDZ_DEFAULT_NO_WERROR OFF)
-  set(TINYUSDZ_DEFAULT_PRODUCTION_BUILD Off)
-  set(TINYUSDZ_DEFAULT_WITH_BUILTIN_IMAGE_LOADER On)
-  set(TINYUSDZ_DEFAULT_BUILD_TESTS On)
-  set(TINYUSDZ_DEFAULT_BUILD_EXAMPLES On)
-  set(TINYUSDZ_DEFAULT_WITH_C_API Off)
-  set(TINYUSDZ_DEFAULT_WITH_PXR_COMPAT_API On)
-  # TODO: deprecate in next major version
-  set(TINYUSDZ_DEFAULT_WITH_USDA_PARSER Off)
-  set(TINYUSDZ_DEFAULT_WITH_USDC_PARSER Off)
-
-  # For Visual Studio
-  set_property(GLOBAL PROPERTY USE_FOLDERS ON)
-endif ()
+# if (EMSCRIPTEN)
+#   set(TINYUSDZ_DEFAULT_NO_WERROR ON)
+#   set(TINYUSDZ_DEFAULT_PRODUCTION_BUILD On)
+#   set(TINYUSDZ_DEFAULT_WITH_BUILTIN_IMAGE_LOADER On)
+#   set(TINYUSDZ_DEFAULT_BUILD_TESTS Off)
+#   set(TINYUSDZ_DEFAULT_EXAMPLES Off)
+#   set(TINYUSDZ_DEFAULT_WITH_C_API Off)
+#   set(TINYUSDZ_DEFAULT_WITH_PXR_COMPAT_API Off)
+#   # TODO: deprecate in next major version
+#   set(TINYUSDZ_DEFAULT_WITH_USDA_PARSER Off)
+#   set(TINYUSDZ_DEFAULT_WITH_USDC_PARSER Off)
+# elseif(NOT PROJECT_IS_TOP_LEVEL)
+#   # assume tinyusdz is added from add_subdirectory()
+#   # disable tools, tests and examples build by default.
+#   set(TINYUSDZ_DEFAULT_NO_WERROR OFF)
+#   set(TINYUSDZ_DEFAULT_PRODUCTION_BUILD Off)
+#   set(TINYUSDZ_DEFAULT_WITH_BUILTIN_IMAGE_LOADER On)
+#   set(TINYUSDZ_DEFAULT_BUILD_TESTS Off)
+#   set(TINYUSDZ_DEFAULT_EXAMPLES Off)
+#   set(TINYUSDZ_DEFAULT_WITH_C_API Off)
+#   set(TINYUSDZ_DEFAULT_WITH_PXR_COMPAT_API On)
+#   # TODO: deprecate in next major version
+#   set(TINYUSDZ_DEFAULT_WITH_USDA_PARSER Off)
+#   set(TINYUSDZ_DEFAULT_WITH_USDC_PARSER Off)
+# else()
+#   set(TINYUSDZ_DEFAULT_NO_WERROR OFF)
+#   set(TINYUSDZ_DEFAULT_PRODUCTION_BUILD Off)
+#   set(TINYUSDZ_DEFAULT_WITH_BUILTIN_IMAGE_LOADER On)
+#   set(TINYUSDZ_DEFAULT_BUILD_TESTS On)
+#   set(TINYUSDZ_DEFAULT_BUILD_EXAMPLES On)
+#   set(TINYUSDZ_DEFAULT_WITH_C_API Off)
+#   set(TINYUSDZ_DEFAULT_WITH_PXR_COMPAT_API On)
+#   # TODO: deprecate in next major version
+#   set(TINYUSDZ_DEFAULT_WITH_USDA_PARSER Off)
+#   set(TINYUSDZ_DEFAULT_WITH_USDC_PARSER Off)
+# 
+#   # For Visual Studio
+#   set_property(GLOBAL PROPERTY USE_FOLDERS ON)
+# endif ()
 
 # options
 option(TINYUSDZ_USE_CCACHE "Use ccache for faster recompile." ON)
@@ -106,26 +106,26 @@ option(TINYUSDZ_CXX_EXCEPTIONS
        "Enable/Disable C++ exceptions(default: Off for posix, on for MSVC)"
        ${TINYUSDZ_CXX_EXCEPTIONS_DEFAULT})
 
-option(TINYUSDZ_WITH_USDMTLX "Build with MaterialX support" ON)
-option(TINYUSDZ_WITH_JSON "Build with JSON serialization support" OFF)
-option(TINYUSDZ_WITH_USD_TO_GLTF "Build with USD to glTF example" ON)
+option(TINYUSDZ_WITH_USDMTLX "Build with MaterialX support" ${TINYUSDZ_DEFAULT_WITH_USDMTLX})
+option(TINYUSDZ_WITH_JSON "Build with JSON serialization support" ${TINYUSDZ_DEFAULT_WITH_JSON})
+option(TINYUSDZ_WITH_USD_TO_GLTF "Build with USD to glTF example" OFF)
 option(TINYUSDZ_WITH_USDOBJ "Build with usdObj support(import wavefront .obj)"
-       ON)
+       ${TINYUSDZ_DEFAULT_WITH_USDOBJ})
 option(TINYUSDZ_WITH_USDFBX "Build with usdFbx support(import FBX .fbx)"
-       OFF)
+       ${TINYUSDZ_DEFAULT_WITH_USDFBX})
 option(TINYUSDZ_WITH_USDVOX
-       "Build with usdVox support(import MagicaVoxel .vox)" ON)
+       "Build with usdVox support(import MagicaVoxel .vox)" ${TINYUSDZ_DEFAULT_WITH_USDVOX})
 option(
   TINYUSDZ_WITH_OPENSUBDIV
   "Build with OpenSubdiv(osdCPU. if required, set `osd_DIR` to specify the path to your own OpenSubdiv)"
-  OFF)
+  ${TINYUSDZ_DEFAULT_WITH_OPENSUBDIV})
 # Use embedded version of OpenSubdiv code by default
 set(osd_DIR ${PROJECT_SOURCE_DIR}/src/osd)
 
 option(TINYUSDZ_WITH_AUDIO "Build with Audio support(MP3 and WAV)" ON)
-option(TINYUSDZ_WITH_ALAC_AUDIO "Build with ALAC(as M4A) Audio support" OFF)
+option(TINYUSDZ_WITH_ALAC_AUDIO "Build with ALAC(as M4A) Audio support" ${TINYUSDZ_DEFAULT_WITH_ALAC_AUDIO})
 
-option(TINYUSDZ_WITH_PYTHON "Build with Python binding through pybind11" OFF)
+option(TINYUSDZ_WITH_PYTHON "Build with Python binding through pybind11" ${TINYUSDZ_DEFAULT_WITH_PYTHON})
 
 if (TINYUSDZ_WITH_PYTHON)
   # force enable C API + DLL build
@@ -206,16 +206,16 @@ option(TINYUSDZ_NO_WUFFS_IMPLEMENTATION
 # -- TIFF --
 option(TINYUSDZ_WITH_TIFF
        "Build with TIFF texture(includes 32bit floating point TIFF) support"
-       OFF)
+       ${TINYUSDZ_DEFAULT_WITH_TIFF})
 # ----------
 
 # -- EXR --
-option(TINYUSDZ_WITH_EXR "Build with EXR HDR texture support" ON)
+option(TINYUSDZ_WITH_EXR "Build with EXR HDR texture support" ${TINYUSDZ_DEFAULT_WITH_EXR})
 # ---------
 
 # -- ColorIO --
 option(TINYUSDZ_WITH_COLORIO
-       "Build with Color IO Baked LUT support(through tinycolorio)" ON)
+       "Build with Color IO Baked LUT support(through tinycolorio)" ${TINYUSDZ_DEFAULT_WITH_COLORIO})
 # ---------
 
 # -- optional tool --
@@ -411,6 +411,8 @@ set(TINYUSDZ_SOURCES
     ${PROJECT_SOURCE_DIR}/src/tydra/shader-network.hh
     ${PROJECT_SOURCE_DIR}/src/tydra/render-data.cc
     ${PROJECT_SOURCE_DIR}/src/tydra/render-data.hh
+    ${PROJECT_SOURCE_DIR}/src/lz4-compression.cc
+    ${PROJECT_SOURCE_DIR}/src/integerCoding.cpp
     )
 
 if(TINYUSDZ_WITH_PXR_COMPAT_API)
@@ -419,12 +421,9 @@ endif()
 
 set(TINYUSDZ_C_API_SOURCES ${PROJECT_SOURCE_DIR}/src/c-tinyusd.cc)
 
-set(TINYUSDZ_DEP_SOURCES
-    ${PROJECT_SOURCE_DIR}/src/integerCoding.cpp
-    ${PROJECT_SOURCE_DIR}/src/lz4-compression.cc
-    ${PROJECT_SOURCE_DIR}/src/lz4/lz4.c
-    #${PROJECT_SOURCE_DIR}/src/external/pystring.cpp
-)
+find_package(lz4 CONFIG REQUIRED)
+
+set(TINYUSDZ_DEP_SOURCES)
 
 if (TINYUSDZ_WITH_BUILTIN_IMAGE_LOADER)
   list(APPEND TINYUSDZ_DEP_SOURCES  ${PROJECT_SOURCE_DIR}/src/external/fpng.cpp)
@@ -727,177 +726,101 @@ if(TINYUSDZ_CUSTOM_COMPILE_FLAGS)
   #endif()
 endif()
 
-#
-# -- target
-#
-
-#
-# Disabled Object library for a while, since it has some issue on MSVC target.
-## To save compile time, use Object library(non-archival collections) for SHARED and Static lib.
-## NOTE: Static lib is always being built with PIC enabled.
-##
-##
-#add_library(tinyusdz_object OBJECT ${TINYUSDZ_SOURCES} ${TINYUSDZ_DEP_SOURCES} ${TINYUSDZ_EXT_SOURCES})
-#set_target_properties(tinyusdz_object PROPERTIES FOLDER "tinyusdz")
-#set_target_properties(tinyusdz_object PROPERTIES POSITION_INDEPENDENT_CODE ON)
-
-# TinyUSDZ should compile well without /bigobj flag.
-# Uncommend if you encounter the following errror: fatal  error C1128: number of sections exceeded object file format limit: compile with /bigobj
-#if(MSVC)
-#  target_compile_options(tinyusdz_object PRIVATE /bigobj)
-#elif(WIN32)
-#  if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
-#    # guess mingw-gcc
-#    target_compile_options(tinyusdz_object PRIVATE "-Wa, -mbig-obj")
-#  endif()
-#endif()
-
-#if (MSVC)
-#  if (TINYUSDZ_CXX_MP_FLAG)
-#    target_compile_options(tinyusdz_object PRIVATE /MP${CMAKE_CXX_MP_NUM_PROCESSORS})
-#  endif()
-#endif()
-#
-#if(TINYUSDZ_DEBUG_PRINT)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_DEBUG_PRINT")
-#endif()
-#
-#if(TINYUSDZ_PRODUCTION_BUILD)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_PRODUCTION_BUILD")
-#endif()
-#
-## default = enable module, so invert definition
-#if(NOT TINYUSDZ_WITH_MODULE_USDA_READER)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_DISABLE_MODULE_USDA_READER")
-#endif()
-#
-#if(NOT TINYUSDZ_WITH_MODULE_USDA_WRITER)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_DISABLE_MODULE_USDA_WRITER")
-#endif()
-#
-#if(NOT TINYUSDZ_WITH_MODULE_USDC_READER)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_DISABLE_MODULE_USDC_READER")
-#endif()
-#
-#if(NOT TINYUSDZ_WITH_MODULE_USDC_WRITER)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_DISABLE_MODULE_USDC_WRITER")
-#endif()
-#
-#if(NOT TINYUSDZ_WITH_BUILTIN_IMAGE_LOADER)
-#  target_compile_definitions(tinyusdz_object PRIVATE "TINYUSDZ_NO_BUILTIN_IMAGE_LOADER")
-#endif()
-#
-#if(TINYUSDZ_NO_STB_IMAGE_IMPLEMENTATION)
-#  target_compile_definitions(tinyusdz_object PRIVATE "TINYUSDZ_NO_STB_IMAGE_IMPLEMENTATION")
-#endif()
-#
-#if(TINYUSDZ_NO_STB_IMAGE_WRITE_IMPLEMENTATION)
-#  target_compile_definitions(tinyusdz_object PRIVATE "TINYUSDZ_NO_STB_IMAGE_WRITE_IMPLEMENTATION")
-#endif()
-#
-#target_include_directories(tinyusdz_object
-#                           PRIVATE ${PROJECT_SOURCE_DIR}/src)
-
-#if(TINYUSDZ_WITH_JSON)
-##target_include_directories(
-##  ${TINYUSDZ_LIB_TARGET} PRIVATE ${PROJECT_SOURCE_DIR}/src/external/jsonhpp/)
-#  target_include_directories(
-#    ${TINYUSDZ_LIB_TARGET}
-#    PRIVATE ${PROJECT_SOURCE_DIR}/src/external/jsonhpp/)
-#endif()
-
-#if(TINYUSDZ_WITH_USDMTLX)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_USE_USDMTLX")
-#endif()
-#
-#if(TINYUSDZ_WITH_USDFBX)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_USE_USDFBX")
-#endif()
-#
-#if(TINYUSDZ_WITH_USDOBJ)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_USE_USDOBJ")
-#endif()
-#
-#if(TINYUSDZ_WITH_USDVOX)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_USE_USDVOX")
-#endif()
-
-#target_link_libraries(tinyusdz_object ${TINYUSDZ_EXT_LIBRARIES}
-#                      ${CMAKE_DL_LIBS})
-#
-#if (TINYUSDZ_ENABLE_THREAD)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_ENABLE_THREAD")
-#  target_link_libraries(tinyusdz_object Threads::Threads)
-#endif()
-#
-#
-#if(IOS)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_BUILD_IOS")
-#endif()
-#
-#if(TINYUSDZ_WITH_TIFF)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_WITH_TIFF")
-#endif(TINYUSDZ_WITH_TIFF)
-#
-#if(TINYUSDZ_WITH_EXR)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_WITH_EXR")
-#endif(TINYUSDZ_WITH_EXR)
-#
-#if(TINYUSDZ_WITH_COLORIO)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_WITH_COLORIO")
-#endif(TINYUSDZ_WITH_COLORIO)
-#
-#if(TINYUSDZ_WITH_AUDIO)
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_WITH_AUDIO")
-#endif(TINYUSDZ_WITH_AUDIO)
-#
-#if(TINYUSDZ_WITH_ALAC_AUDIO)
-#  target_compile_definitions(tinuusdz_object
-#                             PRIVATE "TINYUSDZ_WITH_ALAC_AUDIO")
-#endif(TINYUSDZ_WITH_ALAC_AUDIO)
-#
-#if(TINYUSDZ_WITH_OPENSUBDIV)
-#  target_include_directories(tinyusdz_object PRIVATE ${osd_DIR})
-#  target_compile_definitions(tinyusdz_object
-#                             PRIVATE "TINYUSDZ_WITH_OPENSUBDIV")
-#endif(TINYUSDZ_WITH_OPENSUBDIV)
-#
-#if(NOT TINYUSDZ_CXX_EXCEPTIONS)
-#  if(MSVC)
-#    target_compile_options(tinyusdz_object PUBLIC /EHs-c-)
-#  else()
-#    target_compile_options(tinyusdz_object PUBLIC -fno-exceptions)
-#  endif()
-#endif()
-#
-# TODO: USE set_target_properties(... PROPERTIES OUTPUT_NAME outname)?
-#add_library(${TINYUSDZ_TARGET_STATIC} STATIC $<TARGET_OBJECTS:tinyusdz_object>)
-#add_sanitizers(${TINYUSDZ_TARGET_STATIC})
-
 add_library(${TINYUSDZ_TARGET_STATIC} STATIC ${TINYUSDZ_SOURCES} ${TINYUSDZ_DEP_SOURCES} ${TINYUSDZ_EXT_SOURCES})
-set_target_properties(${TINYUSDZ_TARGET_STATIC} PROPERTIES POSITION_INDEPENDENT_CODE ON)
-add_sanitizers(${TINYUSDZ_TARGET_STATIC})
-#set_target_properties(tinyusdz_object PROPERTIES FOLDER "tinyusdz")
-
-# Target with namespace
-add_library(${TINYUSDZ_TARGET_STATIC_NS} ALIAS ${TINYUSDZ_TARGET_STATIC})
 
+target_link_libraries(${TINYUSDZ_TARGET_STATIC}
+  PRIVATE
+    lz4::lz4
+)
+macro( list_subdirs RESULT CURDIR )
+	file( GLOB _CHILDREN RELATIVE ${CURDIR} ${CURDIR}/* )
+	set( _SUBFOLDERS "" )
+
+	foreach( _CHILD ${_CHILDREN} )
+		if ( IS_DIRECTORY ${CURDIR}/${_CHILD} )
+			list( APPEND _SUBFOLDERS ${_CHILD} )
+		endif ()
+	endforeach()
+	set( ${RESULT} ${_SUBFOLDERS} )
+endmacro()
+
+macro( target_install_dir_headers TARGET_NAME SRCDIR DSTDIR )
+	file(
+		GLOB
+			_HEADERS
+			${SRCDIR}/*.h
+			${SRCDIR}/*.hh
+			${SRCDIR}/*.hpp
+			${SRCDIR}/*.inc
+			${SRCDIR}/*.inl
+	)
+	if ( PROJECTS_ALLOW_DEBUG_INSTALL_HEADERS )
+		install(
+			FILES ${_HEADERS}
+			COMPONENT ${TARGET_NAME}
+			DESTINATION include/${DSTDIR}
+		)
+	else ()
+		install(
+			FILES ${_HEADERS}
+			COMPONENT ${TARGET_NAME}
+			DESTINATION include/${DSTDIR}
+			CONFIGURATIONS Release
+		)
+	endif ()
+endmacro()
+
+macro( target_install_subdir_headers TARGET_NAME SRCDIR SUBDIR CURDIR )
+	target_install_dir_headers( ${TARGET_NAME}
+		${SRCDIR}/${CURDIR}${SUBDIR}
+		${TARGET_NAME}/${CURDIR}${SUBDIR}
+	)
+endmacro()
+
+macro( target_install_headers TARGET_NAME HDR_FOLDER )
+	target_install_dir_headers( ${TARGET_NAME} ${HDR_FOLDER} ${TARGET_NAME} )
+	list_subdirs( _SUBDIRS1 ${HDR_FOLDER} )
+	foreach( _SUBDIR1 ${_SUBDIRS1} )
+		target_install_subdir_headers( ${TARGET_NAME} ${HDR_FOLDER} ${_SUBDIR1} "" )
+		list_subdirs( _SUBDIRS2 ${HDR_FOLDER}/${_SUBDIR1} )
+		foreach( _SUBDIR2 ${_SUBDIRS2} )
+			target_install_subdir_headers( ${TARGET_NAME} ${HDR_FOLDER} ${_SUBDIR2} "${_SUBDIR1}/" )
+			list_subdirs( _SUBDIRS3 ${HDR_FOLDER}/${_SUBDIR1}/${_SUBDIR2} )
+			foreach( _SUBDIR3 ${_SUBDIRS3} )
+				target_install_subdir_headers( ${TARGET_NAME} ${HDR_FOLDER} ${_SUBDIR3} "${_SUBDIR1}/${_SUBDIR2}/" )
+				list_subdirs( _SUBDIRS4 ${HDR_FOLDER}/${_SUBDIR1}/${_SUBDIR2}/${_SUBDIR3} )
+				foreach( _SUBDIR4 ${_SUBDIRS4} )
+					target_install_subdir_headers( ${TARGET_NAME} ${HDR_FOLDER} ${_SUBDIR4} "${_SUBDIR1}/${_SUBDIR2}/${_SUBDIR3}/" )
+					list_subdirs( _SUBDIRS5 ${HDR_FOLDER}/${_SUBDIR1}/${_SUBDIR2}/${_SUBDIR3}/${_SUBDIR4} )
+					foreach( _SUBDIR5 ${_SUBDIRS5} )
+						target_install_subdir_headers( ${TARGET_NAME} ${HDR_FOLDER} ${_SUBDIR5} "${_SUBDIR1}/${_SUBDIR2}/${_SUBDIR3}/${_SUBDIR4}/" )
+					endforeach()
+				endforeach()
+			endforeach()
+		endforeach()
+	endforeach()
+endmacro()
+
+install(
+  TARGETS ${TINYUSDZ_TARGET_STATIC}
+  EXPORT ${TINYUSDZ_TARGET}
+  COMPONENT ${TINYUSDZ_TARGET}
+  RUNTIME DESTINATION bin
+  ARCHIVE DESTINATION lib
+  LIBRARY DESTINATION lib
+)
+target_install_headers( ${TINYUSDZ_TARGET} ${PROJECT_SOURCE_DIR}/src )
+install( EXPORT ${TINYUSDZ_TARGET}
+	FILE ${TINYUSDZ_TARGET}Config.cmake
+	COMPONENT ${TINYUSDZ_TARGET}
+	NAMESPACE ${TINYUSDZ_TARGET}::
+	DESTINATION lib/cmake/${TINYUSDZ_TARGET}
+)
+include( CMakePackageConfigHelpers )
+write_basic_package_version_file( ${TINYUSDZ_TARGET}ConfigVersion.cmake
+	VERSION 0.8.0rc8
+	COMPATIBILITY AnyNewerVersion
+)
 
 if(TINYUSDZ_BUILD_SHARED_LIBS)
   #add_library(
@@ -1239,7 +1162,7 @@ if(TINYUSDZ_BUILD_BENCHMARKS)
 endif(TINYUSDZ_BUILD_BENCHMARKS)
 
 # [VisualStudio]
-if(WIN32)
+if(0)
   # Set ${TINYUSDZ_TARGET_STATIC} as a startup project for VS IDE
   set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${TINYUSDZ_TARGET_STATIC})
 
@@ -1315,7 +1238,7 @@ if(TINYUSDZ_BUILD_TESTS)
 endif(TINYUSDZ_BUILD_TESTS)
 
 # [VisualStudio]
-if(WIN32)
+if(0)
   # Set ${TINYUSDZ_TARGET_STATIC} as a startup project for VS IDE
   set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${TINYUSDZ_TARGET_STATIC})
 
diff --git a/src/tydra/attribute-eval.hh b/src/tydra/attribute-eval.hh
index a7643e3..a6f4b40 100644
--- a/src/tydra/attribute-eval.hh
+++ b/src/tydra/attribute-eval.hh
@@ -10,16 +10,16 @@
 
 #include <map>
 
-#include "prim-types.hh"
-#include "stage.hh"
-#include "usdGeom.hh"
-#include "usdShade.hh"
-#include "usdSkel.hh"
-#include "usdLux.hh"
-#include "value-types.hh"
-#include "value-type-macros.inc"
-#include "prim-type-macros.inc"
-#include "tiny-format.hh"
+#include "../prim-types.hh"
+#include "../stage.hh"
+#include "../usdGeom.hh"
+#include "../usdShade.hh"
+#include "../usdSkel.hh"
+#include "../usdLux.hh"
+#include "../value-types.hh"
+#include "../value-type-macros.inc"
+#include "../prim-type-macros.inc"
+#include "../tiny-format.hh"
 
 namespace tinyusdz {
 namespace tydra {
diff --git a/src/tydra/render-data.hh b/src/tydra/render-data.hh
index 7f58213..3096c4e 100644
--- a/src/tydra/render-data.hh
+++ b/src/tydra/render-data.hh
@@ -10,12 +10,12 @@
 #include <cmath>
 #include <unordered_map>
 
-#include "asset-resolution.hh"
-#include "nonstd/expected.hpp"
-#include "usdGeom.hh"
-#include "usdShade.hh"
-#include "usdSkel.hh"
-#include "value-types.hh"
+#include "../asset-resolution.hh"
+#include "../nonstd/expected.hpp"
+#include "../usdGeom.hh"
+#include "../usdShade.hh"
+#include "../usdSkel.hh"
+#include "../value-types.hh"
 
 // tydra
 #include "scene-access.hh"
diff --git a/src/tydra/scene-access.hh b/src/tydra/scene-access.hh
index 12d186e..70ac49f 100644
--- a/src/tydra/scene-access.hh
+++ b/src/tydra/scene-access.hh
@@ -10,16 +10,16 @@
 
 #include <map>
 
-#include "prim-type-macros.inc"
-#include "prim-types.hh"
-#include "stage.hh"
-#include "tiny-format.hh"
-#include "usdGeom.hh"
-#include "usdLux.hh"
-#include "usdShade.hh"
-#include "usdSkel.hh"
-#include "value-type-macros.inc"
-#include "value-types.hh"
+#include "../prim-type-macros.inc"
+#include "../prim-types.hh"
+#include "../stage.hh"
+#include "../tiny-format.hh"
+#include "../usdGeom.hh"
+#include "../usdLux.hh"
+#include "../usdShade.hh"
+#include "../usdSkel.hh"
+#include "../value-type-macros.inc"
+#include "../value-types.hh"
 
 namespace tinyusdz {
 namespace tydra {
diff --git a/src/tydra/shader-network.hh b/src/tydra/shader-network.hh
index 812580d..0d35ca3 100644
--- a/src/tydra/shader-network.hh
+++ b/src/tydra/shader-network.hh
@@ -7,8 +7,8 @@
 
 #include <unordered_map>
 
-#include "nonstd/expected.hpp"
-#include "value-types.hh"
+#include "../nonstd/expected.hpp"
+#include "../value-types.hh"
 
 namespace tinyusdz {
 

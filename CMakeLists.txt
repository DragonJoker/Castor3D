cmake_minimum_required( VERSION 2.8)

# Used to look for CG, Direct3D and FreeImage
set( CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake_modules/")
# Experimental Precompiled headers support for GCC
include( ${CMAKE_SOURCE_DIR}/cmake_modules/PCHSupport.cmake)

add_definitions(-DUNICODE -D_UNICODE)

function( set_output_path)
	#defines the output paths for the different projects of the workspace
	if (WIN32)
		if (MSVC)
			set( EXECUTABLE_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/bin/msvc/${CMAKE_BUILD_TYPE}")
			set( LIBRARY_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/lib/msvc/${CMAKE_BUILD_TYPE}")
			set( RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin/msvc/${CMAKE_BUILD_TYPE}")
		elseif (BORLAND)
			set( EXECUTABLE_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/bin/borland/${CMAKE_BUILD_TYPE}")
			set( LIBRARY_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/lib/borland/${CMAKE_BUILD_TYPE}")
			set( RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin/borland/${CMAKE_BUILD_TYPE}")
		elseif (CYGWIN)
			set( EXECUTABLE_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/bin/cygw/${CMAKE_BUILD_TYPE}")
			set( LIBRARY_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/lib/cygw/${CMAKE_BUILD_TYPE}")
			set( RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin/cygw/${CMAKE_BUILD_TYPE}")
		else ()
			set( EXECUTABLE_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/bin/mingw/${CMAKE_BUILD_TYPE}")
			set( LIBRARY_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/lib/mingw/${CMAKE_BUILD_TYPE}")
			set( RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin/mingw/${CMAKE_BUILD_TYPE}")
		endif ()
	elseif (UNIX)
		set( EXECUTABLE_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/bin/unix/${CMAKE_BUILD_TYPE}")
		set( LIBRARY_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/lib/unix/${CMAKE_BUILD_TYPE}")
		set( RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin/unix/${CMAKE_BUILD_TYPE}")
	elseif (APPLE)
		set( EXECUTABLE_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/bin/apple/${CMAKE_BUILD_TYPE}")
		set( LIBRARY_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/lib/apple/${CMAKE_BUILD_TYPE}")
		set( RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin/apple/${CMAKE_BUILD_TYPE}")
	endif ()

	file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/Plugins")
	if (MSVC)
		message( STATUS "${CMAKE_BUILD_TYPE}")
		if("${CMAKE_BUILD_TYPE}" STREQUAL "")
			file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/Debug/Plugins")
			file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/Release/Plugins")
			file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/MinSizeRel/Plugins")
			file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/RelWithDebInfos/Plugins")
		else()
			file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/${CMAKE_BUILD_TYPE}/Plugins")
		endif()
	else()
		file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/${CMAKE_BUILD_TYPE}/Plugins")
	endif()
endfunction( set_output_path)

function( show_libs)
	# Informational only - Displays libraries infos
	message( STATUS "Boost")
	message( STATUS "	LIBRARIES		${Boost_LIBRARIES}")
	message( STATUS "	Libraries		${BoostLibraries}")
	message( STATUS "	LIBRARY_DIRS	${Boost_LIBRARY_DIRS}")
	message( STATUS "	INCLUDE_DIRS	${Boost_INCLUDE_DIRS}")

	message( STATUS "wxWidgets")
	message( STATUS "	LIBRARIES		${wxWidgets_LIBRARIES}")
	message( STATUS "	Libraries		${wxWidgetsLibraries}")
	message( STATUS "	INCLUDE_DIRS	${wxWidgets_INCLUDE_DIRS}")

	message( STATUS "Freetype")
	message( STATUS "	LIBRARIES		${FREETYPE_LIBRARY}")
	message( STATUS "	INCLUDE_DIRS	${FREETYPE_INCLUDE_DIRS}")

	message( STATUS "FreeImage")
	message( STATUS "	LIBRARIES		${FreeImage_LIBRARY}")
	message( STATUS "	LIBRARY_DIRS	${FreeImage_LIBRARY_DIR}")
	message( STATUS "	INCLUDE_DIRS	${FreeImage_INCLUDE_DIR}")

	message( STATUS "Cg")
	message( STATUS "	LIBRARIES		${Cg_LIBRARY}")
	message( STATUS "	LIBRARY_DIRS	${Cg_LIBRARY_DIR}")
	message( STATUS "	INCLUDE_DIRS	${Cg_INCLUDE_DIR}")
endfunction( show_libs)

function( Castor_COMPILER_DUMPVERSION OUTPUT_VERSION)
	# Gives the GCC Compiler version, used to build name of Project's libs (CastorUtils and GuiCommon)
	exec_program(${CMAKE_CXX_COMPILER} ARGS ${CMAKE_CXX_COMPILER_ARG1} -dumpversion OUTPUT_VARIABLE Castor_COMPILER_VERSION)
	string(REGEX REPLACE "([0-9])\\.([0-9])(\\.[0-9])?" "\\1\\2" Castor_COMPILER_VERSION ${Castor_COMPILER_VERSION})
	set(${OUTPUT_VERSION} ${Castor_COMPILER_VERSION} PARENT_SCOPE)
endfunction()

function( add_target TargetName StrType Dependencies Links)
	string( COMPARE EQUAL ${StrType} "lib" IsLib)
	string( COMPARE EQUAL ${StrType} "dll" IsDll)
	string( COMPARE EQUAL ${StrType} "gldll" IsGlDll)
	string( COMPARE EQUAL ${StrType} "dx9dll" IsDx9Dll)
	string( COMPARE EQUAL ${StrType} "exe" IsExe)
	string( COMPARE EQUAL ${StrType} "plugin" IsPlugin)
	string( COMPARE EQUAL ${TargetName} "CastorUtils" IsUtils)
	string( COMPARE EQUAL ${TargetName} "GuiCommon" IsGuiCommon)
		
	if (IsLib OR IsDll)
		if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel" OR "${CMAKE_CXX_COMPILER}" MATCHES "icl" OR "${CMAKE_CXX_COMPILER}" MATCHES "icpc")
			if(WIN32)
				set( ${TargetName}_ABI_Name "-iw")
			else()
				set( ${TargetName}_ABI_Name "-il")
			endif()
			set( ${TargetName}_ABI_Name_Debug "-g")
		elseif (MSVC90)
			set( ${TargetName}_ABI_Name "-vc90")
			set( ${TargetName}_ABI_Name_Debug "-g")
		elseif (MSVC10)
			set( ${TargetName}_ABI_Name "-vc100")
			set( ${TargetName}_ABI_Name_Debug "-g")
		elseif (MSVC80)
			set( ${TargetName}_ABI_Name "-vc80")
			set( ${TargetName}_ABI_Name_Debug "-g")
		elseif (MSVC71)
			set( ${TargetName}_ABI_Name "-vc71")
			set( ${TargetName}_ABI_Name_Debug "-g")
		elseif (MSVC70)
			set( ${TargetName}_ABI_Name "-vc7")
			set( ${TargetName}_ABI_Name_Debug "-g")
		elseif (MSVC60)
			set( ${TargetName}_ABI_Name "-vc6")
			set( ${TargetName}_ABI_Name_Debug "-g")
		elseif (BORLAND)
			set( ${TargetName}_ABI_Name "-bcb")
			set( ${TargetName}_ABI_Name_Debug "-g")
		elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "SunPro")
			set( ${TargetName}_ABI_Name "-sw")
			set( ${TargetName}_ABI_Name_Debug "-g")
		elseif (MINGW)
			Castor_COMPILER_DUMPVERSION(Castor_COMPILER_VERSION)
			set( ${TargetName}_ABI_Name "-mgw${Castor_COMPILER_VERSION}")
			set( ${TargetName}_ABI_Name_Debug "-g")
		elseif (UNIX)
			if (CMAKE_COMPILER_IS_GNUCXX)
				Castor_COMPILER_DUMPVERSION(Castor_COMPILER_VERSION)
				if(APPLE)
					set( ${TargetName}_ABI_Name "-xgcc${Castor_COMPILER_VERSION}")
					set( ${TargetName}_ABI_Name_Debug "-g")
				else()
					set( ${TargetName}_ABI_Name "-gcc${Castor_COMPILER_VERSION}")
					set( ${TargetName}_ABI_Name_Debug "-g")
				endif()
			endif (CMAKE_COMPILER_IS_GNUCXX)
		endif()
	endif()

	file( GLOB_RECURSE ${TargetName}_cpp 	source/${TargetName}/*.cpp)
	file( GLOB_RECURSE ${TargetName}_c		source/${TargetName}/*.c)
	file( GLOB_RECURSE ${TargetName}_h 		include/${TargetName}/*.h	include/${TargetName}/*.hpp	include/${TargetName}/*.inl)

	if (WIN32)
		if (NOT IsPlugin)
			set( ${TargetName}_h ${${TargetName}_h} resource/${TargetName}/${TargetName}.rc resource/${TargetName}/resource.h)
		endif ()
	endif ()

	set( ${TargetName}_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE}}")
	set( ${TargetName}_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}}")

	if (CMAKE_COMPILER_IS_GNUCXX)
		set( ${TargetName}_CXX_FLAGS "${${TargetName}_CXX_FLAGS} -fPIC -std=gnu++0x")
	endif()

	if (IsGlDll OR IsDx9Dll OR IsPlugin OR IsDll)
		message( STATUS "Dll	${TargetName}")
		if (WIN32)
			set( Prefix "")
			set( Suffix ".dll")
		else ()
			set( Prefix "lib")
			set( Suffix ".so")
		endif ()
		add_library( ${TargetName} SHARED ${${TargetName}_cpp} ${${TargetName}_c} ${${TargetName}_h})
		set( ${TargetName}_CXX_FLAGS "${${TargetName}_CXX_FLAGS} -D${TargetName}_EXPORTS -DBOOST_THREAD_USE_LIB")
		set( ${TargetName}_C_FLAGS "${${TargetName}_C_FLAGS} -D${TargetName}_EXPORTS -DBOOST_THREAD_USE_LIB")
		set_target_properties( ${TargetName} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH})
		set_target_properties( ${TargetName} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH})
		set_target_properties( ${TargetName} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH})
	elseif (IsExe)
		message( STATUS "Exe	${TargetName}")
		if (WIN32)
			set( Prefix "")
			set( Suffix ".exe")
		else ()
			set( Prefix "")
			set( Suffix "")
		endif ()
		add_executable( ${TargetName} ${${TargetName}_cpp} ${${TargetName}_c} ${${TargetName}_h})
		set( ${TargetName}_CXX_FLAGS "${${TargetName}_CXX_FLAGS} ${wxWidgets_CXXFLAGS} -DBOOST_THREAD_USE_LIB")
		set( ${TargetName}_C_FLAGS "${${TargetName}_C_FLAGS} ${wxWidgets_CFLAGS} -DBOOST_THREAD_USE_LIB")
		set_target_properties( ${TargetName} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH})
		set_target_properties( ${TargetName} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH})
		set_target_properties( ${TargetName} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH})
	elseif (IsLib)
		message( STATUS "Lib	${TargetName}")
		if (WIN32)
			set( Prefix "")
			set( Suffix ".lib")
		else ()
			set( Prefix "lib")
			set( Suffix ".a")
		endif ()
		add_library( ${TargetName} STATIC ${${TargetName}_cpp} ${${TargetName}_c} ${${TargetName}_h})

		if (IsGuiCommon)
			set( ${TargetName}_CXX_FLAGS "${${TargetName}_CXX_FLAGS} ${wxWidgets_CXXFLAGS} -DBOOST_THREAD_USE_LIB")
			set( ${TargetName}_C_FLAGS "${${TargetName}_C_FLAGS} ${wxWidgets_CFLAGS} -DBOOST_THREAD_USE_LIB")
		endif ()

		set_target_properties( ${TargetName} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
		set_target_properties( ${TargetName} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
		set_target_properties( ${TargetName} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
	endif ()
	
	set_target_properties( ${TargetName} PROPERTIES LIBRARY_OUTPUT_NAME "${TargetName}${${TargetName}_ABI_Name}")
	set_target_properties( ${TargetName} PROPERTIES RUNTIME_OUTPUT_NAME "${TargetName}${${TargetName}_ABI_Name}")
	set_target_properties( ${TargetName} PROPERTIES ARCHIVE_OUTPUT_NAME "${TargetName}${${TargetName}_ABI_Name}")
	
	set_target_properties( ${TargetName} PROPERTIES LIBRARY_OUTPUT_NAME_DEBUG "${TargetName}${${TargetName}_ABI_Name}${${TargetName}_ABI_Name_Debug}")
	set_target_properties( ${TargetName} PROPERTIES RUNTIME_OUTPUT_NAME_DEBUG "${TargetName}${${TargetName}_ABI_Name}${${TargetName}_ABI_Name_Debug}")
	set_target_properties( ${TargetName} PROPERTIES ARCHIVE_OUTPUT_NAME_DEBUG "${TargetName}${${TargetName}_ABI_Name}${${TargetName}_ABI_Name_Debug}")

	FOREACH(Dependency ${Dependencies})
		#message( "${TargetName}_Dependency ${Dependency}")
		add_dependencies( ${TargetName} ${Dependency})
	ENDFOREACH()

	FOREACH(Link ${Links})
		#message( "${TargetName}_Link ${Link}")
		string( REPLACE " " ";" Link2 ${Link})
		#message( "${TargetName}_Link2 ${Link2}")
		target_link_libraries( ${TargetName} ${Link2})
	ENDFOREACH()

	set( ${TargetName}_PCH_FLAGS "${${TargetName}_CXX_FLAGS}")

	if (MSVC)
		set( ${TargetName}_CXX_FLAGS "${${TargetName}_CXX_FLAGS} -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS")
		set( ${TargetName}_C_FLAGS "${${TargetName}_C_FLAGS} -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS")
		set( ${TargetName}_PCH_FLAGS "${${TargetName}_PCH_FLAGS} -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS")
		set_source_files_properties( ${${TargetName}_c} PROPERTIES COMPILE_FLAGS "${${TargetName}_C_FLAGS}")
		if (NOT IsPlugin)
			set( ${TargetName}_PCH_FLAGS "${${TargetName}_PCH_FLAGS} /Yc${TargetName}/PrecompiledHeader.hpp")
			set( ${TargetName}_CXX_FLAGS "${${TargetName}_CXX_FLAGS} /Yu${TargetName}/PrecompiledHeader.hpp")
			set_source_files_properties( ${${TargetName}_cpp} PROPERTIES COMPILE_FLAGS "${${TargetName}_CXX_FLAGS}")
			set_source_files_properties( source/${TargetName}/PrecompiledHeader.cpp PROPERTIES COMPILE_FLAGS "${${TargetName}_PCH_FLAGS}")
		else ()
			set_source_files_properties( ${${TargetName}_cpp} PROPERTIES COMPILE_FLAGS "${${TargetName}_CXX_FLAGS}")
		endif ()
	elseif (CMAKE_COMPILER_IS_GNUCXX)
		set_source_files_properties( ${${TargetName}_cpp} PROPERTIES COMPILE_FLAGS "${${TargetName}_CXX_FLAGS}")
		set_source_files_properties( ${${TargetName}_c} PROPERTIES COMPILE_FLAGS "${${TargetName}_C_FLAGS}")
		add_precompiled_header( ${TargetName}, source/${TargetName}/PrecompiledHeader.cpp)
	else()
		set_source_files_properties( ${${TargetName}_cpp} PROPERTIES COMPILE_FLAGS "${${TargetName}_CXX_FLAGS}")
		set_source_files_properties( ${${TargetName}_c} PROPERTIES COMPILE_FLAGS "${${TargetName}_C_FLAGS}")
	endif()
	
	if (IsPlugin OR IsGlDll OR IsDx9Dll)
		set( OutputName "${Prefix}${TargetName}${${TargetName}_ABI_Name}${Suffix}")
#		message( STATUS "${TargetName} OutputName : ${OutputName}")
#		message( STATUS "${TargetName} EXECUTABLE_OUTPUT_PATH : ${EXECUTABLE_OUTPUT_PATH}")

		if (WIN32)
			string( REPLACE "/" "\\" ExecutablePath ${EXECUTABLE_OUTPUT_PATH})
			if (MSVC)
				add_custom_command(	TARGET ${TargetName} POST_BUILD COMMAND "copy" ARGS "/Y" "\"$(OutDir)$(TargetName)$(TargetExt)\"" "\"$(OutDir)Plugins\\$(TargetName)$(TargetExt)\"")
			else()
				add_custom_command(	TARGET ${TargetName} POST_BUILD COMMAND "copy" ARGS "/Y" "\"${ExecutablePath}\\${OutputName}\"" "\"${ExecutablePath}\\Plugins\\${OutputName}\"")
			endif()
		else ()
			if ("${CMAKE_BUILD_TYPE}" STREQUAL "")
				add_custom_command(	TARGET ${TargetName} POST_BUILD COMMAND "cp" ARGS "-f" "${EXECUTABLE_OUTPUT_PATH}/${OutputName}" "${EXECUTABLE_OUTPUT_PATH}/Plugins/")
			else ()
				add_custom_command(	TARGET ${TargetName} POST_BUILD COMMAND "cp" ARGS "-f" "${EXECUTABLE_OUTPUT_PATH}/${CMAKE_BUILD_TYPE}/${OutputName}" "${EXECUTABLE_OUTPUT_PATH}/Plugins/${CMAKE_BUILD_TYPE}/${OutputName}")
			endif ()
		endif ()
	endif()
	
#	message( STATUS "${TargetName} ${TargetName}_CXX_FLAGS : ${${TargetName}_CXX_FLAGS}")
#	message( STATUS "${TargetName} ${TargetName}_PCH_FLAGS : ${${TargetName}_PCH_FLAGS}")
#	message( STATUS "${TargetName} ${TargetName}_C_FLAGS : ${${TargetName}_C_FLAGS}")
endfunction( add_target)

function( add_doc TargetName)
	if (DOXYGEN_FOUND)
		if (WIN32)
			set( DOXYGEN_INPUT doc/${TargetName}_Win32.Doxyfile)
		endif ()
		
		if (NOT WIN32)
			set( DOXYGEN_INPUT doc/${TargetName}.Doxyfile)
		endif ()

		set( DOXYGEN_OUTPUT doc/${TargetName})

		add_custom_command(
			OUTPUT ${DOXYGEN_OUTPUT}
			COMMAND ${CMAKE_COMMAND} -E echo_append "Building ${TargetName} API Documentation..."
			COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_INPUT}
			COMMAND ${CMAKE_COMMAND} -E echo "Done."
			WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
			DEPENDS ${DOXYGEN_INPUT}
		)

		add_custom_target( Doc_${TargetName} ALL DEPENDS ${DOXYGEN_OUTPUT})
	endif ()
endfunction( add_doc)

project( Castor3D)

set( VERSION_MAJOR 0)
set( VERSION_ANNEX 6)
set( VERSION_CORRECT 5)
set( VERSION_POINT 0)
configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/include/Castor3D/RequiredVersion.hpp.in ${CMAKE_CURRENT_SOURCE_DIR}/include/Castor3D/RequiredVersion.hpp)

set( EXECUTABLE_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/bin")
set( LIBRARY_OUTPUT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/lib")
set( RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin")

file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/Plugins")

if (MSVC)
	if("${CMAKE_BUILD_TYPE}" STREQUAL "")
		file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/Debug/Plugins")
		file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/Release/Plugins")
		file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/MinSizeRel/Plugins")
		file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/RelWithDebInfos/Plugins")
	else()
		file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/${CMAKE_BUILD_TYPE}/Plugins")
	endif()
else()
	message( STATUS "glop ${CMAKE_BUILD_TYPE}")
	if("${CMAKE_BUILD_TYPE}" STREQUAL "")
		file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/Plugins")
	else ()
		file( MAKE_DIRECTORY "${EXECUTABLE_OUTPUT_PATH}/${CMAKE_BUILD_TYPE}/Plugins")
	endif()
endif()

#message( "RUNTIME_OUTPUT_DIRECTORY ${RUNTIME_OUTPUT_DIRECTORY}")

set( Boost_DEBUG ON)
set( Boost_USE_STATIC_LIBS ON)
set( BOOST_THREAD_USE_LIB ON)

find_package( Boost REQUIRED date_time filesystem system thread)
find_package( OpenGL)
find_package( wxWidgets)
find_package( Freetype)
find_package( FreeImage)
find_package( Cg)

if (WIN32)
	find_package( Direct3D9)
else ()
	find_package( GTK2)
endif ()

include_directories( include)
include_directories( ${Boost_INCLUDE_DIRS})
include_directories( ${wxWidgets_INCLUDE_DIRS})
include_directories( ${FREETYPE_INCLUDE_DIRS})
include_directories( ${Cg_INCLUDE_DIR})
include_directories( ${FreeImage_INCLUDE_DIR})

if (WIN32)
	include_directories( ${D3D9_INCLUDE_DIR})
else ()
	include_directories( ${GTK2_INCLUDE_DIRS})
endif ()

link_directories( ${LIBRARY_OUTPUT_PATH})
link_directories( ${Boost_LIBRARY_DIRS})
link_directories( ${wxWidgets_LIBRARY_DIR})
link_directories( ${Cg_LIBRARY_DIR})
link_directories( ${FreeImage_LIBRARY_DIR})

set( FreeImageLibrary "")
set( BoostLibraries "")
set( wxWidgetsLibraries "")
FOREACH(Lib ${FreeImage_LIBRARY})
	if (FreeImageLibrary)
		set(FreeImageLibrary "${FreeImageLibrary} ${Lib}")
	else()
		set(FreeImageLibrary "${Lib}")
	endif()
ENDFOREACH()

FOREACH(Lib ${Boost_LIBRARIES})
	if (BoostLibraries)
		set(BoostLibraries "${BoostLibraries} ${Lib}")
	else()
		set(BoostLibraries "${Lib}")
	endif()
ENDFOREACH()

FOREACH(Lib ${wxWidgets_LIBRARIES})
	if (wxWidgetsLibraries)
		set(wxWidgetsLibraries "${wxWidgetsLibraries} ${Lib}")
	else()
		set(wxWidgetsLibraries "${Lib}")
	endif()
ENDFOREACH()
	
if (WIN32)
	link_directories( ${D3D9_LIBRARY_DIR})
endif ()

string( COMPARE EQUAL "${wxWidgets_USE_DEBUG}" "ON" IsWxDebug)
set( wxWidgets_CXXFLAGS "${wxWidgets_CXX_FLAGS} -D_FILE_OFFSET_BITS=64 -D_LARGE_FILES")

if (NOT WIN32)
	set( wxWidgets_CXXFLAGS "${wxWidgets_CXXFLAGS} -D__WXGTK__")
endif ()

if (IsWxDebug)
	set( wxWidgets_CXXFLAGS "${wxWidgets_CXXFLAGS} -D__WXDEBUG__")
endif ()

add_target( 	CastorUtils 		lib		""				"${BoostLibraries};${FreeImageLibrary}")
add_target( 	ImgToXpm			exe		""				"${wxWidgetsLibraries};${BoostLibraries};${GTK2_LIBRARIES}")
add_target( 	ImgToIco			exe		""				"${wxWidgetsLibraries};${BoostLibraries};${GTK2_LIBRARIES}")
add_target( 	Castor3D 			dll		"CastorUtils"	"CastorUtils;${Cg_LIBRARY};${BoostLibraries};${FreeImageLibrary};${FREETYPE_LIBRARIES}")
add_target( 	GlRenderSystem		gldll	"Castor3D"		"CastorUtils;Castor3D;${Cg_GL_LIBRARY};${OPENGL_gl_LIBRARY}")
if (WIN32)
	add_target( Dx9RenderSystem		dx9dll	"Castor3D"		"Castor3D;${Cg_D3D9_LIBRARY};${D3D9_LIBRARY};${D3D9_X_LIBRARY}")
endif ()
add_target( 	LoopDivider			plugin	"Castor3D"		"CastorUtils;Castor3D")
add_target( 	AseImporter			plugin	"Castor3D"		"CastorUtils;Castor3D")
#add_target( 	BspImporter			plugin	"Castor3D"		"CastorUtils;Castor3D")
#add_target( 	GsdImporter			plugin	"Castor3D"		"CastorUtils;Castor3D")
add_target( 	Md2Importer			plugin	"Castor3D"		"CastorUtils;Castor3D")
add_target( 	Md3Importer			plugin	"Castor3D"		"CastorUtils;Castor3D")
add_target( 	ObjImporter			plugin	"Castor3D"		"CastorUtils;Castor3D")
add_target( 	PlyImporter			plugin	"Castor3D"		"CastorUtils;Castor3D")
add_target( 	SMaxImporter		plugin	"Castor3D"		"CastorUtils;Castor3D")
add_target( 	GuiCommon 			lib		"Castor3D"		"CastorUtils;${BoostLibraries};${FreeImageLibrary};${wxWidgetsLibraries};Castor3D")
add_target( 	CastorViewer 		exe		"GuiCommon"		"CastorUtils;Castor3D;GuiCommon;${wxWidgetsLibraries};${BoostLibraries};${GTK2_LIBRARIES}")
#add_target( 	CastorArchitect		exe		"GuiCommon"		"CastorUtils;Castor3D;GuiCommon;${wxWidgetsLibraries};${BoostLibraries};${GTK2_LIBRARIES}")
#add_target( 	CastorShape 		exe		"GuiCommon"		"CastorUtils;Castor3D;GuiCommon;${wxWidgetsLibraries};${BoostLibraries};${GTK2_LIBRARIES}")

if (MSVC)
	set( CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}  /subsystem:windows")
endif ()

install(
	TARGETS
		Castor3D GlRenderSystem LoopDivider AseImporter Md2Importer Md3Importer ObjImporter PlyImporter SMaxImporter CastorViewer
	DESTINATION
		"${EXECUTABLE_OUTPUT_PATH}")

install(
	TARGETS
		CastorUtils GuiCommon
	DESTINATION
		"${LIBRARY_OUTPUT_PATH}")

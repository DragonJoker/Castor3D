name: Dependencies

on:
  workflow_dispatch

jobs:
  build-windows:
    strategy:
      matrix:
        os: [[windows-latest,x64-windows,msvc]]
        buildType: [Release]

    runs-on: ${{ matrix.os[0] }}

    steps:
    - uses: actions/checkout@v2

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v4
      with:
        vcpkgGitCommitId: '${{ secrets.VCPKG_COMMIT_ID }}'
        setupOnly: true

    - name: Create Build Environment
      shell: bash
      run: |
        mkdir ${{runner.workspace}}/build-${{ matrix.buildType }}
        rm ${{runner.workspace}}/vcpkg.json
        cp ${{runner.workspace}}/data/vcpkg/vcpkg.json ${{runner.workspace}}/vcpkg.json

    - name: Checkout submodules
      run: |
        git submodule update --init -- "CMake"

    - name: Configure CMake
      id: configure
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.buildType }} -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/package/Castor3D -DPROJECTS_WARNINGS_AS_ERRORS=$PROJ_WAE -DPROJECTS_UNITY_BUILD=ON -DPROJECTS_USE_PRECOMPILED_HEADERS=OFF -DSDW_GENERATE_SOURCE=OFF -DCASTOR_BUILD_PLUGINS=ON -DCASTOR_BUILDGRP_INTEROP=OFF -DCASTOR_BUILDGRP_TEST=OFF -DCASTOR_USE_GLSLANG=ON -DCASTOR_DISABLE_DELAYED_INITIALISATION=ON -DASHES_BUILD_RENDERER_OGL=OFF -DCASTOR_BUILDGRP_SAMPLE=OFF -DCASTOR_BUILDGRP_TOOL=OFF -DCASTOR_FORCE_VCPKG_SUBMODULES=ON


  build-macos:
    strategy:
      matrix:
        os: [[macos-latest,x64-osx,clang]]
        buildType: [Release]

    runs-on: ${{ matrix.os[0] }}

    steps:
    - uses: actions/checkout@v2

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v4
      with:
        vcpkgGitCommitId: '${{ secrets.VCPKG_COMMIT_ID }}'
        setupOnly: true

    - name: Create Build Environment
      shell: bash
      run: |
        mkdir ${{runner.workspace}}/build-${{ matrix.buildType }}
        rm ${{runner.workspace}}/vcpkg.json
        cp ${{runner.workspace}}/data/vcpkg/vcpkg.json ${{runner.workspace}}/vcpkg.json

    - name: Checkout submodules
      run: |
        git submodule update --init -- "CMake"

    - name: Configure CMake
      id: configure
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.buildType }} -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/package/Castor3D -DPROJECTS_UNITY_BUILD=ON -DPROJECTS_USE_PRECOMPILED_HEADERS=OFF -DSDW_GENERATE_SOURCE=OFF -DCASTOR_BUILD_PLUGINS=ON -DCASTOR_BUILDGRP_INTEROP=OFF -DCASTOR_BUILDGRP_TEST=OFF -DCASTOR_USE_GLSLANG=ON -DCASTOR_DISABLE_DELAYED_INITIALISATION=ON -DASHES_BUILD_RENDERER_OGL=OFF -DCASTOR_BUILDGRP_SAMPLE=OFF -DCASTOR_BUILDGRP_TOOL=OFF -DCASTOR_FORCE_VCPKG_SUBMODULES=ON


  build-linux-gcc:
    strategy:
      matrix:
        os: [[ubuntu-latest,x64-linux,gcc]]
        buildType: [Release]

    runs-on: ${{ matrix.os[0] }}

    steps:
    - uses: actions/checkout@v2

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v4
      with:
        vcpkgGitCommitId: '${{ secrets.VCPKG_COMMIT_ID }}'
        setupOnly: true
  
    - name: Install necessary G++ version.
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends ccache gcc-10 g++-10
        echo "CC=gcc-10" >> $GITHUB_ENV
        echo "CXX=g++-10" >> $GITHUB_ENV

    - name: Install necessary packages
      shell: bash
      run: |
        sudo apt-get install -y --no-install-recommends libxi-dev libgl1-mesa-dev libglu1-mesa-dev mesa-common-dev libxrandr-dev libxxf86vm-dev libxaw7-dev libwayland-dev libxcb1-dev libx11-xcb-dev pkg-config libgtk-3-dev libsecret-1-dev libgcrypt20-dev libsystemd-dev

    - name: Create Build Environment
      shell: bash
      run: |
        mkdir ${{runner.workspace}}/build-${{ matrix.buildType }}
        rm ${{runner.workspace}}/vcpkg.json
        cp ${{runner.workspace}}/data/vcpkg/vcpkg.json ${{runner.workspace}}/vcpkg.json

    - name: Checkout submodules
      run: |
        git submodule update --init -- "CMake"

    - name: Configure CMake
      id: configure
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.buildType }} -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/package/Castor3D -DPROJECTS_WARNINGS_AS_ERRORS=$PROJ_WAE -DPROJECTS_UNITY_BUILD=ON -DPROJECTS_USE_PRECOMPILED_HEADERS=OFF -DSDW_GENERATE_SOURCE=OFF -DCASTOR_BUILD_PLUGINS=ON -DCASTOR_BUILDGRP_INTEROP=OFF -DCASTOR_BUILDGRP_TEST=OFF -DCASTOR_USE_GLSLANG=ON -DCASTOR_DISABLE_DELAYED_INITIALISATION=ON -DASHES_BUILD_RENDERER_OGL=OFF -DCASTOR_BUILDGRP_SAMPLE=OFF -DCASTOR_BUILDGRP_TOOL=OFF -DCASTOR_FORCE_VCPKG_SUBMODULES=ON


  build-linux-clang:
    strategy:
      matrix:
        os: [[ubuntu-latest,x64-linux,clang]]
        buildType: [Release]

    runs-on: ${{ matrix.os[0] }}

    steps:
    - uses: actions/checkout@v2

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v4
      with:
        vcpkgGitCommitId: '${{ secrets.VCPKG_COMMIT_ID }}'
        setupOnly: true

    - name: Install necessary Clang++ version
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends ccache clang-12 clang++-12
        echo "CC=clang-12" >> $GITHUB_ENV
        echo "CXX=clang++-12" >> $GITHUB_ENV

    - name: Install necessary packages
      shell: bash
      run: |
        sudo apt-get install -y --no-install-recommends libxi-dev libgl1-mesa-dev libglu1-mesa-dev mesa-common-dev libxrandr-dev libxxf86vm-dev libxaw7-dev libwayland-dev libxcb1-dev libx11-xcb-dev pkg-config libgtk-3-dev libsecret-1-dev libgcrypt20-dev libsystemd-dev

    - name: Create Build Environment
      shell: bash
      run: |
        mkdir ${{runner.workspace}}/build-${{ matrix.buildType }}
        rm ${{runner.workspace}}/vcpkg.json
        cp ${{runner.workspace}}/data/vcpkg/vcpkg.json ${{runner.workspace}}/vcpkg.json

    - name: Checkout submodules
      run: |
        git submodule update --init -- "CMake"

    - name: Configure CMake
      id: configure
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.buildType }} -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/package/Castor3D -DPROJECTS_WARNINGS_AS_ERRORS=$PROJ_WAE -DPROJECTS_UNITY_BUILD=ON -DPROJECTS_USE_PRECOMPILED_HEADERS=OFF -DSDW_GENERATE_SOURCE=OFF -DCASTOR_BUILD_PLUGINS=ON -DCASTOR_BUILDGRP_INTEROP=OFF -DCASTOR_BUILDGRP_TEST=OFF -DCASTOR_USE_GLSLANG=ON -DCASTOR_DISABLE_DELAYED_INITIALISATION=ON -DASHES_BUILD_RENDERER_OGL=OFF -DCASTOR_BUILDGRP_SAMPLE=OFF -DCASTOR_BUILDGRP_TOOL=OFF -DCASTOR_FORCE_VCPKG_SUBMODULES=ON

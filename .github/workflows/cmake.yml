name: CMake

on: [push]

jobs:
  build:
    strategy:
      matrix:
        os: [[ubuntu-latest,x64-linux]]
        buildType: [Release]

    runs-on: ${{ matrix.os[0] }}

    steps:
    - uses: actions/checkout@v2

    # Restore from cache the previously built ports. If cache-miss, download, build vcpkg.
    - name: Setup vcpkg
      # Download and build vcpkg, without installing any port. If content is cached already, it is a no-op.
      uses: lukka/run-vcpkg@v4
      with:
        vcpkgGitCommitId: '7e3d3beac5ca6fe8aab4599d4e1d8ce270ccdea8'
        setupOnly: true

    - name: Install spirv-cross
      run: $VCPKG_ROOT/vcpkg install spirv-cross:${{ matrix.os[1] } assimp:${{ matrix.os[1] } freetype:${{ matrix.os[1] }} zlib:${{ matrix.os[1] }}
      shell: bash

    - name: Checkout external/Ashes submodule
      run: git submodule update --init -- "external/Ashes"

    - name: Checkout external/Ashes/Vulkan-Headers submodule
      working-directory: ${{runner.workspace}}/external/Ashes
      run: git submodule update --init -- "external/Vulkan-Headers"

    - name: Cache Ashes submodule
      uses: actions/cache@v2
      env:
        cache-name: cache-ashes-submodule
      with:
          path: $GITHUB_WORKSPACE/external/Ashes
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.*') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Checkout external/ShaderWriter submodule
      run: git submodule update --init -- "external/ShaderWriter"

    - name: Cache ShaderWriter submodule
      uses: actions/cache@v2
      env:
        cache-name: cache-shaderwriter-submodule
      with:
          path: $GITHUB_WORKSPACE/external/ShaderWriter
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.*') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Checkout external/gli submodule
      run: git submodule update --init -- "external/gli"

    - name: Cache gli submodule
      uses: actions/cache@v2
      env:
        cache-name: cache-gli-submodule
      with:
          path: $GITHUB_WORKSPACE/external/gli
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.*') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build-${{ matrix.buildType }}

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.buildType }} -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/package/Castor3D -DSDW_GENERATE_SOURCE=OFF -DCASTOR_BUILD_PLUGINS=OFF -DCASTOR_BUILDGRP_INTEROP=OFF -DCASTOR_BUILDGRP_TEST=OFF -DCASTOR_BUILDGRP_SAMPLE=OFF -DPROJECTS_USE_PRECOMPILED_HEADERS=OFF -DCASTOR_USE_GLSLANG=OFF -DCASTOR_DISABLE_DELAYED_INITIALISATION=ON

    - name: Build
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      shell: bash
      run: cmake --install . --config ${{ matrix.buildType }}

    - name: Test
      working-directory: ${{runner.workspace}}/build-${{ matrix.buildType }}
      shell: bash
      run: ctest -C ${{ matrix.buildType }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: generated-binaries
        path: $GITHUB_WORKSPACE/package/Castor3D/

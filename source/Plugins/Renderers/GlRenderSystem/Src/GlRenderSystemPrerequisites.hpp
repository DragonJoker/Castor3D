/*
This source file is part of Castor3D (http://castor3d.developpez.com/castor3d.htm)

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
the program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/copyleft/lesser.txt.
*/
#ifndef ___GL_RENDER_SYSTEM_PREREQUISITES_H___
#define ___GL_RENDER_SYSTEM_PREREQUISITES_H___

#if defined( _WIN32 )
#	include <Windows.h>
#elif defined( __linux__ )
#	include <X11/Xlib.h>
#	include <GL/glx.h>
#endif
#include <GL/gl.h>

#include <CastorUtils.hpp>
#include <Castor3DPrerequisites.hpp>

#ifdef _WIN32
#	ifdef GlRenderSystem_EXPORTS
#		define C3D_Gl_API __declspec( dllexport )
#	else
#		define C3D_Gl_API __declspec( dllimport )
#	endif
#else
#	define C3D_Gl_API
#endif

#define BUFFER_OFFSET( n ) ( ( uint8_t * )NULL + ( n ) )

using Castor::real;

namespace GlRender
{
	using Castor::real;

	typedef enum eGL_BUFFER
	{
		eGL_BUFFER_NONE = 0x0000,
		eGL_BUFFER_FRONT_LEFT = 0x0400,
		eGL_BUFFER_FRONT_RIGHT = 0x0401,
		eGL_BUFFER_BACK_LEFT = 0x0402,
		eGL_BUFFER_BACK_RIGHT = 0x0403,
		eGL_BUFFER_FRONT = 0x0404,
		eGL_BUFFER_BACK = 0x0405,
		eGL_BUFFER_LEFT = 0x0406,
		eGL_BUFFER_RIGHT = 0x0407,
		eGL_BUFFER_FRONT_AND_BACK = 0x0408,
		eGL_BUFFER_COLOR0 = 0x8CE0,
		eGL_BUFFER_COLOR1 = 0x8CE1,
		eGL_BUFFER_COLOR2 = 0x8CE2,
		eGL_BUFFER_COLOR3 = 0x8CE3,
		eGL_BUFFER_COLOR4 = 0x8CE4,
		eGL_BUFFER_COLOR5 = 0x8CE5,
		eGL_BUFFER_COLOR6 = 0x8CE6,
		eGL_BUFFER_COLOR7 = 0x8CE7,
		eGL_BUFFER_COLOR8 = 0x8CE8,
		eGL_BUFFER_COLOR9 = 0x8CE9,
		eGL_BUFFER_COLOR10 = 0x8CEA,
		eGL_BUFFER_COLOR11 = 0x8CEB,
		eGL_BUFFER_COLOR12 = 0x8CEC,
		eGL_BUFFER_COLOR13 = 0x8CED,
		eGL_BUFFER_COLOR14 = 0x8CEE,
		eGL_BUFFER_COLOR15 = 0x8CEF,
	}	eGL_BUFFER;

	typedef enum eGL_PATCH_PARAMETER
	{
		eGL_PATCH_PARAMETER_VERTICES = 0x8E72,
		eGL_PATCH_PARAMETER_DEFAULT_INNER_LEVEL = 0x8E73,
		eGL_PATCH_PARAMETER_DEFAULT_OUTER_LEVEL = 0x8E74,
	}	eGL_PATCH_PARAMETER;

	typedef enum eGL_PRIMITIVE CASTOR_TYPE( uint32_t )
	{
		eGL_PRIMITIVE_POINTS = 0x0000,
		eGL_PRIMITIVE_LINES = 0x0001,
		eGL_PRIMITIVE_LINE_LOOP = 0x0002,
		eGL_PRIMITIVE_LINE_STRIP = 0x0003,
		eGL_PRIMITIVE_TRIANGLES = 0x0004,
		eGL_PRIMITIVE_TRIANGLE_STRIP = 0x0005,
		eGL_PRIMITIVE_TRIANGLE_FAN = 0x0006,
		eGL_PRIMITIVE_QUADS = 0x0007,
		eGL_PRIMITIVE_QUAD_STRIP = 0x0008,
		eGL_PRIMITIVE_POLYGON = 0x0009,
		eGL_PRIMITIVE_PATCHES = 0x000E,
	}	eGL_PRIMITIVE;

	typedef enum eGL_INTERNAL_FORMAT			//	Type	Comps	Norm	0	1	2	3
	{
		eGL_INTERNAL_FORMAT_RGBA8 = 0x8058,		//	uint		4	YES		R	G	B	A
		eGL_INTERNAL_FORMAT_RGBA16 = 0x805B,	//	short		4	YES		R	G	B	A
		eGL_INTERNAL_FORMAT_R8 = 0x8229,		//	ubyte		1	YES		R	0	0	1
		eGL_INTERNAL_FORMAT_R16 = 0x822A,		//	ushort		1	YES		R	0	0	1
		eGL_INTERNAL_FORMAT_RG8 = 0x822B,		//	ubyte		2	YES		R	G	0	1
		eGL_INTERNAL_FORMAT_RG16 = 0x822C,		//	ushort		2	YES		R	G	0	1
		eGL_INTERNAL_FORMAT_R16F = 0x822D,		//	half		1	NO		R	0	0	1
		eGL_INTERNAL_FORMAT_R32F = 0x822E,		//	float		1	NO		R	0	0	1
		eGL_INTERNAL_FORMAT_RG16F = 0x822F,		//	half		2	NO		R	G	0	1
		eGL_INTERNAL_FORMAT_RG32F = 0x8230,		//	float		2	NO		R	G	0	1
		eGL_INTERNAL_FORMAT_R8I = 0x8231,		//	byte		1	NO		R	0	0	1
		eGL_INTERNAL_FORMAT_R8UI = 0x8232,		//	ubyte		1	NO		R	0	0	1
		eGL_INTERNAL_FORMAT_R16I = 0x8233,		//	short		1	NO		R	0	0	1
		eGL_INTERNAL_FORMAT_R16UI = 0x8234,		//	ushort		1	NO		R	0	0	1
		eGL_INTERNAL_FORMAT_R32I = 0x8235,		//	int			1	NO		R	0	0	1
		eGL_INTERNAL_FORMAT_R32UI = 0x8236,		//	uint		1	NO		R	0	0	1
		eGL_INTERNAL_FORMAT_RG8I = 0x8237,		//	byte		2	NO		R	G	0	1
		eGL_INTERNAL_FORMAT_RG8UI = 0x8238,		//	ubyte		2	NO		R	G	0	1
		eGL_INTERNAL_FORMAT_RG16I = 0x8239,		//	short		2	NO		R	G	0	1
		eGL_INTERNAL_FORMAT_RG16UI = 0x823A,	//	ushort		2	NO		R	G	0	1
		eGL_INTERNAL_FORMAT_RG32I = 0x823B,		//	int			2	NO		R	G	0	1
		eGL_INTERNAL_FORMAT_RG32UI = 0x823C,	//	uint		2	NO		R	G	0	1
		eGL_INTERNAL_FORMAT_RGBA32F = 0x8814,	//	float		4	NO		R	G	B	A
		eGL_INTERNAL_FORMAT_RGBA16F = 0x881A,	//	half		4	NO		R	G	B	A
		eGL_INTERNAL_FORMAT_RGBA32UI = 0x8D70,	//	uint		4	NO		R	G	B	A
		eGL_INTERNAL_FORMAT_RGBA16UI = 0x8D76,	//	ushort		4	NO		R	G	B	A
		eGL_INTERNAL_FORMAT_RGB16UI = 0x8D77,	//	ushort		3	NO		R	G	B	1
		eGL_INTERNAL_FORMAT_RGBA8UI = 0x8D7C,	//	ubyte		4	NO		R	G	B	A
		eGL_INTERNAL_FORMAT_RGBA32I = 0x8D82,	//	int			4	NO		R	G	B	A
		eGL_INTERNAL_FORMAT_RGBA16I = 0x8D88,	//	short		4	NO		R	G	B	A
		eGL_INTERNAL_FORMAT_RGBA8I = 0x8D8E,	//	byte		4	NO		R	G	B	A
	}	eGL_INTERNAL_FORMAT;

	typedef enum eGL_TEXDIM
	{
		eGL_TEXDIM_BUFFER = 0x8C2A,
		eGL_TEXDIM_1D = 0x0DE0,
		eGL_TEXDIM_1D_ARRAY = 0x8C18,
		eGL_TEXDIM_2D = 0x0DE1,
		eGL_TEXDIM_2D_ARRAY = 0x8C1A,
		eGL_TEXDIM_2DMS = 0x9100,
		eGL_TEXDIM_2DMS_ARRAY = 0x9102,
		eGL_TEXDIM_3D = 0x806F,
		eGL_TEXDIM_CUBE = 0x8513,
		eGL_TEXDIM_CUBE_ARRAY = 0x9009,
	}	eGL_TEXDIM;

	typedef enum eGL_FUNC
	{
		eGL_FUNC_NEVER = 0x0200,
		eGL_FUNC_LESS = 0x0201,
		eGL_FUNC_EQUAL = 0x0202,
		eGL_FUNC_LEQUAL = 0x0203,
		eGL_FUNC_GREATER = 0x0204,
		eGL_FUNC_NOTEQUAL = 0x0205,
		eGL_FUNC_GEQUAL = 0x0206,
		eGL_FUNC_ALWAYS = 0x0207,
	}	eGL_FUNC;

	typedef enum eGL_WRAP_MODE
	{
		eGL_WRAP_MODE_CLAMP = 0x2900,
		eGL_WRAP_MODE_REPEAT = 0x2901,
		eGL_WRAP_MODE_CLAMP_TO_BORDER = 0x812D,
		eGL_WRAP_MODE_CLAMP_TO_EDGE = 0x812F,
		eGL_WRAP_MODE_MIRRORED_REPEAT = 0x8370,
	}	eGL_WRAP_MODE;

	typedef enum eGL_INTERPOLATION_MODE
	{
		eGL_INTERPOLATION_MODE_NEAREST = 0x2600,
		eGL_INTERPOLATION_MODE_LINEAR = 0x2601,
		eGL_INTERPOLATION_MODE_NEAREST_MIPMAP_NEAREST = 0x2700,
		eGL_INTERPOLATION_MODE_LINEAR_MIPMAP_NEAREST = 0x2701,
		eGL_INTERPOLATION_MODE_NEAREST_MIPMAP_LINEAR = 0x2702,
		eGL_INTERPOLATION_MODE_LINEAR_MIPMAP_LINEAR = 0x2703,
	}	eGL_INTERPOLATION_MODE;

	typedef enum eGL_BLEND_FACTOR
	{
		eGL_BLEND_FACTOR_ZERO = 0x0000,
		eGL_BLEND_FACTOR_ONE = 0x0001,
		eGL_BLEND_FACTOR_SRC_COLOR = 0x0300,
		eGL_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 0x0301,
		eGL_BLEND_FACTOR_SRC_ALPHA = 0x0302,
		eGL_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 0x0303,
		eGL_BLEND_FACTOR_DST_ALPHA = 0x0304,
		eGL_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 0x0305,
		eGL_BLEND_FACTOR_DST_COLOR = 0x0306,
		eGL_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 0x0307,
		eGL_BLEND_FACTOR_SRC_ALPHA_SATURATE = 0x0308,
		eGL_BLEND_FACTOR_CONSTANT = 0x8001,
		eGL_BLEND_FACTOR_ONE_MINUS_CONSTANT = 0x8002,
		eGL_BLEND_FACTOR_SRC1_ALPHA = 0x8589,
		eGL_BLEND_FACTOR_SRC1_COLOR = 0x88F9,
		eGL_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 0x88FA,
		eGL_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 0x88FB,
	}	eGL_BLEND_FACTOR;

	typedef enum eGL_BUFFER_USAGE
	{
		eGL_BUFFER_USAGE_VERTEX_ARRAY = 0x8074,
		eGL_BUFFER_USAGE_NORMAL_ARRAY = 0x8075,
		eGL_BUFFER_USAGE_COLOR_ARRAY = 0x8076,
		eGL_BUFFER_USAGE_INDEX_ARRAY = 0x8077,
		eGL_BUFFER_USAGE_TEXTURE_COORD_ARRAY = 0x8078,
		eGL_BUFFER_USAGE_TANGENT_ARRAY = 0x8439,
		eGL_BUFFER_USAGE_BINORMAL_ARRAY = 0x843A,
		eGL_BUFFER_USAGE_VERTEX_ATTRIB_ARRAY_UNIFIED = 0x8F1E,
		eGL_BUFFER_USAGE_ELEMENT_ARRAY_UNIFIED = 0x8F1F,
	}	eGL_BUFFER_USAGE;

	typedef enum eGL_TEXTURE_INDEX
	{
		eGL_TEXTURE_INDEX_0 = 0x84C0,
		eGL_TEXTURE_INDEX_1 = 0x84C1,
		eGL_TEXTURE_INDEX_2 = 0x84C2,
		eGL_TEXTURE_INDEX_3 = 0x84C3,
		eGL_TEXTURE_INDEX_4 = 0x84C4,
		eGL_TEXTURE_INDEX_5 = 0x84C5,
		eGL_TEXTURE_INDEX_6 = 0x84C6,
		eGL_TEXTURE_INDEX_7 = 0x84C7,
		eGL_TEXTURE_INDEX_8 = 0x84C8,
		eGL_TEXTURE_INDEX_9 = 0x84C9,
		eGL_TEXTURE_INDEX_10 = 0x84CA,
		eGL_TEXTURE_INDEX_11 = 0x84CB,
		eGL_TEXTURE_INDEX_12 = 0x84CC,
		eGL_TEXTURE_INDEX_13 = 0x84CD,
		eGL_TEXTURE_INDEX_14 = 0x84CE,
		eGL_TEXTURE_INDEX_15 = 0x84CF,
		eGL_TEXTURE_INDEX_16 = 0x84D0,
		eGL_TEXTURE_INDEX_17 = 0x84D1,
		eGL_TEXTURE_INDEX_18 = 0x84D2,
		eGL_TEXTURE_INDEX_19 = 0x84D3,
		eGL_TEXTURE_INDEX_20 = 0x84D4,
		eGL_TEXTURE_INDEX_21 = 0x84D5,
		eGL_TEXTURE_INDEX_22 = 0x84D6,
		eGL_TEXTURE_INDEX_23 = 0x84D7,
		eGL_TEXTURE_INDEX_24 = 0x84D8,
		eGL_TEXTURE_INDEX_25 = 0x84D9,
		eGL_TEXTURE_INDEX_26 = 0x84DA,
		eGL_TEXTURE_INDEX_27 = 0x84DB,
		eGL_TEXTURE_INDEX_28 = 0x84DC,
		eGL_TEXTURE_INDEX_29 = 0x84DD,
		eGL_TEXTURE_INDEX_30 = 0x84DE,
		eGL_TEXTURE_INDEX_31 = 0x84DF,
	}	eGL_TEXTURE_INDEX;

	typedef enum eGL_BLEND_SOURCE
	{
		eGL_BLEND_SOURCE_TEXTURE = 0x1702,
		eGL_BLEND_SOURCE_TEXTURE0 = 0x84C0,
		eGL_BLEND_SOURCE_TEXTURE1 = 0x84C1,
		eGL_BLEND_SOURCE_TEXTURE2 = 0x84C2,
		eGL_BLEND_SOURCE_TEXTURE3 = 0x84C3,
		eGL_BLEND_SOURCE_CONSTANT = 0x8576,
		eGL_BLEND_SOURCE_PRIMARY_COLOR = 0x8577,
		eGL_BLEND_SOURCE_PREVIOUS = 0x8578,
	}	eGL_BLEND_SOURCE;

	typedef enum eGL_BLEND_FUNC
	{
		eGL_BLEND_FUNC_ADD = 0x0104,
		eGL_BLEND_FUNC_REPLACE = 0x1E01,
		eGL_BLEND_FUNC_MODULATE = 0x2100,
		eGL_BLEND_FUNC_SUBTRACT = 0x84E7,
		eGL_BLEND_FUNC_ADD_SIGNED = 0x8574,
		eGL_BLEND_FUNC_INTERPOLATE = 0x8575,
		eGL_BLEND_FUNC_DOT3_RGB = 0x86AE,
		eGL_BLEND_FUNC_DOT3_RGBA = 0x86AF,
	}	eGL_BLEND_FUNC;

	typedef enum eGL_BLEND_OP
	{
		eGL_BLEND_OP_ADD = 0x8006,
		eGL_BLEND_OP_MIN = 0x8007,
		eGL_BLEND_OP_MAX = 0x8008,
		eGL_BLEND_OP_SUBTRACT = 0x800A,
		eGL_BLEND_OP_REV_SUBTRACT = 0x800B,
	}	eGL_BLEND_OP;

	typedef enum eGL_INTERNAL
	{
		eGL_INTERNAL_1 = 0x0001,
		eGL_INTERNAL_2 = 0x0002,
		eGL_INTERNAL_3 = 0x0003,
		eGL_INTERNAL_4 = 0x0004,
		eGL_INTERNAL_LUMINANCE = 0x1909,
		eGL_INTERNAL_R3_G3_B2 = 0x2A10,
		eGL_INTERNAL_ALPHA4 = 0x803B,
		eGL_INTERNAL_ALPHA8 = 0x803C,
		eGL_INTERNAL_ALPHA12 = 0x803D,
		eGL_INTERNAL_ALPHA16 = 0x803E,
		eGL_INTERNAL_COMPRESSED_ALPHA = 0x84E9,
		eGL_INTERNAL_COMPRESSED_LUMINANCE = 0x84EA,
		eGL_INTERNAL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB,
		eGL_INTERNAL_COMPRESSED_INTENSITY = 0x84EC,
		eGL_INTERNAL_COMPRESSED_RGB = 0x84ED,
		eGL_INTERNAL_COMPRESSED_RGBA = 0x84EE,
		eGL_INTERNAL_LUMINANCE4 = 0x803F,
		eGL_INTERNAL_LUMINANCE8 = 0x8040,
		eGL_INTERNAL_LUMINANCE12 = 0x8041,
		eGL_INTERNAL_LUMINANCE16 = 0x8042,
		eGL_INTERNAL_LUMINANCE4_ALPHA4 = 0x8043,
		eGL_INTERNAL_LUMINANCE6_ALPHA2 = 0x8044,
		eGL_INTERNAL_LUMINANCE8_ALPHA8 = 0x8045,
		eGL_INTERNAL_LUMINANCE12_ALPHA4 = 0x8046,
		eGL_INTERNAL_LUMINANCE12_ALPHA12 = 0x8047,
		eGL_INTERNAL_LUMINANCE16_ALPHA16 = 0x8048,
		eGL_INTERNAL_INTENSITY = 0x8049,
		eGL_INTERNAL_INTENSITY4 = 0x804A,
		eGL_INTERNAL_INTENSITY8 = 0x804B,
		eGL_INTERNAL_INTENSITY12 = 0x804C,
		eGL_INTERNAL_INTENSITY16 = 0x804D,
		eGL_INTERNAL_RGB4 = 0x804F,
		eGL_INTERNAL_RGB5 = 0x8050,
		eGL_INTERNAL_RGB8 = 0x8051,
		eGL_INTERNAL_RGB10 = 0x8052,
		eGL_INTERNAL_RGB12 = 0x8053,
		eGL_INTERNAL_RGB16 = 0x8054,
		eGL_INTERNAL_RGBA2 = 0x8055,
		eGL_INTERNAL_RGBA4 = 0x8056,
		eGL_INTERNAL_RGB5_A1 = 0x8057,
		eGL_INTERNAL_RGBA8 = 0x8058,
		eGL_INTERNAL_RGB10_A2 = 0x8059,
		eGL_INTERNAL_RGBA12 = 0x805A,
		eGL_INTERNAL_RGBA16 = 0x805B,
		eGL_INTERNAL_DEPTH_COMPONENT16 = 0x81A5,
		eGL_INTERNAL_DEPTH_COMPONENT24 = 0x81A6,
		eGL_INTERNAL_DEPTH_COMPONENT32 = 0x81A7,
		eGL_INTERNAL_R8 = 0x8229,
		eGL_INTERNAL_RG8 = 0x822B,
		eGL_INTERNAL_RG16 = 0x822C,
		eGL_INTERNAL_R16F = 0x822D,
		eGL_INTERNAL_R32F = 0x822E,
		eGL_INTERNAL_RG16F = 0x822F,
		eGL_INTERNAL_RG32F = 0x8230,
		eGL_INTERNAL_COMPRESSED_RGBA_S3TC_DXT1 = 0x83F1,
		eGL_INTERNAL_COMPRESSED_RGBA_S3TC_DXT3 = 0x83F2,
		eGL_INTERNAL_COMPRESSED_RGBA_S3TC_DXT5 = 0x83F3,
		eGL_INTERNAL_RGBA32F = 0x8814,
		eGL_INTERNAL_RGB32F = 0x8815,
		eGL_INTERNAL_RGBA16F = 0x881A,
		eGL_INTERNAL_RGB16F = 0x881B,
		eGL_INTERNAL_DEPTH24_STENCIL8 = 0x88F0,
		eGL_INTERNAL_SRGB = 0x8C40,
		eGL_INTERNAL_SRGB8 = 0x8C41,
		eGL_INTERNAL_SRGB_ALPHA = 0x8C42,
		eGL_INTERNAL_SRGB8_ALPHA8 = 0x8C43,
		eGL_INTERNAL_SLUMINANCE_ALPHA = 0x8C44,
		eGL_INTERNAL_SLUMINANCE8_ALPHA8 = 0x8C45,
		eGL_INTERNAL_SLUMINANCE = 0x8C46,
		eGL_INTERNAL_SLUMINANCE8 = 0x8C47,
		eGL_INTERNAL_DEPTH_COMPONENT32F = 0x8CAC,
		eGL_INTERNAL_STENCIL_INDEX1 = 0x8D46,
		eGL_INTERNAL_STENCIL_INDEX4 = 0x8D47,
		eGL_INTERNAL_STENCIL_INDEX8 = 0x8D48,
		eGL_INTERNAL_STENCIL_INDEX16 = 0x8D49,
	}	eGL_INTERNAL;

	typedef enum eGL_BUFFER_MODE
	{
		eGL_BUFFER_MODE_STREAM_DRAW = 0x88E0,
		eGL_BUFFER_MODE_STREAM_READ = 0x88E1,
		eGL_BUFFER_MODE_STREAM_COPY = 0x88E2,
		eGL_BUFFER_MODE_STATIC_DRAW = 0x88E4,
		eGL_BUFFER_MODE_STATIC_READ = 0x88E5,
		eGL_BUFFER_MODE_STATIC_COPY = 0x88E6,
		eGL_BUFFER_MODE_DYNAMIC_DRAW = 0x88E8,
		eGL_BUFFER_MODE_DYNAMIC_READ = 0x88E9,
		eGL_BUFFER_MODE_DYNAMIC_COPY = 0x88EA,
	}	eGL_BUFFER_MODE;

	typedef enum eGL_COMPONENT
	{
		//eGL_COMPONENT_COLOR = 0x4000,
		//eGL_COMPONENT_STENCIL = 0x0100,
		//eGL_COMPONENT_DEPTH = 0x0400,
		eGL_COMPONENT_COLOR = 0x1900,
		eGL_COMPONENT_STENCIL = 0x1901,
		eGL_COMPONENT_DEPTH = 0x1902,
	}	eGL_COMPONENT;

	typedef enum eGL_BUFFER_TARGET
	{
		eGL_BUFFER_TARGET_ARRAY = 0x8892,
		eGL_BUFFER_TARGET_ELEMENT_ARRAY = 0x8893,
		eGL_BUFFER_TARGET_PIXEL_PACK = 0x88EB,
		eGL_BUFFER_TARGET_PIXEL_UNPACK = 0x88EC,
		eGL_BUFFER_TARGET_TEXTURE = 0x8C2A,
		eGL_BUFFER_TARGET_UNIFORM = 0x8A11,//0x8DEE
	}	eGL_BUFFER_TARGET;

	typedef enum eGL_SHADER_TYPE
	{
		eGL_SHADER_TYPE_FRAGMENT = 0x8B30,
		eGL_SHADER_TYPE_VERTEX = 0x8B31,
		eGL_SHADER_TYPE_GEOMETRY = 0x8DD9,
		eGL_SHADER_TYPE_TESS_EVALUATION = 0x8E87,
		eGL_SHADER_TYPE_TESS_CONTROL = 0x8E88,
		eGL_SHADER_TYPE_COMPUTE = 0x91B9,
	}	eGL_SHADER_TYPE;

	typedef enum eGL_LOCK
	{
		eGL_LOCK_READ_ONLY = 0x88B8,
		eGL_LOCK_WRITE_ONLY = 0x88B9,
		eGL_LOCK_READ_WRITE = 0x88BA,
	}	eGL_LOCK;

	typedef enum eGL_LIGHT_COMPONENT
	{
		eGL_LIGHT_COMPONENT_AMBIENT = 0x1200,
		eGL_LIGHT_COMPONENT_DIFFUSE = 0x1201,
		eGL_LIGHT_COMPONENT_SPECULAR = 0x1202,
		eGL_LIGHT_COMPONENT_POSITION = 0x1203,
		eGL_LIGHT_COMPONENT_SPOT_DIRECTION = 0x1204,
		eGL_LIGHT_COMPONENT_SPOT_EXPONENT = 0x1205,
		eGL_LIGHT_COMPONENT_SPOT_CUTOFF = 0x1206,
		eGL_LIGHT_COMPONENT_CONSTANT_ATTENUATION = 0x1207,
		eGL_LIGHT_COMPONENT_LINEAR_ATTENUATION = 0x1208,
		eGL_LIGHT_COMPONENT_QUADRATIC_ATTENUATION = 0x1209,
	}	eGL_LIGHT_COMPONENT;

	typedef enum eGL_MATERIAL_COMPONENT
	{
		eGL_MATERIAL_COMPONENT_AMBIENT = 0x1200,
		eGL_MATERIAL_COMPONENT_DIFFUSE = 0x1201,
		eGL_MATERIAL_COMPONENT_SPECULAR = 0x1202,
		eGL_MATERIAL_COMPONENT_POSITION = 0x1203,
		eGL_MATERIAL_COMPONENT_EMISSION = 0x1600,
		eGL_MATERIAL_COMPONENT_SHININESS = 0x1601,
	}	eGL_MATERIAL_COMPONENT;

	typedef enum eGL_UNIFORM_NAME
	{
		eGL_UNIFORM_SIZE = 0x8A38,
		eGL_UNIFORM_OFFSET = 0x8A3B,
		eGL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40,
		eGL_UNIFORM_GPU_ADDRESS = 0x8F34,
	}	eGL_UNIFORM_NAME;

	typedef enum eGL_CREATECONTEXT_ATTRIB
	{
		eGL_CREATECONTEXT_ATTRIB_DEBUG_BIT = 0x0001,
		eGL_CREATECONTEXT_ATTRIB_FORWARD_COMPATIBLE_BIT = 0x0002,
		eGL_CREATECONTEXT_ATTRIB_MAJOR_VERSION = 0x2091,
		eGL_CREATECONTEXT_ATTRIB_MINOR_VERSION = 0x2092,
		eGL_CREATECONTEXT_ATTRIB_LAYER_PLANE = 0x2093,
		eGL_CREATECONTEXT_ATTRIB_FLAGS = 0x2094,
	}	eGL_CREATECONTEXT_ATTRIB;

	typedef enum eGL_PROFILE_ATTRIB
	{
		eGL_PROFILE_ATTRIB_CORE_BIT = 0x0001,
		eGL_PROFILE_ATTRIB_COMPATIBILITY_BIT = 0x0002,
		eGL_PROFILE_ATTRIB_MASK = 0x9126,
	}	eGL_PROFILE_ATTRIB;

	typedef enum eGL_SHADER_STATUS
	{
		eGL_SHADER_STATUS_DELETE = 0x8B80,
		eGL_SHADER_STATUS_COMPILE = 0x8B81,
		eGL_SHADER_STATUS_LINK = 0x8B82,
		eGL_SHADER_STATUS_VALIDATE = 0x8B83,
		eGL_SHADER_STATUS_INFO_LOG_LENGTH = 0x8B84,
	}	eGL_SHADER_STATUS;

	typedef enum eGL_TYPE
	{
		eGL_TYPE_DEFAULT = 0x0000,
		eGL_TYPE_BYTE = 0x1400,
		eGL_TYPE_UNSIGNED_BYTE = 0x1401,
		eGL_TYPE_SHORT = 0x1402,
		eGL_TYPE_UNSIGNED_SHORT = 0x1403,
		eGL_TYPE_INT = 0x1404,
		eGL_TYPE_UNSIGNED_INT = 0x1405,
		eGL_TYPE_FLOAT = 0x1406,
		eGL_TYPE_DOUBLE = 0x140A,
		eGL_TYPE_BITMAP = 0X1A00,
		eGL_TYPE_UNSIGNED_BYTE_3_3_2 = 0x8032,
		eGL_TYPE_UNSIGNED_SHORT_4_4_4_4 = 0x8033,
		eGL_TYPE_UNSIGNED_SHORT_5_5_5_1 = 0x8034,
		eGL_TYPE_UNSIGNED_INT_8_8_8_8 = 0x8035,
		eGL_TYPE_UNSIGNED_INT_10_10_10_2 = 0x8036,
		eGL_TYPE_UNSIGNED_BYTE_2_3_3_REV = 0x8362,
		eGL_TYPE_UNSIGNED_SHORT_5_6_5 = 0x8363,
		eGL_TYPE_UNSIGNED_SHORT_5_6_5_REV = 0x8364,
		eGL_TYPE_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365,
		eGL_TYPE_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366,
		eGL_TYPE_UNSIGNED_INT_8_8_8_8_REV = 0x8367,
		eGL_TYPE_UNSIGNED_INT_2_10_10_10_REV = 0x8368,
		eGL_TYPE_UNSIGNED_INT_24_8 = 0x84FA,
#if CASTOR_USE_DOUBLE
		eGL_TYPE_REAL = eGL_TYPE_DOUBLE
#else
		eGL_TYPE_REAL = eGL_TYPE_FLOAT
#endif
	}	eGL_TYPE;

	typedef enum eGL_FORMAT
	{
		eGL_FORMAT_STENCIL = 0x1901,
		eGL_FORMAT_DEPTH = 0x1902,
		eGL_FORMAT_RED = 0x1903,
		eGL_FORMAT_GREEN = 0x1904,
		eGL_FORMAT_BLUE = 0x1905,
		eGL_FORMAT_ALPHA = 0x1906,
		eGL_FORMAT_RGB = 0x1907,
		eGL_FORMAT_RGBA = 0x1908,
		eGL_FORMAT_LUMINANCE = 0x1909,
		eGL_FORMAT_LUMINANCE_ALPHA = 0x190A,
		eGL_FORMAT_BGR = 0x80E0,
		eGL_FORMAT_BGRA = 0x80E1,
		eGL_FORMAT_RG = 0x8227,
		eGL_FORMAT_DEPTH_STENCIL = 0x84F9,
	}	eGL_FORMAT;

	typedef enum eGL_TEXTURE_PARAMETER
	{
		eGL_TEXTURE_PARAMETER_BORDERCOLOUR = 0x1004,
		eGL_TEXTURE_PARAMETER_MAG_FILTER = 0x2800,
		eGL_TEXTURE_PARAMETER_MIN_FILTER = 0x2801,
		eGL_TEXTURE_PARAMETER_WRAP_S = 0x2802,
		eGL_TEXTURE_PARAMETER_WRAP_T = 0x2803,
		eGL_TEXTURE_PARAMETER_WRAP_R = 0x8072,
		eGL_TEXTURE_PARAMETER_MINLOD = 0x813A,
		eGL_TEXTURE_PARAMETER_MAXLOD = 0x813B,
		eGL_TEXTURE_PARAMETER_GENERATE_MIPMAP = 0x8191,
		eGL_TEXTURE_PARAMETER_MAX_ANISOTROPY = 0x84FF,
		eGL_TEXTURE_PARAMETER_LODBIAS = 0x8501,
	}	eGL_TEXTURE_PARAMETER;

	typedef enum eGL_TEXENV_TARGET
	{
		eGL_TEXENV_TARGET_TEXTURE_ENV = 0x2300,
		eGL_TEXENV_TARGET_POINT_SPRITE = 0x8861,
	}	eGL_TEXENV_TARGET;

	typedef enum eGL_TEXENV_ARGNAME
	{
		eGL_TEXENV_ARGNAME_ALPHA_SCALE = 0x0D1C,
		eGL_TEXENV_ARGNAME_TEXTURE_ENV_MODE = 0x2200,
		eGL_TEXENV_ARGNAME_TEXTURE_ENV_COLOR = 0x2201,
		eGL_TEXENV_ARGNAME_COMBINE_RGB = 0x8571,
		eGL_TEXENV_ARGNAME_COMBINE_ALPHA = 0x8572,
		eGL_TEXENV_ARGNAME_RGB_SCALE = 0x8573,
		eGL_TEXENV_ARGNAME_SOURCE0_RGB = 0x8580,
		eGL_TEXENV_ARGNAME_SOURCE1_RGB = 0x8581,
		eGL_TEXENV_ARGNAME_SOURCE2_RGB = 0x8582,
		eGL_TEXENV_ARGNAME_SOURCE0_ALPHA = 0x8588,
		eGL_TEXENV_ARGNAME_SOURCE1_ALPHA = 0x8589,
		eGL_TEXENV_ARGNAME_SOURCE2_ALPHA = 0x858A,
		eGL_TEXENV_ARGNAME_OPERAND0_RGB = 0x8590,
		eGL_TEXENV_ARGNAME_OPERAND1_RGB = 0x8591,
		eGL_TEXENV_ARGNAME_OPERAND2_RGB = 0x8592,
		eGL_TEXENV_ARGNAME_OPERAND0_ALPHA = 0x8598,
		eGL_TEXENV_ARGNAME_OPERAND1_ALPHA = 0x8599,
		eGL_TEXENV_ARGNAME_OPERAND2_ALPHA = 0x859A,
		eGL_TEXENV_ARGNAME_COORD_REPLACE = 0x8862,
	}	eGL_TEXENV_ARGNAME;

	typedef enum eGL_TEXENV_PARAM
	{
		eGL_TEXENV_PARAM_ADD = 0x0104,
		eGL_TEXENV_PARAM_BLEND = 0x0BE2,
		eGL_TEXENV_PARAM_TEXTURE = 0x1702,
		eGL_TEXENV_PARAM_REPLACE = 0x1E01,
		eGL_TEXENV_PARAM_MODULATE = 0x2100,
		eGL_TEXENV_PARAM_DECAL = 0x2101,
		eGL_TEXENV_PARAM_SRC_COLOR = 0x0300,
		eGL_TEXENV_PARAM_ONE_MINUS_SRC_COLOR = 0x0301,
		eGL_TEXENV_PARAM_SRC_ALPHA = 0x0302,
		eGL_TEXENV_PARAM_ONE_MINUS_SRC_ALPHA = 0x0303,
		eGL_TEXENV_PARAM_SUBTRACT = 0x84E7,
		eGL_TEXENV_PARAM_COMBINE = 0x8570,
		eGL_TEXENV_PARAM_ADD_SIGNED = 0x8574,
		eGL_TEXENV_PARAM_INTERPOLATE = 0x8575,
		eGL_TEXENV_PARAM_CONSTANT = 0x8576,
		eGL_TEXENV_PARAM_PRIMARY_COLOR = 0x8577,
		eGL_TEXENV_PARAM_PREVIOUS = 0x8578,
		eGL_TEXENV_PARAM_DOT3_RGB = 0x86AE,
		eGL_TEXENV_PARAM_DOT3_RGBA = 0x86AF,
	}	eGL_TEXENV_PARAM;

	typedef enum eGL_TEXGEN_COORD
	{
		eGL_TEXGEN_COORD_S = 0x2000,
		eGL_TEXGEN_COORD_T = 0x2001,
		eGL_TEXGEN_COORD_R = 0x2002,
		eGL_TEXGEN_COORD_Q = 0x2003,
	}	eGL_TEXGEN_COORD;

	typedef enum eGL_TEXGEN_PARAM
	{
		eGL_TEXGEN_PARAM_TEXTURE_GEN_MODE = 0x2500,
		eGL_TEXGEN_PARAM_OBJECT_PLANE = 0x2501,
		eGL_TEXGEN_PARAM_EYE_PLANE = 0x2502,
	}	eGL_TEXGEN_PARAM;

	typedef enum eGL_TEXGEN_MODE
	{
		eGL_TEXGEN_MODE_SPHERE_MAP = 0x2402,
		eGL_TEXGEN_MODE_NORMAL_MAP = 0x8511,
		eGL_TEXGEN_MODE_REFLECTION_MAP = 0x8512,
		eGL_TEXGEN_MODE_CUBE_MAP = 0x8513,
	}	eGL_TEXGEN_MODE;

	typedef enum eGL_BOOLEAN
	{
		eGL_FALSE = 0,
		eGL_TRUE = 1,
	}	eGL_BOOLEAN;

	typedef enum eGL_LIGHT_MODEL_PARAM
	{
		eGL_LIGHT_MODEL_PARAM_LOCAL_VIEWER = 0x0B51,
		eGL_LIGHT_MODEL_PARAM_COLOR_CONTROL = 0x81F8,
		eGL_LIGHT_MODEL_PARAM_SEPARATE_SPECULAR_COLOR = 0x81FA,
	}	eGL_LIGHT_MODEL_PARAM;

	typedef enum eGL_SHADE_MODEL
	{
		eGL_SHADE_MODEL_FLAT = 0x1D00,
		eGL_SHADE_MODEL_SMOOTH = 0x1D01,
	}	eGL_SHADE_MODEL;

	typedef enum eGL_TWEAK
	{
		eGL_TWEAK_LINE_SMOOTH = 0x0B20,
		eGL_TWEAK_CULL_FACE = 0x0B44,
		eGL_TWEAK_LIGHTING = 0x0B50,
		eGL_TWEAK_FOG = 0x0B60,
		eGL_TWEAK_DEPTH_TEST = 0x0B71,
		eGL_TWEAK_STENCIL_TEST = 0x0B90,
		eGL_TWEAK_NORMALIZE = 0x0BA1,
		eGL_TWEAK_ALPHA_TEST = 0x0BC0,
		eGL_TWEAK_DITHER = 0x0BD0,
		eGL_TWEAK_BLEND = 0x0BE2,
		eGL_TWEAK_SCISSOR_TEST = 0x0C11,
		eGL_TWEAK_TEXTURE_GEN_S = 0x0C60,
		eGL_TWEAK_TEXTURE_GEN_T = 0x0C61,
		eGL_TWEAK_TEXTURE_GEN_R = 0x0C62,
		eGL_TWEAK_TEXTURE_GEN_Q = 0x0C63,
		eGL_TWEAK_MULTISAMPLE = 0x809D,
		eGL_TWEAK_ALPHA_TO_COVERAGE = 0x809E,
		eGL_TWEAK_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242,
		eGL_TWEAK_DEPTH_CLAMP = 0x864F,
	}	eGL_TWEAK;

	typedef enum eGL_RENDER_MODE
	{
		eGL_RENDER_MODE_RENDER = 0x1C00,
		eGL_RENDER_MODE_FEEDBACK = 0x1C01,
		eGL_RENDER_MODE_SELECT = 0x1C02,
	}	eGL_RENDER_MODE;

	typedef enum eGL_FRAMEBUFFER_STATUS
	{
		eGL_FRAMEBUFFER_COMPLETE = 0x8CD5,
		eGL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6,
		eGL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7,
		eGL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB,
		eGL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC,
		eGL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD,
		eGL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56,
		eGL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8,
	}	eGL_FRAMEBUFFER_STATUS;

	typedef enum eGL_TEXTURE_ATTACHMENT
	{
		eGL_TEXTURE_ATTACHMENT_NONE = 0x0000,
		eGL_TEXTURE_ATTACHMENT_COLOR0 = 0x8CE0,
		eGL_TEXTURE_ATTACHMENT_DEPTH = 0x8D00,
		eGL_TEXTURE_ATTACHMENT_STENCIL = 0x8D20,
	}	eGL_TEXTURE_ATTACHMENT;

	typedef enum eGL_FRAMEBUFFER_MODE
	{
		eGL_FRAMEBUFFER_MODE_READ = 0x8CA8,
		eGL_FRAMEBUFFER_MODE_DRAW = 0x8CA9,
		eGL_FRAMEBUFFER_MODE_DEFAULT = 0x8D40,
	}	eGL_FRAMEBUFFER_MODE;

	typedef enum eGL_RENDERBUFFER_MODE
	{
		eGL_RENDERBUFFER_MODE_DEFAULT = 0x8D41
	}	eGL_RENDERBUFFER_MODE;

	typedef enum eGL_RENDERBUFFER_ATTACHMENT
	{
		eGL_RENDERBUFFER_ATTACHMENT_NONE = 0x0000,
		eGL_RENDERBUFFER_ATTACHMENT_COLOR0 = 0x8CE0,
		eGL_RENDERBUFFER_ATTACHMENT_DEPTH = 0x8D00,
		eGL_RENDERBUFFER_ATTACHMENT_STENCIL = 0x8D20,
	}	eGL_RENDERBUFFER_ATTACHMENT;

	typedef enum eGL_RENDERBUFFER_PARAMETER
	{
		eGL_RENDERBUFFER_PARAMETER_WIDTH = 0x8D42,
		eGL_RENDERBUFFER_PARAMETER_HEIGHT = 0x8D43,
		eGL_RENDERBUFFER_PARAMETER_INTERNAL_FORMAT = 0x8D44,
		eGL_RENDERBUFFER_PARAMETER_RED_SIZE = 0x8D50,
		eGL_RENDERBUFFER_PARAMETER_GREEN_SIZE = 0x8D51,
		eGL_RENDERBUFFER_PARAMETER_BLUE_SIZE = 0x8D52,
		eGL_RENDERBUFFER_PARAMETER_ALPHA_SIZE = 0x8D53,
		eGL_RENDERBUFFER_PARAMETER_DEPTH_SIZE = 0x8D54,
		eGL_RENDERBUFFER_PARAMETER_STENCIL_SIZE = 0x8D55,
	}	eGL_RENDERBUFFER_PARAMETER;

	typedef enum eGL_RENDERBUFFER_STORAGE
	{
		eGL_RENDERBUFFER_STORAGE_L8 = 0x8229,
		eGL_RENDERBUFFER_STORAGE_L16F = 0x822D,
		eGL_RENDERBUFFER_STORAGE_L32F = 0x822E,
		eGL_RENDERBUFFER_STORAGE_A8L8 = 0x822C,
		eGL_RENDERBUFFER_STORAGE_AL16F = 0x822F,
		eGL_RENDERBUFFER_STORAGE_AL32F = 0x8230,
		eGL_RENDERBUFFER_STORAGE_RGB5_A1 = 0x8057,
		eGL_RENDERBUFFER_STORAGE_RGBA4 = 0x8056,
		eGL_RENDERBUFFER_STORAGE_RGB565 = 0x8D62,
		eGL_RENDERBUFFER_STORAGE_RGB8 = 0x8051,
		eGL_RENDERBUFFER_STORAGE_RGBA8 = 0x8058,
		eGL_RENDERBUFFER_STORAGE_DXTC1 = 0x83F1,
		eGL_RENDERBUFFER_STORAGE_DXTC3 = 0x83F2,
		eGL_RENDERBUFFER_STORAGE_DXTC5 = 0x83F3,
		eGL_RENDERBUFFER_STORAGE_RGB16F = 0x881B,
		eGL_RENDERBUFFER_STORAGE_RGBA16F = 0x881A,
		eGL_RENDERBUFFER_STORAGE_RGB32F = 0x8815,
		eGL_RENDERBUFFER_STORAGE_RGBA32F = 0x8814,
		eGL_RENDERBUFFER_STORAGE_DEPTH24_STENCIL8 = 0x88F0,
		eGL_RENDERBUFFER_STORAGE_DEPTH16 = 0x81A5,
		eGL_RENDERBUFFER_STORAGE_DEPTH24 = 0x81A6,
		eGL_RENDERBUFFER_STORAGE_DEPTH32 = 0x81A7,
		eGL_RENDERBUFFER_STORAGE_STENCIL1 = 0x8D46,
		eGL_RENDERBUFFER_STORAGE_STENCIL4 = 0x8D47,
		eGL_RENDERBUFFER_STORAGE_STENCIL8 = 0x8D48,
		eGL_RENDERBUFFER_STORAGE_STENCIL16 = 0x8D49,
	}	eGL_RENDERBUFFER_STORAGE;

	typedef enum eGL_FRONT_FACE_DIRECTION
	{
		eGL_FRONT_FACE_DIRECTION_CW = 0x0900,
		eGL_FRONT_FACE_DIRECTION_CCW = 0x0901,
	}	eGL_FRONT_FACE_DIRECTION;

	typedef enum eGL_DRAW_BUFFER_MODE
	{
		eGL_DRAW_BUFFER_MODE_NONE = 0x0000,
		eGL_DRAW_BUFFER_MODE_FRONT_LEFT = 0x0400,
		eGL_DRAW_BUFFER_MODE_FRONT_RIGHT = 0x0401,
		eGL_DRAW_BUFFER_MODE_BACK_LEFT = 0x0402,
		eGL_DRAW_BUFFER_MODE_BACK_RIGHT = 0x0403,
		eGL_DRAW_BUFFER_MODE_FRONT = 0x0404,
		eGL_DRAW_BUFFER_MODE_BACK = 0x0405,
		eGL_DRAW_BUFFER_MODE_LEFT = 0x0406,
		eGL_DRAW_BUFFER_MODE_RIGHT = 0x0407,
		eGL_DRAW_BUFFER_MODE_FRONT_AND_BACK = 0x0408,
		eGL_DRAW_BUFFER_MODE_AUX0 = 0x0409,
		eGL_DRAW_BUFFER_MODE_AUX1 = 0x040A,
		eGL_DRAW_BUFFER_MODE_AUX2 = 0x040B,
		eGL_DRAW_BUFFER_MODE_AUX3 = 0x040C,
	}	eGL_DRAW_BUFFER_MODE;

	typedef enum eGL_MATRIX_TYPE CASTOR_TYPE( uint32_t )
	{
		eGL_MATRIX_TYPE_MODELVIEW = 0x1700,
		eGL_MATRIX_TYPE_PROJECTION = 0x1701,
		eGL_MATRIX_TYPE_TEXTURE = 0x1702,
	}	eGL_MATRIX_TYPE;

	typedef enum eGL_MATRIX CASTOR_TYPE( uint32_t )
	{
		eGL_MATRIX_MODELVIEW = 0x0BA6,
		eGL_MATRIX_PROJECTION = 0x0BA7,
		eGL_MATRIX_TEXTURE = 0x0BA8,
	}	eGL_MATRIX;

	typedef enum eGL_GETINTEGER_PARAM
	{
		eGL_GETINTEGER_PARAM_VIEWPORT = 0x0BA2,
		eGL_GETINTEGER_PARAM_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0,
	}	eGL_GETINTEGER_PARAM;

	typedef enum eGL_PROGRAM_PARAM
	{
		eGL_PROGRAM_PARAM_GEOMETRY_VERTICES_OUT = 0x8DDA,//0x8916
		eGL_PROGRAM_PARAM_GEOMETRY_INPUT_TYPE = 0x8DDB,//0x8917
		eGL_PROGRAM_PARAM_GEOMETRY_OUTPUT_TYPE = 0x8DDC,//0x8918
	}	eGL_PROGRAM_PARAM;

	typedef enum eGL_BUFFER_BIT
	{
		eGL_BUFFER_BIT_COLOR = 0x00004000,
		eGL_BUFFER_BIT_DEPTH = 0x00000100,
		eGL_BUFFER_BIT_STENCIL = 0x00000400,
	}	eGL_BUFFER_BIT;

	typedef enum eGL_OTHERS CASTOR_TYPE( uint32_t )
	{
		eGL_INVALID_INDEX = 0xFFFFFFFF,
	}	eGL_OTHERS;

	typedef enum eGL_BUFFER_MAPPING_BIT
	{
		eGL_BUFFER_MAPPING_BIT_READ = 0x0001,
		eGL_BUFFER_MAPPING_BIT_WRITE = 0x0002,
		eGL_BUFFER_MAPPING_BIT_INVALIDATE_RANGE = 0x0004,
		eGL_BUFFER_MAPPING_BIT_INVALIDATE_BUFFER = 0x0008,
		eGL_BUFFER_MAPPING_BIT_FLUSH_EXPLICIT = 0x0010,
		eGL_BUFFER_MAPPING_BIT_UNSYNCHRONIZED = 0x0020,
	}	eGL_BUFFER_MAPPING_BIT;

	typedef enum eGL_FACE
	{
		eGL_FACE_FRONT = 0x0404,
		eGL_FACE_BACK = 0x0405,
		eGL_FACE_FRONT_AND_BACK = 0x0408,
	}	eGL_FACE;

	typedef enum eGL_STENCIL_OP
	{
		eGL_STENCIL_OP_ZERO = 0x0000,
		eGL_STENCIL_OP_INVERT = 0x150A,
		eGL_STENCIL_OP_KEEP = 0x1E00,
		eGL_STENCIL_OP_REPLACE = 0x1E01,
		eGL_STENCIL_OP_INCR = 0x1E02,
		eGL_STENCIL_OP_DECR = 0x1E03,
		eGL_STENCIL_OP_INCR_WRAP = 0x8507,
		eGL_STENCIL_OP_DECR_WRAP = 0x8508,
	}	eGL_STENCIL_OP;

	typedef enum eGL_FILL_MODE
	{
		eGL_FILL_MODE_POINT = 0x1B00,
		eGL_FILL_MODE_LINE = 0x1B01,
		eGL_FILL_MODE_FILL = 0x1B02,
	}	eGL_FILL_MODE;

	typedef enum eGL_SAMPLER_PARAMETER
	{
		eGL_SAMPLER_PARAMETER_BORDERCOLOUR = 0x1004,
		eGL_SAMPLER_PARAMETER_MAGFILTER = 0x2800,
		eGL_SAMPLER_PARAMETER_MINFILTER = 0x2801,
		eGL_SAMPLER_PARAMETER_UWRAP = 0x2802,
		eGL_SAMPLER_PARAMETER_VWRAP = 0x2803,
		eGL_SAMPLER_PARAMETER_WWRAP = 0x8072,
		eGL_SAMPLER_PARAMETER_MINLOD = 0x813A,
		eGL_SAMPLER_PARAMETER_MAXLOD = 0x813B,
		eGL_SAMPLER_PARAMETER_MAXANISOTROPY = 0x84FE,
		eGL_SAMPLER_PARAMETER_LODBIAS = 0x8501,
	}	eGL_SAMPLER_PARAMETER;

	typedef enum eGL_DEBUG_TYPE CASTOR_TYPE( uint32_t )
	{
		eGL_DEBUG_TYPE_ERROR = 0x824C,
		eGL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D,
		eGL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E,
		eGL_DEBUG_TYPE_PORTABILITY = 0x824F,
		eGL_DEBUG_TYPE_PERFORMANCE = 0x8250,
		eGL_DEBUG_TYPE_OTHER = 0x8251,
	}	eGL_DEBUG_TYPE;

	typedef enum eGL_DEBUG_SOURCE CASTOR_TYPE( uint32_t )
	{
		eGL_DEBUG_SOURCE_API = 0x8246,
		eGL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247,
		eGL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248,
		eGL_DEBUG_SOURCE_THIRD_PARTY = 0x8249,
		eGL_DEBUG_SOURCE_APPLICATION = 0x824A,
		eGL_DEBUG_SOURCE_OTHER = 0x824B,
	}	eGL_DEBUG_SOURCE;

	typedef enum eGL_DEBUG_CATEGORY CASTOR_TYPE( uint32_t )
	{
		eGL_DEBUG_CATEGORY_API_ERROR = 0x9149,
		eGL_DEBUG_CATEGORY_WINDOW_SYSTEM = 0x914A,
		eGL_DEBUG_CATEGORY_DEPRECATION = 0x914B,
		eGL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR = 0x914C,
		eGL_DEBUG_CATEGORY_PERFORMANCE = 0x914D,
		eGL_DEBUG_CATEGORY_SHADER_COMPILER = 0x914E,
		eGL_DEBUG_CATEGORY_APPLICATION = 0x914F,
		eGL_DEBUG_CATEGORY_OTHER = 0x9150,
	}	eGL_DEBUG_CATEGORY;

	typedef enum eGL_DEBUG_SEVERITY CASTOR_TYPE( uint32_t )
	{
		eGL_DEBUG_SEVERITY_HIGH = 0x9146,
		eGL_DEBUG_SEVERITY_MEDIUM = 0x9147,
		eGL_DEBUG_SEVERITY_LOW = 0x9148,
	}	eGL_DEBUG_SEVERITY;

	typedef enum eGL_MAX CASTOR_TYPE( uint32_t )
	{
		eGL_MAX_TEXTURE_SIZE = 0x0D33,
		eGL_MAX_ELEMENTS_VERTICES = 0x80E8,
		eGL_MAX_ELEMENTS_INDICES = 0x80E9,
		eGL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262,
		eGL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263,
		eGL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264,
		eGL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265,
		eGL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266,
		eGL_MAX_RENDERBUFFER_SIZE = 0x84E8,
		eGL_MAX_TEXTURE_LOD_BIAS = 0x84FD,
		eGL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8,
		eGL_MAX_TEXTURE_UNITS = 0x84E2,
		eGL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C,
		eGL_MAX_DRAW_BUFFERS = 0x8824,
		eGL_MAX_VERTEX_ATTRIBS = 0x8869,
		eGL_MAX_TEXTURE_COORDS = 0x8871,
		eGL_MAX_TEXTURE_IMAGE_UNITS = 0x8872,
		eGL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F,
		eGL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49,
		eGL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A,
		eGL_MAX_VARYING_FLOATS = 0x8B4B,
		eGL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C,
		eGL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D,
		eGL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B,
		eGL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29,
		eGL_MAX_COLOR_ATTACHMENTS = 0x8CDF,
		eGL_MAX_SAMPLES = 0x8D57,
		eGL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF,
		eGL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0,
		eGL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1,
		eGL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122,
		eGL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123,
		eGL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124,
		eGL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125,
		eGL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143,
		eGL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144,
		eGL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB,
		eGL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC,
		eGL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD,
		eGL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE,
		eGL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF,
		eGL_MAX_FRAMEBUFFER_WIDTH = 0x9315,
		eGL_MAX_FRAMEBUFFER_HEIGHT = 0x9316,
		eGL_MAX_FRAMEBUFFER_LAYERS = 0x9317,
		eGL_MAX_FRAMEBUFFER_SAMPLES = 0x9318,
	}	eGL_MAX;

	typedef enum eGL_HINT
	{
		eGL_HINT_LINE_SMOOTH = 0x0C52,
		eGL_HINT_POLYGON_SMOOTH = 0x0C53,
		eGL_HINT_VOLUME_CLIPPING = 0x80F0,
		eGL_HINT_TEXTURE_COMPRESSION = 0x84EF,
		eGL_HINT_SHADER_DERIVATIVE = 0x8B8B,
	}	eGL_HINT;

	typedef enum eGL_HINT_VALUE
	{
		eGL_HINT_VALUE_DONTCARE = 0x1100,
		eGL_HINT_VALUE_FASTEST = 0x1101,
		eGL_HINT_VALUE_NICEST = 0x1102,
	}	eGL_HINT_VALUE;

	typedef enum eGL_STORAGE_MODE CASTOR_TYPE( uint32_t )
	{
		eGL_STORAGE_MODE_UNPACK_SWAP_BYTES = 0x0CF0,
		eGL_STORAGE_MODE_UNPACK_LSB_FIRST = 0x0CF1,
		eGL_STORAGE_MODE_UNPACK_ROW_LENGTH = 0x0CF2,
		eGL_STORAGE_MODE_UNPACK_SKIP_ROWS = 0x0CF3,
		eGL_STORAGE_MODE_UNPACK_SKIP_PIXELS = 0x0CF4,
		eGL_STORAGE_MODE_UNPACK_ALIGNMENT = 0x0CF5,
		eGL_STORAGE_MODE_PACK_SWAP_BYTES = 0x0D00,
		eGL_STORAGE_MODE_PACK_LSB_FIRST = 0x0D01,
		eGL_STORAGE_MODE_PACK_ROW_LENGTH = 0x0D02,
		eGL_STORAGE_MODE_PACK_SKIP_ROWS = 0x0D03,
		eGL_STORAGE_MODE_PACK_SKIP_PIXELS = 0x0D04,
		eGL_STORAGE_MODE_PACK_ALIGNMENT = 0x0D05,
		eGL_STORAGE_MODE_PACK_IMAGE_HEIGHT = 0x806C,
		eGL_STORAGE_MODE_UNPACK_IMAGE_HEIGHT = 0x806E,
	}	eGL_STORAGE_MODE;

	typedef enum eGL_BUFFER_PARAMETER CASTOR_TYPE( uint32_t )
	{
		eGL_BUFFER_PARAMETER_SIZE = 0x8764,
		eGL_BUFFER_PARAMETER_USAGE = 0x8765,
		eGL_BUFFER_PARAMETER_ACCESS = 0x88BB,
		eGL_BUFFER_PARAMETER_MAPPED = 0x88BD,
		eGL_BUFFER_PARAMETER_GPU_ADDRESS = 0x8F1D,
	}	eGL_BUFFER_PARAMETER;

	typedef enum eGL_RESIDENT_BUFFER_ACCESS CASTOR_TYPE( uint32_t )
	{
		eGL_RESIDENT_BUFFER_ACCESS_READ_ONLY = 0x88B8
	}	eGL_RESIDENT_BUFFER_ACCESS;

	typedef enum eGL_ADDRESS CASTOR_TYPE( uint32_t )
	{
		eGL_ADDRESS_VERTEX_ATTRIB_ARRAY = 0x8F20,
		eGL_ADDRESS_TEXTURE_COORD_ARRAY = 0x8F25,
		eGL_ADDRESS_VERTEX_ARRAY = 0x8F21,
		eGL_ADDRESS_NORMAL_ARRAY = 0x8F22,
		eGL_ADDRESS_COLOR_ARRAY = 0x8F23,
		eGL_ADDRESS_INDEX_ARRAY = 0x8F24,
		eGL_ADDRESS_EDGE_FLAG_ARRAY = 0x8F26,
		eGL_ADDRESS_SECONDARY_COLOR_ARRAY = 0x8F27,
		eGL_ADDRESS_FOG_COORD_ARRAY = 0x8F28,
		eGL_ADDRESS_ELEMENT_ARRAY = 0x8F29,
	}	eGL_ADDRESS;

	typedef enum eGL_QUERY CASTOR_TYPE( uint32_t )
	{
		eGL_QUERY_TIME_ELAPSED = 0x88BF,
		eGL_QUERY_SAMPLES_PASSED = 0x8914,
		eGL_QUERY_ANY_SAMPLES_PASSED = 0x8C2F,
		eGL_QUERY_PRIMITIVES_GENERATED = 0x8C87,
		eGL_QUERY_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88,
		eGL_QUERY_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A,
		eGL_QUERY_TIMESTAMP = 0x8E28,
	}	eGL_QUERY;

	typedef enum eGL_QUERY_INFO CASTOR_TYPE( uint32_t )
	{
		eGL_QUERY_INFO_RESULT = 0x8866,
		eGL_QUERY_INFO_RESULT_AVAILABLE = 0x8867,
		eGL_QUERY_INFO_RESULT_NO_WAIT = 0x9194,
	}	eGL_QUERY_INFO;

	/*!
	@author
		Sylvain DOREMUS
	@date
		19/11/2015
	@version
		0.8.0
	@brief
		Helper class to create an object on GPU
	*/
	template< typename CreateFunction >
	struct CreatorHelper;

	/*!
	@author
		Sylvain DOREMUS
	@date
		19/11/2015
	@version
		0.8.0
	@brief
		Helper class to destroy an object on GPU
	*/
	template< typename DestroyFunction >
	struct DestroyerHelper;

	class GlRenderSystem;
	class GlAttributeBase;
	template< typename T, uint32_t Count > class GlAttribute;
	template< typename T > class GlBufferBase;
	template< typename T > class GlBuffer;
	class GlVertexBufferObject;
	class Gl3VertexBufferObject;
	class GlGeometryBuffers;
	class GlIndexArray;
	class GlVertexArray;
	class GlIndexBufferObject;
	class GlMatrixBufferObject;
	class GlTextureBufferObject;
	typedef GlAttribute< real, 4 > GlAttribute4r;
	typedef GlAttribute< real, 3 > GlAttribute3r;
	typedef GlAttribute< real, 2 > GlAttribute2r;
	typedef GlAttribute< real, 1 > GlAttribute1r;
	typedef GlAttribute< int, 4 > GlAttribute4i;
	typedef GlAttribute< int, 3 > GlAttribute3i;
	typedef GlAttribute< int, 2 > GlAttribute2i;
	typedef GlAttribute< int, 1 > GlAttribute1i;
	typedef GlAttribute< uint32_t, 1 > GlAttribute1ui;
	DECLARE_SMART_PTR( GlAttributeBase );
	DECLARE_SMART_PTR( GlIndexArray );
	DECLARE_SMART_PTR( GlVertexArray );
	DECLARE_SMART_PTR( GlIndexBufferObject );
	DECLARE_SMART_PTR( GlVertexBufferObject );
	DECLARE_SMART_PTR( GlTextureBufferObject );
	DECLARE_VECTOR(	GlAttributeBaseSPtr, GlAttributePtr );
	DECLARE_VECTOR(	GlTextureBufferObjectSPtr, GlTextureBufferObjectPtr );

	class GlShaderObject;
	class GlShaderProgram;
	template< typename Type > struct OneVariableBinder;
	template< typename Type, uint32_t Count > struct PointVariableBinder;
	template< typename Type, uint32_t Rows, uint32_t Columns > struct MatrixVariableBinder;
	class GlFrameVariableBase;
	struct GlVariableApplyerBase;
	class UboVariableInfos;
	class GlFrameVariableBuffer;
	template< typename T > class GlOneFrameVariable;
	template< typename T, uint32_t Count > class GlPointFrameVariable;
	template< typename T, uint32_t Rows, uint32_t Columns > class GlMatrixFrameVariable;
	DECLARE_SMART_PTR( UboVariableInfos );
	DECLARE_SMART_PTR( GlVariableApplyerBase );
	DECLARE_SMART_PTR( GlFrameVariableBase );
	DECLARE_SMART_PTR( GlShaderObject );
	DECLARE_SMART_PTR( GlShaderProgram );
	DECLARE_VECTOR( GlShaderProgramSPtr, GlShaderProgramPtr );
	DECLARE_VECTOR( GlShaderObjectSPtr, GlShaderObjectPtr );
	DECLARE_MAP( Castor::String, GlFrameVariableBaseSPtr, GlFrameVariablePtrStr );
	DECLARE_MAP( Castor3D::FrameVariableSPtr, UboVariableInfosSPtr, UboVariableInfos );
	DECLARE_MAP( Castor3D::FrameVariableSPtr, GlVariableApplyerBaseSPtr, VariableApplyer );

	class GlRenderBuffer;
	class GlColourRenderBuffer;
	class GlDepthRenderBuffer;
	class GlStencilRenderBuffer;
	class GlRenderBufferAttachment;
	class GlTextureAttachment;
	class GlFrameBuffer;
	DECLARE_SMART_PTR( GlFrameBuffer );
	DECLARE_SMART_PTR( GlRenderBuffer );
	DECLARE_SMART_PTR( GlColourRenderBuffer );
	DECLARE_SMART_PTR( GlDepthRenderBuffer );
	DECLARE_SMART_PTR( GlTextureAttachment );
	DECLARE_SMART_PTR( GlRenderBufferAttachment );
	DECLARE_VECTOR(	GlDepthRenderBufferSPtr, GlDepthRenderBufferPtr );
	DECLARE_VECTOR(	GlTextureAttachmentSPtr, GlTextureAttachmentPtr );
	DECLARE_VECTOR(	GlRenderBufferAttachmentSPtr, GlRenderBufferAttachmentPtr );

	class GlBillboardList;
	class GlBlendState;
	class GlDepthStencilState;
	class GlRasteriserState;
	class GlPipelineImpl;
	class GlContext;
	class GlContextImpl;
	class GlRenderSystem;
	DECLARE_SMART_PTR( GlContext );

	class GlTexture;
	class GlTextureStorage;
	class GlTexturePboStorage;
	class GlTextureTboStorage;
	class GlDynamicTexture;
	class GlStaticTexture;
	class GlGpuIoBuffer;
	class GlDownloadPixelBuffer;
	class GlUploadPixelBuffer;
	DECLARE_SMART_PTR( GlDynamicTexture );
	DECLARE_SMART_PTR( GlStaticTexture );
	DECLARE_SMART_PTR( GlTextureStorage );
	DECLARE_SMART_PTR( GlGpuIoBuffer );
	DECLARE_SMART_PTR( GlDownloadPixelBuffer );
	DECLARE_SMART_PTR( GlUploadPixelBuffer );

	class GlOverlayRenderer;
	class GlRenderTarget;
	class GlRenderWindow;
	class OpenGl;

	namespace GLSL
	{
		class GlslWriter;
	}
}

#	if !defined( NDEBUG )
#		define glCheckError( gl, txt )			( gl ).GlCheckError( txt )
#		define glTrack( gl, type, object )		( gl ).Track( object, type, __FILE__, __LINE__ )
#		define glUntrack( gl, object )			( gl ).UnTrack( object )
#	else
#		define glCheckError( gl, txt )			true
#		define glTrack( gl, type, object )
#		define glUntrack( gl, object )
#	endif

//#include "OpenGl.hpp"
#endif

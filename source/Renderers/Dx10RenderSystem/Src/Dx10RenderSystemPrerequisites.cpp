#include "Dx10RenderSystemPrerequisites.hpp"

#include <Logger.hpp>

using namespace Castor3D;
using namespace Castor;
using namespace Dx10Render;

String DirectX10::HlslStrings[] =
{
	cuT( "[e00] GLSL is not available!" )
	,	cuT( "[e01] Not a valid program object!" )
	,	cuT( "[e02] Not a valid object!" )
	,	cuT( "[e03] Out of memory!" )
	,	cuT( "[e04] Unknown compiler error!" )
	,	cuT( "[e05] Linker log is not available!" )
	,	cuT( "[e06] Compiler log is not available!" )
	,	cuT( "[Empty]" )
};

String DirectX10::HlslErrors[] =
{
	cuT( "[500] Invalid Enum !" )
	,	cuT( "[501] Invalid Value !" )
	,	cuT( "[502] Invalid Operation !" )
	,	cuT( "[503] Stack Overflow !" )
	,	cuT( "[504] Stack Underflow !" )
	,	cuT( "[505] Out of memory !" )
	,	cuT( "[506] Table too large" )
	,	cuT( "[Empty] Unknown Error" )
};

DWORD DirectX10::TextureDimensions[eTEXTURE_DIMENSION_COUNT] =
{
	0
	,	0
	,	0
};

DWORD DirectX10::LightIndexes[eLIGHT_INDEXES_COUNT] =
{
	0
	,	1
	,	2
	,	3
	,	4
	,	5
	,	6
	,	7
};

DWORD DirectX10::Index[eATTACHMENT_POINT_COUNT] =
{
	0xFFFFFFFF
	,	0
	,	1
	,	2
	,	3
	,	4
	,	5
	,	6
	,	7
	,	8
	,	9
	,	10
	,	11
	,	12
	,	13
	,	14
	,	15
	,	0
	,	0
};

DXGI_FORMAT DirectX10::PixelFormats[ePIXEL_FORMAT_COUNT] =
{
	DXGI_FORMAT_R8_UNORM			//ePIXEL_FORMAT_L8
	,	DXGI_FORMAT_R16_FLOAT			//ePIXEL_FORMAT_L16F32F
	,	DXGI_FORMAT_R32_FLOAT			//ePIXEL_FORMAT_L32F
	,	DXGI_FORMAT_R8G8_UNORM			//ePIXEL_FORMAT_A8L8
	,	DXGI_FORMAT_R16G16_FLOAT		//ePIXEL_FORMAT_AL16F32F
	,	DXGI_FORMAT_R32G32_FLOAT		//ePIXEL_FORMAT_AL32F
	,	DXGI_FORMAT_B5G5R5A1_UNORM		//ePIXEL_FORMAT_A1R5G5B5
	,	DXGI_FORMAT_UNKNOWN				//ePIXEL_FORMAT_A4R4G4B4
	,	DXGI_FORMAT_B5G6R5_UNORM		//ePIXEL_FORMAT_R5G6B5
	,	DXGI_FORMAT_UNKNOWN				//ePIXEL_FORMAT_R8G8B8
	,	DXGI_FORMAT_R8G8B8A8_UNORM		//ePIXEL_FORMAT_A8R8G8B8
	,	DXGI_FORMAT_UNKNOWN				//ePIXEL_FORMAT_RGB16F32F
	,	DXGI_FORMAT_R16G16B16A16_FLOAT	//ePIXEL_FORMAT_ARGB16F32F
	,	DXGI_FORMAT_R32G32B32_FLOAT		//ePIXEL_FORMAT_RGB32F
	,	DXGI_FORMAT_R32G32B32A32_FLOAT	//ePIXEL_FORMAT_ARGB32F
	,	DXGI_FORMAT_BC1_UNORM			//ePIXEL_FORMAT_DXTC1
	,	DXGI_FORMAT_BC2_UNORM			//ePIXEL_FORMAT_DXTC3
	,	DXGI_FORMAT_BC3_UNORM			//ePIXEL_FORMAT_DXTC5
	,	DXGI_FORMAT_R8G8_B8G8_UNORM		//ePIXEL_FORMAT_YUY2
	,	DXGI_FORMAT_D16_UNORM			//ePIXEL_FORMAT_DEPTH16
	,	DXGI_FORMAT_D24_UNORM_S8_UINT	//ePIXEL_FORMAT_DEPTH24
	,	DXGI_FORMAT_D24_UNORM_S8_UINT	//ePIXEL_FORMAT_DEPTH24S8
	,	DXGI_FORMAT_D32_FLOAT			//ePIXEL_FORMAT_DEPTH32
	,	DXGI_FORMAT_UNKNOWN				//ePIXEL_FORMAT_STENCIL1
	,	DXGI_FORMAT_D24_UNORM_S8_UINT	//ePIXEL_FORMAT_STENCIL8
};

D3D10_TEXTURE_ADDRESS_MODE DirectX10::TextureWrapMode[eWRAP_MODE_COUNT] =
{
	D3D10_TEXTURE_ADDRESS_WRAP
	,	D3D10_TEXTURE_ADDRESS_CLAMP
	,	D3D10_TEXTURE_ADDRESS_BORDER
	,	D3D10_TEXTURE_ADDRESS_BORDER
};

DWORD DirectX10::TextureInterpolation[eINTERPOLATION_MODE_COUNT] =
{
	D3D10_FILTER_TYPE_POINT
	,	D3D10_FILTER_TYPE_POINT
	,	D3D10_FILTER_TYPE_LINEAR
	,	D3D10_FILTER_TYPE_LINEAR
};

D3D10_BLEND DirectX10::BlendFactors[eBLEND_COUNT] =
{
	D3D10_BLEND_ZERO
	,	D3D10_BLEND_ONE
	,	D3D10_BLEND_SRC_COLOR
	,	D3D10_BLEND_INV_SRC_COLOR
	,	D3D10_BLEND_DEST_COLOR
	,	D3D10_BLEND_INV_DEST_COLOR
	,	D3D10_BLEND_SRC_ALPHA
	,	D3D10_BLEND_INV_SRC_ALPHA
	,	D3D10_BLEND_DEST_ALPHA
	,	D3D10_BLEND_INV_DEST_ALPHA
	,	D3D10_BLEND_BLEND_FACTOR
	,	D3D10_BLEND_INV_BLEND_FACTOR
	,	D3D10_BLEND_SRC_ALPHA_SAT
	,	D3D10_BLEND_SRC1_COLOR
	,	D3D10_BLEND_INV_SRC1_COLOR
	,	D3D10_BLEND_SRC1_ALPHA
	,	D3D10_BLEND_INV_SRC1_ALPHA
};

D3D10_BLEND_OP DirectX10::BlendOps[eBLEND_OP_COUNT] =
{
	D3D10_BLEND_OP_ADD
	,	D3D10_BLEND_OP_SUBTRACT
	,	D3D10_BLEND_OP_REV_SUBTRACT
	,	D3D10_BLEND_OP_MIN
	,	D3D10_BLEND_OP_MAX
};

D3D10_PRIMITIVE_TOPOLOGY DirectX10::DrawTypes[eTOPOLOGY_COUNT] =
{
	D3D10_PRIMITIVE_TOPOLOGY_POINTLIST		// eTOPOLOGY_POINTS
	,	D3D10_PRIMITIVE_TOPOLOGY_LINELIST		// eTOPOLOGY_LINES
	,	D3D10_PRIMITIVE_TOPOLOGY_LINELIST		// eTOPOLOGY_LINE_LOOP
	,	D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP		// eTOPOLOGY_LINE_STRIP
	,	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST	// eTOPOLOGY_TRIANGLES
	,	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	// eTOPOLOGY_TRIANGLE_STRIPS
	,	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST	// eTOPOLOGY_TRIANGLE_FAN
	,	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST	// eTOPOLOGY_QUADS
	,	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	// eTOPOLOGY_QUAD_STRIPS
	,	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST	// eTOPOLOGY_POLYGON
};

D3D10_DEPTH_WRITE_MASK DirectX10::DepthMasks[eWRITING_MASK_COUNT] =
{
	D3D10_DEPTH_WRITE_MASK_ZERO
	,	D3D10_DEPTH_WRITE_MASK_ALL
};

D3D10_COMPARISON_FUNC DirectX10::DepthFuncs[eDEPTH_FUNC_COUNT] =
{
	D3D10_COMPARISON_NEVER			// eDEPTH_FUNC_NEVER
	,	D3D10_COMPARISON_LESS			// eDEPTH_FUNC_LESS
	,	D3D10_COMPARISON_EQUAL			// eDEPTH_FUNC_EQUAL
	,	D3D10_COMPARISON_LESS_EQUAL		// eDEPTH_FUNC_LEQUAL
	,	D3D10_COMPARISON_GREATER		// eDEPTH_FUNC_GREATER
	,	D3D10_COMPARISON_NOT_EQUAL		// eDEPTH_FUNC_NOTEQUAL
	,	D3D10_COMPARISON_GREATER_EQUAL	// eDEPTH_FUNC_GEQUAL
	,	D3D10_COMPARISON_ALWAYS			// eDEPTH_FUNC_ALWAYS
};

D3D10_COMPARISON_FUNC DirectX10::StencilFuncs[eSTENCIL_FUNC_COUNT] =
{
	D3D10_COMPARISON_NEVER			// eSTENCIL_FUNC_NEVER
	,	D3D10_COMPARISON_LESS			// eSTENCIL_FUNC_LESS
	,	D3D10_COMPARISON_EQUAL			// eSTENCIL_FUNC_EQUAL
	,	D3D10_COMPARISON_LESS_EQUAL		// eSTENCIL_FUNC_LEQUAL
	,	D3D10_COMPARISON_GREATER		// eSTENCIL_FUNC_GREATER
	,	D3D10_COMPARISON_NOT_EQUAL		// eSTENCIL_FUNC_NOTEQUAL
	,	D3D10_COMPARISON_GREATER_EQUAL	// eSTENCIL_FUNC_GEQUAL
	,	D3D10_COMPARISON_ALWAYS			// eSTENCIL_FUNC_ALWAYS
};

D3D10_STENCIL_OP DirectX10::StencilOps[eSTENCIL_OP_COUNT] =
{
	D3D10_STENCIL_OP_KEEP		// eSTENCIL_OP_KEEP
	,	D3D10_STENCIL_OP_ZERO		// eSTENCIL_OP_ZERO
	,	D3D10_STENCIL_OP_REPLACE	// eSTENCIL_OP_REPLACE
	,	D3D10_STENCIL_OP_INCR		// eSTENCIL_OP_INCR
	,	D3D10_STENCIL_OP_INCR_SAT	// eSTENCIL_OP_INCR_WRAP
	,	D3D10_STENCIL_OP_DECR		// eSTENCIL_OP_DECR
	,	D3D10_STENCIL_OP_DECR_SAT	// eSTENCIL_OP_DECR_WRAP
	,	D3D10_STENCIL_OP_INVERT		// eSTENCIL_OP_INVERT
};

D3D10_FILL_MODE DirectX10::FillModes[3] =
{
	D3D10_FILL_WIREFRAME
	,	D3D10_FILL_WIREFRAME
	,	D3D10_FILL_SOLID
};

D3D10_CULL_MODE DirectX10::CullModes[3] =
{
	D3D10_CULL_NONE
	,	D3D10_CULL_FRONT
	,	D3D10_CULL_BACK
};

std::map< eBUFFER_ACCESS_TYPE,		D3D10_USAGE				> DirectX10::Usages;
std::map< eBUFFER_ACCESS_NATURE,	D3D10_CPU_ACCESS_FLAG	> DirectX10::Accesses;
std::map< HRESULT,					String					> DirectX10::MapErrors;

void DirectX10::Initialise()
{
	Usages[eBUFFER_ACCESS_TYPE_DYNAMIC] = D3D10_USAGE_DYNAMIC;
	Usages[eBUFFER_ACCESS_TYPE_STATIC] = D3D10_USAGE_IMMUTABLE;
	Usages[eBUFFER_ACCESS_TYPE_STREAM] = D3D10_USAGE_DYNAMIC;
	Accesses[eBUFFER_ACCESS_NATURE_READ] = D3D10_CPU_ACCESS_READ;
	Accesses[eBUFFER_ACCESS_NATURE_DRAW] = D3D10_CPU_ACCESS_WRITE;
	Accesses[eBUFFER_ACCESS_NATURE_COPY] = D3D10_CPU_ACCESS_FLAG( 0 );
}

void DirectX10::Cleanup()
{
	MapErrors.clear();
	Usages.clear();
}

bool DirectX10::CheckError( HRESULT p_hResult, String const & p_text )
{
	if ( p_hResult != S_OK )
	{
		String l_strWinError = p_text + cuT( " :" );
		LPTSTR l_szError = 0;
		std::map <HRESULT, String>::iterator l_it = MapErrors.find( p_hResult );

		if ( l_it != MapErrors.end() )
		{
			l_strWinError += cuT( " " ) + l_it->second;
		}

		if ( ::FormatMessage( FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM, nullptr, GetLastError(), 0, ( LPTSTR )& l_szError, 0, nullptr ) != 0 )
		{
			l_strWinError += str_utils::from_str( " - Windows : " ) + l_szError;
			LocalFree( l_szError );
			str_utils::replace( l_strWinError, cuT( "\r" ), cuEmptyString );
			str_utils::replace( l_strWinError, cuT( "\n" ), cuEmptyString );
		}

		Logger::LogError( l_strWinError );
		return false;
	}

	return true;
}

DWORD DirectX10::GetLockFlags( uint32_t p_uiFlags )
{
	DWORD l_ulLockFlags = 0;

	if ( p_uiFlags & eLOCK_FLAG_READ_ONLY )
	{
		l_ulLockFlags |= D3D10_MAP_READ;
	}

	if ( p_uiFlags & eLOCK_FLAG_WRITE_ONLY )
	{
		l_ulLockFlags |= D3D10_MAP_WRITE_DISCARD;
	}

	return l_ulLockFlags;
}

bool DirectX10::UnlockBuffer( ID3D10Buffer * p_pBuffer )
{
	p_pBuffer->Unmap();
	return true;
}
